
from __future__ import print_function
import sys, os, copy

# This is not required if you've installed pycparser into
# your site-packages/ with setup.py
#
sys.path.extend(['.', '..'])

#find bugs by association rules
def findBugsByFPRules(fileList,FPRuleList):
   bugList=[]
   bugCount=0
   ruleCount=str(len(FPRuleList))#number of rules
   trvailRuleCount=0#number of rules with conf=1
   lineCount=str(len(fileList))#the number of file lines, number of functions
   for rule in FPRuleList:
      ruleLeftSet=set(rule[0])
      confirmCount=0
      againstCount=0
      for line in fileList:
         lineSet=set(line[0:len(line)-1])#the set composed by all the func call statements in one line
         #print(lineSet)
         leftContain=True
         for rls in ruleLeftSet:
            if(rls not in line):#ruleLeftSet is not included in the line, continue without analysis
               leftContain=False
               break
         if(leftContain == True):#check if the left part of rule contains in the line, check right part
            rightContain=True
            ruleRightSet=set(rule[1])
            for rrs in ruleRightSet:
               if(rrs not in lineSet):#right item not contain in  rule
                  rightContain=False
                  break
            if(rightContain==True):#confirm rule 
               confirmCount=confirmCount+1
            else:#against rule ,find a bug
               againstCount=againstCount+1
               bugCount=bugCount+1
               bugStr=str(bugCount)+', Find a bug in: '+str(line)+', against rule: '+str(rule)
               bugList.append(bugStr)
      if(againstCount==0):
         trvailRuleCount=trvailRuleCount+1
      print(rule)
      print('conf:'+str(confirmCount/(confirmCount+againstCount))+','+str(confirmCount)+'/'+str(confirmCount+againstCount))   
   print('findBugsByFPRules finished! analysis '+lineCount+' function calls for '+ruleCount+' rules, including '+str(trvailRuleCount)+' rules with confidence 1. Find '+str(len(bugList))+' Bugs.')
   return bugList


#read the file generated by FPGrowth     
def loadFPGReslut(fileName):
   FPRuleList=[]#save the list of association rules, one rule in FPRulelist composed by 2 elements, the first elment is the left part of association rule, the second element is the right part of association rule
   FPGFile = open(fileName,'r')
   for line in FPGFile:
      if (line.find(' = T')==-1):#not a association rule
         continue

      FPRule=[]

      line=line[line.find('	')+1:]
      line=line[0:line.rfind(' = T')+4]
      preLine=line[0:line.find('	')]
      subLine=line[line.find('	')+1:]#the right side of association rules
      preLine=preLine.replace(' ', '')#eliminate space
      subLine=subLine.replace(' ', '')#eliminate space
      #if it's an association rule
      preLine=preLine.replace('=T', '')
      FPRuleLeft=preLine.split(',') 
      subLine=subLine.replace('=T', '')
      FPRuleRight=subLine.split(',') 

      FPRule.append(FPRuleLeft) 
      FPRule.append(FPRuleRight) 
      FPRuleList.append(FPRule)

   return FPRuleList

mappingFileName=sys.argv[1] 
mappingFile = open(mappingFileName,'r')
fileList=[]#save all lines in fileList, one line in a lineList
for line in mappingFile:
   lineList=[]#one line save as a list, the first element is funcs, the second element is position info
   preLine=line[0:line.find('@')]
   lineList = preLine.split(',')  
   subLine=line[line.find('@'):len(line)-1]
   lineList.append(subLine)
   temp=copy.deepcopy(lineList)
   fileList.append(temp)

ruleFileName=sys.argv[2] 
FPRuleList=loadFPGReslut(ruleFileName)
FPbugList=findBugsByFPRules(fileList,FPRuleList)
for bug in FPbugList:
   print(bug)





