Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit_or_empty
Rule 1     abstract_declarator_opt -> empty
Rule 2     abstract_declarator_opt -> abstract_declarator
Rule 3     assignment_expression_opt -> empty
Rule 4     assignment_expression_opt -> assignment_expression
Rule 5     block_item_list_opt -> empty
Rule 6     block_item_list_opt -> block_item_list
Rule 7     declaration_list_opt -> empty
Rule 8     declaration_list_opt -> declaration_list
Rule 9     declaration_specifiers_opt -> empty
Rule 10    declaration_specifiers_opt -> declaration_specifiers
Rule 11    designation_opt -> empty
Rule 12    designation_opt -> designation
Rule 13    expression_opt -> empty
Rule 14    expression_opt -> expression
Rule 15    identifier_list_opt -> empty
Rule 16    identifier_list_opt -> identifier_list
Rule 17    init_declarator_list_opt -> empty
Rule 18    init_declarator_list_opt -> init_declarator_list
Rule 19    initializer_list_opt -> empty
Rule 20    initializer_list_opt -> initializer_list
Rule 21    parameter_type_list_opt -> empty
Rule 22    parameter_type_list_opt -> parameter_type_list
Rule 23    specifier_qualifier_list_opt -> empty
Rule 24    specifier_qualifier_list_opt -> specifier_qualifier_list
Rule 25    struct_declarator_list_opt -> empty
Rule 26    struct_declarator_list_opt -> struct_declarator_list
Rule 27    type_qualifier_list_opt -> empty
Rule 28    type_qualifier_list_opt -> type_qualifier_list
Rule 29    translation_unit_or_empty -> translation_unit
Rule 30    translation_unit_or_empty -> empty
Rule 31    translation_unit -> external_declaration
Rule 32    translation_unit -> translation_unit external_declaration
Rule 33    external_declaration -> function_definition
Rule 34    external_declaration -> declaration
Rule 35    external_declaration -> pp_directive
Rule 36    external_declaration -> pppragma_directive
Rule 37    external_declaration -> SEMI
Rule 38    pp_directive -> PPHASH
Rule 39    pppragma_directive -> PPPRAGMA
Rule 40    pppragma_directive -> PPPRAGMA PPPRAGMASTR
Rule 41    function_definition -> declarator declaration_list_opt compound_statement
Rule 42    function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement
Rule 43    statement -> labeled_statement
Rule 44    statement -> expression_statement
Rule 45    statement -> compound_statement
Rule 46    statement -> selection_statement
Rule 47    statement -> iteration_statement
Rule 48    statement -> jump_statement
Rule 49    statement -> pppragma_directive
Rule 50    decl_body -> declaration_specifiers init_declarator_list_opt
Rule 51    declaration -> decl_body SEMI
Rule 52    declaration_list -> declaration
Rule 53    declaration_list -> declaration_list declaration
Rule 54    declaration_specifiers -> type_qualifier declaration_specifiers_opt
Rule 55    declaration_specifiers -> type_specifier declaration_specifiers_opt
Rule 56    declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
Rule 57    declaration_specifiers -> function_specifier declaration_specifiers_opt
Rule 58    storage_class_specifier -> AUTO
Rule 59    storage_class_specifier -> REGISTER
Rule 60    storage_class_specifier -> STATIC
Rule 61    storage_class_specifier -> EXTERN
Rule 62    storage_class_specifier -> TYPEDEF
Rule 63    function_specifier -> INLINE
Rule 64    type_specifier -> VOID
Rule 65    type_specifier -> _BOOL
Rule 66    type_specifier -> CHAR
Rule 67    type_specifier -> SHORT
Rule 68    type_specifier -> INT
Rule 69    type_specifier -> LONG
Rule 70    type_specifier -> FLOAT
Rule 71    type_specifier -> DOUBLE
Rule 72    type_specifier -> _COMPLEX
Rule 73    type_specifier -> SIGNED
Rule 74    type_specifier -> UNSIGNED
Rule 75    type_specifier -> typedef_name
Rule 76    type_specifier -> enum_specifier
Rule 77    type_specifier -> struct_or_union_specifier
Rule 78    type_qualifier -> CONST
Rule 79    type_qualifier -> RESTRICT
Rule 80    type_qualifier -> VOLATILE
Rule 81    init_declarator_list -> init_declarator
Rule 82    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 83    init_declarator_list -> EQUALS initializer
Rule 84    init_declarator_list -> abstract_declarator
Rule 85    init_declarator -> declarator
Rule 86    init_declarator -> declarator EQUALS initializer
Rule 87    specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt
Rule 88    specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt
Rule 89    struct_or_union_specifier -> struct_or_union ID
Rule 90    struct_or_union_specifier -> struct_or_union TYPEID
Rule 91    struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close
Rule 92    struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close
Rule 93    struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close
Rule 94    struct_or_union -> STRUCT
Rule 95    struct_or_union -> UNION
Rule 96    struct_declaration_list -> struct_declaration
Rule 97    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 98    struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI
Rule 99    struct_declaration -> specifier_qualifier_list abstract_declarator SEMI
Rule 100   struct_declaration -> SEMI
Rule 101   struct_declarator_list -> struct_declarator
Rule 102   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 103   struct_declarator -> declarator
Rule 104   struct_declarator -> declarator COLON constant_expression
Rule 105   struct_declarator -> COLON constant_expression
Rule 106   enum_specifier -> ENUM ID
Rule 107   enum_specifier -> ENUM TYPEID
Rule 108   enum_specifier -> ENUM brace_open enumerator_list brace_close
Rule 109   enum_specifier -> ENUM ID brace_open enumerator_list brace_close
Rule 110   enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close
Rule 111   enumerator_list -> enumerator
Rule 112   enumerator_list -> enumerator_list COMMA
Rule 113   enumerator_list -> enumerator_list COMMA enumerator
Rule 114   enumerator -> ID
Rule 115   enumerator -> ID EQUALS constant_expression
Rule 116   declarator -> direct_declarator
Rule 117   declarator -> pointer direct_declarator
Rule 118   declarator -> pointer TYPEID
Rule 119   direct_declarator -> ID
Rule 120   direct_declarator -> LPAREN declarator RPAREN
Rule 121   direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
Rule 122   direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
Rule 123   direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
Rule 124   direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
Rule 125   direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN
Rule 126   direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 127   pointer -> TIMES type_qualifier_list_opt
Rule 128   pointer -> TIMES type_qualifier_list_opt pointer
Rule 129   type_qualifier_list -> type_qualifier
Rule 130   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 131   parameter_type_list -> parameter_list
Rule 132   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 133   parameter_list -> parameter_declaration
Rule 134   parameter_list -> parameter_list COMMA parameter_declaration
Rule 135   parameter_declaration -> declaration_specifiers declarator
Rule 136   parameter_declaration -> declaration_specifiers abstract_declarator_opt
Rule 137   identifier_list -> identifier
Rule 138   identifier_list -> identifier_list COMMA identifier
Rule 139   initializer -> assignment_expression
Rule 140   initializer -> brace_open initializer_list_opt brace_close
Rule 141   initializer -> brace_open initializer_list COMMA brace_close
Rule 142   initializer_list -> designation_opt initializer
Rule 143   initializer_list -> initializer_list COMMA designation_opt initializer
Rule 144   designation -> designator_list EQUALS
Rule 145   designator_list -> designator
Rule 146   designator_list -> designator_list designator
Rule 147   designator -> LBRACKET constant_expression RBRACKET
Rule 148   designator -> PERIOD identifier
Rule 149   type_name -> specifier_qualifier_list abstract_declarator_opt
Rule 150   abstract_declarator -> pointer
Rule 151   abstract_declarator -> pointer direct_abstract_declarator
Rule 152   abstract_declarator -> direct_abstract_declarator
Rule 153   direct_abstract_declarator -> LPAREN abstract_declarator RPAREN
Rule 154   direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
Rule 155   direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET
Rule 156   direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET
Rule 157   direct_abstract_declarator -> LBRACKET TIMES RBRACKET
Rule 158   direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
Rule 159   direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN
Rule 160   block_item -> declaration
Rule 161   block_item -> statement
Rule 162   block_item_list -> block_item
Rule 163   block_item_list -> block_item_list block_item
Rule 164   compound_statement -> brace_open block_item_list_opt brace_close
Rule 165   labeled_statement -> ID COLON statement
Rule 166   labeled_statement -> CASE constant_expression COLON statement
Rule 167   labeled_statement -> DEFAULT COLON statement
Rule 168   selection_statement -> IF LPAREN expression RPAREN statement
Rule 169   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 170   selection_statement -> SWITCH LPAREN expression RPAREN statement
Rule 171   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 172   iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI
Rule 173   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 174   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 175   jump_statement -> GOTO ID SEMI
Rule 176   jump_statement -> BREAK SEMI
Rule 177   jump_statement -> CONTINUE SEMI
Rule 178   jump_statement -> RETURN expression SEMI
Rule 179   jump_statement -> RETURN SEMI
Rule 180   expression_statement -> expression_opt SEMI
Rule 181   expression -> assignment_expression
Rule 182   expression -> expression COMMA assignment_expression
Rule 183   typedef_name -> TYPEID
Rule 184   assignment_expression -> conditional_expression
Rule 185   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 186   assignment_operator -> EQUALS
Rule 187   assignment_operator -> XOREQUAL
Rule 188   assignment_operator -> TIMESEQUAL
Rule 189   assignment_operator -> DIVEQUAL
Rule 190   assignment_operator -> MODEQUAL
Rule 191   assignment_operator -> PLUSEQUAL
Rule 192   assignment_operator -> MINUSEQUAL
Rule 193   assignment_operator -> LSHIFTEQUAL
Rule 194   assignment_operator -> RSHIFTEQUAL
Rule 195   assignment_operator -> ANDEQUAL
Rule 196   assignment_operator -> OREQUAL
Rule 197   constant_expression -> conditional_expression
Rule 198   conditional_expression -> binary_expression
Rule 199   conditional_expression -> binary_expression CONDOP expression COLON conditional_expression
Rule 200   binary_expression -> cast_expression
Rule 201   binary_expression -> binary_expression TIMES binary_expression
Rule 202   binary_expression -> binary_expression DIVIDE binary_expression
Rule 203   binary_expression -> binary_expression MOD binary_expression
Rule 204   binary_expression -> binary_expression PLUS binary_expression
Rule 205   binary_expression -> binary_expression MINUS binary_expression
Rule 206   binary_expression -> binary_expression RSHIFT binary_expression
Rule 207   binary_expression -> binary_expression LSHIFT binary_expression
Rule 208   binary_expression -> binary_expression LT binary_expression
Rule 209   binary_expression -> binary_expression LE binary_expression
Rule 210   binary_expression -> binary_expression GE binary_expression
Rule 211   binary_expression -> binary_expression GT binary_expression
Rule 212   binary_expression -> binary_expression EQ binary_expression
Rule 213   binary_expression -> binary_expression NE binary_expression
Rule 214   binary_expression -> binary_expression AND binary_expression
Rule 215   binary_expression -> binary_expression OR binary_expression
Rule 216   binary_expression -> binary_expression XOR binary_expression
Rule 217   binary_expression -> binary_expression LAND binary_expression
Rule 218   binary_expression -> binary_expression LOR binary_expression
Rule 219   cast_expression -> unary_expression
Rule 220   cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 221   unary_expression -> postfix_expression
Rule 222   unary_expression -> PLUSPLUS unary_expression
Rule 223   unary_expression -> MINUSMINUS unary_expression
Rule 224   unary_expression -> unary_operator cast_expression
Rule 225   unary_expression -> SIZEOF unary_expression
Rule 226   unary_expression -> SIZEOF LPAREN type_name RPAREN
Rule 227   unary_operator -> AND
Rule 228   unary_operator -> TIMES
Rule 229   unary_operator -> PLUS
Rule 230   unary_operator -> MINUS
Rule 231   unary_operator -> NOT
Rule 232   unary_operator -> LNOT
Rule 233   postfix_expression -> primary_expression
Rule 234   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 235   postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN
Rule 236   postfix_expression -> postfix_expression LPAREN RPAREN
Rule 237   postfix_expression -> postfix_expression PERIOD ID
Rule 238   postfix_expression -> postfix_expression PERIOD TYPEID
Rule 239   postfix_expression -> postfix_expression ARROW ID
Rule 240   postfix_expression -> postfix_expression ARROW TYPEID
Rule 241   postfix_expression -> postfix_expression PLUSPLUS
Rule 242   postfix_expression -> postfix_expression MINUSMINUS
Rule 243   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close
Rule 244   postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
Rule 245   primary_expression -> identifier
Rule 246   primary_expression -> constant
Rule 247   primary_expression -> unified_string_literal
Rule 248   primary_expression -> unified_wstring_literal
Rule 249   primary_expression -> LPAREN expression RPAREN
Rule 250   primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN
Rule 251   argument_expression_list -> assignment_expression
Rule 252   argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 253   identifier -> ID
Rule 254   constant -> INT_CONST_DEC
Rule 255   constant -> INT_CONST_OCT
Rule 256   constant -> INT_CONST_HEX
Rule 257   constant -> INT_CONST_BIN
Rule 258   constant -> FLOAT_CONST
Rule 259   constant -> HEX_FLOAT_CONST
Rule 260   constant -> CHAR_CONST
Rule 261   constant -> WCHAR_CONST
Rule 262   unified_string_literal -> STRING_LITERAL
Rule 263   unified_string_literal -> unified_string_literal STRING_LITERAL
Rule 264   unified_wstring_literal -> WSTRING_LITERAL
Rule 265   unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL
Rule 266   brace_open -> LBRACE
Rule 267   brace_close -> RBRACE
Rule 268   empty -> <empty>

Terminals, with rules where they appear

AND                  : 214 227
ANDEQUAL             : 195
ARROW                : 239 240
AUTO                 : 58
BREAK                : 176
CASE                 : 166
CHAR                 : 66
CHAR_CONST           : 260
COLON                : 104 105 165 166 167 199
COMMA                : 82 102 112 113 132 134 138 141 143 182 244 250 252
CONDOP               : 199
CONST                : 78
CONTINUE             : 177
DEFAULT              : 167
DIVEQUAL             : 189
DIVIDE               : 202
DO                   : 172
DOUBLE               : 71
ELLIPSIS             : 132
ELSE                 : 169
ENUM                 : 106 107 108 109 110
EQ                   : 212
EQUALS               : 83 86 115 144 186
EXTERN               : 61
FLOAT                : 70
FLOAT_CONST          : 258
FOR                  : 173 174
GE                   : 210
GOTO                 : 175
GT                   : 211
HEX_FLOAT_CONST      : 259
ID                   : 89 92 106 109 114 115 119 165 175 237 239 253
IF                   : 168 169
INLINE               : 63
INT                  : 68
INT_CONST_BIN        : 257
INT_CONST_DEC        : 254
INT_CONST_HEX        : 256
INT_CONST_OCT        : 255
LAND                 : 217
LBRACE               : 266
LBRACKET             : 121 122 123 124 147 154 155 156 157 234
LE                   : 209
LNOT                 : 232
LONG                 : 69
LOR                  : 218
LPAREN               : 120 125 126 153 158 159 168 169 170 171 172 173 174 220 226 235 236 243 244 249 250
LSHIFT               : 207
LSHIFTEQUAL          : 193
LT                   : 208
MINUS                : 205 230
MINUSEQUAL           : 192
MINUSMINUS           : 223 242
MOD                  : 203
MODEQUAL             : 190
NE                   : 213
NOT                  : 231
OFFSETOF             : 250
OR                   : 215
OREQUAL              : 196
PERIOD               : 148 237 238
PLUS                 : 204 229
PLUSEQUAL            : 191
PLUSPLUS             : 222 241
PPHASH               : 38
PPPRAGMA             : 39 40
PPPRAGMASTR          : 40
RBRACE               : 267
RBRACKET             : 121 122 123 124 147 154 155 156 157 234
REGISTER             : 59
RESTRICT             : 79
RETURN               : 178 179
RPAREN               : 120 125 126 153 158 159 168 169 170 171 172 173 174 220 226 235 236 243 244 249 250
RSHIFT               : 206
RSHIFTEQUAL          : 194
SEMI                 : 37 51 98 99 100 172 173 173 174 175 176 177 178 179 180
SHORT                : 67
SIGNED               : 73
SIZEOF               : 225 226
STATIC               : 60 122 123
STRING_LITERAL       : 262 263
STRUCT               : 94
SWITCH               : 170
TIMES                : 124 127 128 156 157 201 228
TIMESEQUAL           : 188
TYPEDEF              : 62
TYPEID               : 90 93 107 110 118 183 238 240
UNION                : 95
UNSIGNED             : 74
VOID                 : 64
VOLATILE             : 80
WCHAR_CONST          : 261
WHILE                : 171 172
WSTRING_LITERAL      : 264 265
XOR                  : 216
XOREQUAL             : 187
_BOOL                : 65
_COMPLEX             : 72
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 2 84 99 153
abstract_declarator_opt : 136 149
argument_expression_list : 235 252
assignment_expression : 4 122 123 139 181 182 185 251 252
assignment_expression_opt : 121 154 155
assignment_operator  : 185
binary_expression    : 198 199 201 201 202 202 203 203 204 204 205 205 206 206 207 207 208 208 209 209 210 210 211 211 212 212 213 213 214 214 215 215 216 216 217 217 218 218
block_item           : 162 163
block_item_list      : 6 163
block_item_list_opt  : 164
brace_close          : 91 92 93 108 109 110 140 141 164 243 244
brace_open           : 91 92 93 108 109 110 140 141 164 243 244
cast_expression      : 200 220 224
compound_statement   : 41 42 45
conditional_expression : 184 197 199
constant             : 246
constant_expression  : 104 105 115 147 166
decl_body            : 51
declaration          : 34 52 53 160 174
declaration_list     : 8 53
declaration_list_opt : 41 42
declaration_specifiers : 10 42 50 135 136
declaration_specifiers_opt : 54 55 56 57
declarator           : 41 42 85 86 103 104 120 135
designation          : 12
designation_opt      : 142 143
designator           : 145 146
designator_list      : 144 146
direct_abstract_declarator : 151 152 154 156 158
direct_declarator    : 116 117 121 122 123 124 125 126
empty                : 1 3 5 7 9 11 13 15 17 19 21 23 25 27 30
enum_specifier       : 76
enumerator           : 111 113
enumerator_list      : 108 109 110 112 113
expression           : 14 168 169 170 171 172 178 182 199 234 249
expression_opt       : 173 173 173 174 174 180
expression_statement : 44
external_declaration : 31 32
function_definition  : 33
function_specifier   : 57
identifier           : 137 138 148 245 250
identifier_list      : 16 138
identifier_list_opt  : 126
init_declarator      : 81 82
init_declarator_list : 18 82
init_declarator_list_opt : 50
initializer          : 83 86 142 143
initializer_list     : 20 141 143 243 244
initializer_list_opt : 140
iteration_statement  : 47
jump_statement       : 48
labeled_statement    : 43
parameter_declaration : 133 134
parameter_list       : 131 132 134
parameter_type_list  : 22 125
parameter_type_list_opt : 158 159
pointer              : 117 118 128 150 151
postfix_expression   : 221 234 235 236 237 238 239 240 241 242
pp_directive         : 35
pppragma_directive   : 36 49
primary_expression   : 233
selection_statement  : 46
specifier_qualifier_list : 24 98 99 149
specifier_qualifier_list_opt : 87 88
statement            : 161 165 166 167 168 169 169 170 171 172 173 174
storage_class_specifier : 56
struct_declaration   : 96 97
struct_declaration_list : 91 92 93 97
struct_declarator    : 101 102
struct_declarator_list : 26 102
struct_declarator_list_opt : 98
struct_or_union      : 89 90 91 92 93
struct_or_union_specifier : 77
translation_unit     : 29 32
translation_unit_or_empty : 0
type_name            : 220 226 243 244 250
type_qualifier       : 54 87 129 130
type_qualifier_list  : 28 123 130
type_qualifier_list_opt : 121 122 124 127 128
type_specifier       : 55 88
typedef_name         : 75
unary_expression     : 185 219 222 223 225
unary_operator       : 224
unified_string_literal : 247 263
unified_wstring_literal : 248 265

Parsing method: LALR

state 0

    (0) S' -> . translation_unit_or_empty
    (29) translation_unit_or_empty -> . translation_unit
    (30) translation_unit_or_empty -> . empty
    (31) translation_unit -> . external_declaration
    (32) translation_unit -> . translation_unit external_declaration
    (268) empty -> .
    (33) external_declaration -> . function_definition
    (34) external_declaration -> . declaration
    (35) external_declaration -> . pp_directive
    (36) external_declaration -> . pppragma_directive
    (37) external_declaration -> . SEMI
    (41) function_definition -> . declarator declaration_list_opt compound_statement
    (42) function_definition -> . declaration_specifiers declarator declaration_list_opt compound_statement
    (51) declaration -> . decl_body SEMI
    (38) pp_directive -> . PPHASH
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (50) decl_body -> . declaration_specifiers init_declarator_list_opt
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    $end            reduce using rule 268 (empty -> .)
    SEMI            shift and go to state 15
    PPHASH          shift and go to state 20
    PPPRAGMA        shift and go to state 19
    ID              shift and go to state 40
    LPAREN          shift and go to state 10
    TIMES           shift and go to state 17
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 1
    pppragma_directive             shift and go to state 38
    declaration                    shift and go to state 2
    enum_specifier                 shift and go to state 33
    type_specifier                 shift and go to state 41
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    decl_body                      shift and go to state 28
    typedef_name                   shift and go to state 11
    direct_declarator              shift and go to state 12
    function_specifier             shift and go to state 14
    type_qualifier                 shift and go to state 31
    function_definition            shift and go to state 16
    translation_unit_or_empty      shift and go to state 18
    pp_directive                   shift and go to state 32
    declaration_specifiers         shift and go to state 42
    translation_unit               shift and go to state 44
    declarator                     shift and go to state 21
    storage_class_specifier        shift and go to state 47
    pointer                        shift and go to state 51
    external_declaration           shift and go to state 27

state 1

    (30) translation_unit_or_empty -> empty .

    $end            reduce using rule 30 (translation_unit_or_empty -> empty .)


state 2

    (34) external_declaration -> declaration .

    SEMI            reduce using rule 34 (external_declaration -> declaration .)
    PPHASH          reduce using rule 34 (external_declaration -> declaration .)
    PPPRAGMA        reduce using rule 34 (external_declaration -> declaration .)
    ID              reduce using rule 34 (external_declaration -> declaration .)
    LPAREN          reduce using rule 34 (external_declaration -> declaration .)
    TIMES           reduce using rule 34 (external_declaration -> declaration .)
    CONST           reduce using rule 34 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 34 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 34 (external_declaration -> declaration .)
    VOID            reduce using rule 34 (external_declaration -> declaration .)
    _BOOL           reduce using rule 34 (external_declaration -> declaration .)
    CHAR            reduce using rule 34 (external_declaration -> declaration .)
    SHORT           reduce using rule 34 (external_declaration -> declaration .)
    INT             reduce using rule 34 (external_declaration -> declaration .)
    LONG            reduce using rule 34 (external_declaration -> declaration .)
    FLOAT           reduce using rule 34 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 34 (external_declaration -> declaration .)
    _COMPLEX        reduce using rule 34 (external_declaration -> declaration .)
    SIGNED          reduce using rule 34 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 34 (external_declaration -> declaration .)
    AUTO            reduce using rule 34 (external_declaration -> declaration .)
    REGISTER        reduce using rule 34 (external_declaration -> declaration .)
    STATIC          reduce using rule 34 (external_declaration -> declaration .)
    EXTERN          reduce using rule 34 (external_declaration -> declaration .)
    TYPEDEF         reduce using rule 34 (external_declaration -> declaration .)
    INLINE          reduce using rule 34 (external_declaration -> declaration .)
    TYPEID          reduce using rule 34 (external_declaration -> declaration .)
    ENUM            reduce using rule 34 (external_declaration -> declaration .)
    STRUCT          reduce using rule 34 (external_declaration -> declaration .)
    UNION           reduce using rule 34 (external_declaration -> declaration .)
    $end            reduce using rule 34 (external_declaration -> declaration .)


state 3

    (63) function_specifier -> INLINE .

    CONST           reduce using rule 63 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 63 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 63 (function_specifier -> INLINE .)
    VOID            reduce using rule 63 (function_specifier -> INLINE .)
    _BOOL           reduce using rule 63 (function_specifier -> INLINE .)
    CHAR            reduce using rule 63 (function_specifier -> INLINE .)
    SHORT           reduce using rule 63 (function_specifier -> INLINE .)
    INT             reduce using rule 63 (function_specifier -> INLINE .)
    LONG            reduce using rule 63 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 63 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 63 (function_specifier -> INLINE .)
    _COMPLEX        reduce using rule 63 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 63 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 63 (function_specifier -> INLINE .)
    AUTO            reduce using rule 63 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 63 (function_specifier -> INLINE .)
    STATIC          reduce using rule 63 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 63 (function_specifier -> INLINE .)
    TYPEDEF         reduce using rule 63 (function_specifier -> INLINE .)
    INLINE          reduce using rule 63 (function_specifier -> INLINE .)
    TYPEID          reduce using rule 63 (function_specifier -> INLINE .)
    ENUM            reduce using rule 63 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 63 (function_specifier -> INLINE .)
    UNION           reduce using rule 63 (function_specifier -> INLINE .)
    EQUALS          reduce using rule 63 (function_specifier -> INLINE .)
    TIMES           reduce using rule 63 (function_specifier -> INLINE .)
    LPAREN          reduce using rule 63 (function_specifier -> INLINE .)
    LBRACKET        reduce using rule 63 (function_specifier -> INLINE .)
    ID              reduce using rule 63 (function_specifier -> INLINE .)
    SEMI            reduce using rule 63 (function_specifier -> INLINE .)
    COMMA           reduce using rule 63 (function_specifier -> INLINE .)
    RPAREN          reduce using rule 63 (function_specifier -> INLINE .)


state 4

    (70) type_specifier -> FLOAT .

    CONST           reduce using rule 70 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 70 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 70 (type_specifier -> FLOAT .)
    VOID            reduce using rule 70 (type_specifier -> FLOAT .)
    _BOOL           reduce using rule 70 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 70 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 70 (type_specifier -> FLOAT .)
    INT             reduce using rule 70 (type_specifier -> FLOAT .)
    LONG            reduce using rule 70 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 70 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 70 (type_specifier -> FLOAT .)
    _COMPLEX        reduce using rule 70 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 70 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 70 (type_specifier -> FLOAT .)
    TYPEID          reduce using rule 70 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 70 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 70 (type_specifier -> FLOAT .)
    UNION           reduce using rule 70 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 70 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 70 (type_specifier -> FLOAT .)
    LBRACKET        reduce using rule 70 (type_specifier -> FLOAT .)
    COLON           reduce using rule 70 (type_specifier -> FLOAT .)
    ID              reduce using rule 70 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 70 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 70 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 70 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 70 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 70 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 70 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 70 (type_specifier -> FLOAT .)
    TYPEDEF         reduce using rule 70 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 70 (type_specifier -> FLOAT .)
    EQUALS          reduce using rule 70 (type_specifier -> FLOAT .)


state 5

    (71) type_specifier -> DOUBLE .

    CONST           reduce using rule 71 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 71 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 71 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 71 (type_specifier -> DOUBLE .)
    _BOOL           reduce using rule 71 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 71 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 71 (type_specifier -> DOUBLE .)
    INT             reduce using rule 71 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 71 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 71 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 71 (type_specifier -> DOUBLE .)
    _COMPLEX        reduce using rule 71 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 71 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 71 (type_specifier -> DOUBLE .)
    TYPEID          reduce using rule 71 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 71 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 71 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 71 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 71 (type_specifier -> DOUBLE .)
    LPAREN          reduce using rule 71 (type_specifier -> DOUBLE .)
    LBRACKET        reduce using rule 71 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 71 (type_specifier -> DOUBLE .)
    ID              reduce using rule 71 (type_specifier -> DOUBLE .)
    SEMI            reduce using rule 71 (type_specifier -> DOUBLE .)
    RPAREN          reduce using rule 71 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 71 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 71 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 71 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 71 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 71 (type_specifier -> DOUBLE .)
    TYPEDEF         reduce using rule 71 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 71 (type_specifier -> DOUBLE .)
    EQUALS          reduce using rule 71 (type_specifier -> DOUBLE .)


state 6

    (65) type_specifier -> _BOOL .

    CONST           reduce using rule 65 (type_specifier -> _BOOL .)
    RESTRICT        reduce using rule 65 (type_specifier -> _BOOL .)
    VOLATILE        reduce using rule 65 (type_specifier -> _BOOL .)
    VOID            reduce using rule 65 (type_specifier -> _BOOL .)
    _BOOL           reduce using rule 65 (type_specifier -> _BOOL .)
    CHAR            reduce using rule 65 (type_specifier -> _BOOL .)
    SHORT           reduce using rule 65 (type_specifier -> _BOOL .)
    INT             reduce using rule 65 (type_specifier -> _BOOL .)
    LONG            reduce using rule 65 (type_specifier -> _BOOL .)
    FLOAT           reduce using rule 65 (type_specifier -> _BOOL .)
    DOUBLE          reduce using rule 65 (type_specifier -> _BOOL .)
    _COMPLEX        reduce using rule 65 (type_specifier -> _BOOL .)
    SIGNED          reduce using rule 65 (type_specifier -> _BOOL .)
    UNSIGNED        reduce using rule 65 (type_specifier -> _BOOL .)
    TYPEID          reduce using rule 65 (type_specifier -> _BOOL .)
    ENUM            reduce using rule 65 (type_specifier -> _BOOL .)
    STRUCT          reduce using rule 65 (type_specifier -> _BOOL .)
    UNION           reduce using rule 65 (type_specifier -> _BOOL .)
    TIMES           reduce using rule 65 (type_specifier -> _BOOL .)
    LPAREN          reduce using rule 65 (type_specifier -> _BOOL .)
    LBRACKET        reduce using rule 65 (type_specifier -> _BOOL .)
    COLON           reduce using rule 65 (type_specifier -> _BOOL .)
    ID              reduce using rule 65 (type_specifier -> _BOOL .)
    SEMI            reduce using rule 65 (type_specifier -> _BOOL .)
    RPAREN          reduce using rule 65 (type_specifier -> _BOOL .)
    COMMA           reduce using rule 65 (type_specifier -> _BOOL .)
    AUTO            reduce using rule 65 (type_specifier -> _BOOL .)
    REGISTER        reduce using rule 65 (type_specifier -> _BOOL .)
    STATIC          reduce using rule 65 (type_specifier -> _BOOL .)
    EXTERN          reduce using rule 65 (type_specifier -> _BOOL .)
    TYPEDEF         reduce using rule 65 (type_specifier -> _BOOL .)
    INLINE          reduce using rule 65 (type_specifier -> _BOOL .)
    EQUALS          reduce using rule 65 (type_specifier -> _BOOL .)


state 7

    (183) typedef_name -> TYPEID .

    CONST           reduce using rule 183 (typedef_name -> TYPEID .)
    RESTRICT        reduce using rule 183 (typedef_name -> TYPEID .)
    VOLATILE        reduce using rule 183 (typedef_name -> TYPEID .)
    VOID            reduce using rule 183 (typedef_name -> TYPEID .)
    _BOOL           reduce using rule 183 (typedef_name -> TYPEID .)
    CHAR            reduce using rule 183 (typedef_name -> TYPEID .)
    SHORT           reduce using rule 183 (typedef_name -> TYPEID .)
    INT             reduce using rule 183 (typedef_name -> TYPEID .)
    LONG            reduce using rule 183 (typedef_name -> TYPEID .)
    FLOAT           reduce using rule 183 (typedef_name -> TYPEID .)
    DOUBLE          reduce using rule 183 (typedef_name -> TYPEID .)
    _COMPLEX        reduce using rule 183 (typedef_name -> TYPEID .)
    SIGNED          reduce using rule 183 (typedef_name -> TYPEID .)
    UNSIGNED        reduce using rule 183 (typedef_name -> TYPEID .)
    TYPEID          reduce using rule 183 (typedef_name -> TYPEID .)
    ENUM            reduce using rule 183 (typedef_name -> TYPEID .)
    STRUCT          reduce using rule 183 (typedef_name -> TYPEID .)
    UNION           reduce using rule 183 (typedef_name -> TYPEID .)
    TIMES           reduce using rule 183 (typedef_name -> TYPEID .)
    LPAREN          reduce using rule 183 (typedef_name -> TYPEID .)
    LBRACKET        reduce using rule 183 (typedef_name -> TYPEID .)
    RPAREN          reduce using rule 183 (typedef_name -> TYPEID .)
    AUTO            reduce using rule 183 (typedef_name -> TYPEID .)
    REGISTER        reduce using rule 183 (typedef_name -> TYPEID .)
    STATIC          reduce using rule 183 (typedef_name -> TYPEID .)
    EXTERN          reduce using rule 183 (typedef_name -> TYPEID .)
    TYPEDEF         reduce using rule 183 (typedef_name -> TYPEID .)
    INLINE          reduce using rule 183 (typedef_name -> TYPEID .)
    ID              reduce using rule 183 (typedef_name -> TYPEID .)
    EQUALS          reduce using rule 183 (typedef_name -> TYPEID .)
    SEMI            reduce using rule 183 (typedef_name -> TYPEID .)
    COMMA           reduce using rule 183 (typedef_name -> TYPEID .)
    COLON           reduce using rule 183 (typedef_name -> TYPEID .)


state 8

    (89) struct_or_union_specifier -> struct_or_union . ID
    (90) struct_or_union_specifier -> struct_or_union . TYPEID
    (91) struct_or_union_specifier -> struct_or_union . brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> struct_or_union . ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> struct_or_union . TYPEID brace_open struct_declaration_list brace_close
    (266) brace_open -> . LBRACE

    ID              shift and go to state 55
    TYPEID          shift and go to state 53
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 52

state 9

    (67) type_specifier -> SHORT .

    CONST           reduce using rule 67 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 67 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 67 (type_specifier -> SHORT .)
    VOID            reduce using rule 67 (type_specifier -> SHORT .)
    _BOOL           reduce using rule 67 (type_specifier -> SHORT .)
    CHAR            reduce using rule 67 (type_specifier -> SHORT .)
    SHORT           reduce using rule 67 (type_specifier -> SHORT .)
    INT             reduce using rule 67 (type_specifier -> SHORT .)
    LONG            reduce using rule 67 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 67 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 67 (type_specifier -> SHORT .)
    _COMPLEX        reduce using rule 67 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 67 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 67 (type_specifier -> SHORT .)
    TYPEID          reduce using rule 67 (type_specifier -> SHORT .)
    ENUM            reduce using rule 67 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 67 (type_specifier -> SHORT .)
    UNION           reduce using rule 67 (type_specifier -> SHORT .)
    TIMES           reduce using rule 67 (type_specifier -> SHORT .)
    LPAREN          reduce using rule 67 (type_specifier -> SHORT .)
    LBRACKET        reduce using rule 67 (type_specifier -> SHORT .)
    COLON           reduce using rule 67 (type_specifier -> SHORT .)
    ID              reduce using rule 67 (type_specifier -> SHORT .)
    SEMI            reduce using rule 67 (type_specifier -> SHORT .)
    RPAREN          reduce using rule 67 (type_specifier -> SHORT .)
    COMMA           reduce using rule 67 (type_specifier -> SHORT .)
    AUTO            reduce using rule 67 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 67 (type_specifier -> SHORT .)
    STATIC          reduce using rule 67 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 67 (type_specifier -> SHORT .)
    TYPEDEF         reduce using rule 67 (type_specifier -> SHORT .)
    INLINE          reduce using rule 67 (type_specifier -> SHORT .)
    EQUALS          reduce using rule 67 (type_specifier -> SHORT .)


state 10

    (120) direct_declarator -> LPAREN . declarator RPAREN
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 40
    LPAREN          shift and go to state 10
    TIMES           shift and go to state 17

    direct_declarator              shift and go to state 12
    declarator                     shift and go to state 56
    pointer                        shift and go to state 51

state 11

    (75) type_specifier -> typedef_name .

    CONST           reduce using rule 75 (type_specifier -> typedef_name .)
    RESTRICT        reduce using rule 75 (type_specifier -> typedef_name .)
    VOLATILE        reduce using rule 75 (type_specifier -> typedef_name .)
    VOID            reduce using rule 75 (type_specifier -> typedef_name .)
    _BOOL           reduce using rule 75 (type_specifier -> typedef_name .)
    CHAR            reduce using rule 75 (type_specifier -> typedef_name .)
    SHORT           reduce using rule 75 (type_specifier -> typedef_name .)
    INT             reduce using rule 75 (type_specifier -> typedef_name .)
    LONG            reduce using rule 75 (type_specifier -> typedef_name .)
    FLOAT           reduce using rule 75 (type_specifier -> typedef_name .)
    DOUBLE          reduce using rule 75 (type_specifier -> typedef_name .)
    _COMPLEX        reduce using rule 75 (type_specifier -> typedef_name .)
    SIGNED          reduce using rule 75 (type_specifier -> typedef_name .)
    UNSIGNED        reduce using rule 75 (type_specifier -> typedef_name .)
    TYPEID          reduce using rule 75 (type_specifier -> typedef_name .)
    ENUM            reduce using rule 75 (type_specifier -> typedef_name .)
    STRUCT          reduce using rule 75 (type_specifier -> typedef_name .)
    UNION           reduce using rule 75 (type_specifier -> typedef_name .)
    TIMES           reduce using rule 75 (type_specifier -> typedef_name .)
    LPAREN          reduce using rule 75 (type_specifier -> typedef_name .)
    LBRACKET        reduce using rule 75 (type_specifier -> typedef_name .)
    COLON           reduce using rule 75 (type_specifier -> typedef_name .)
    ID              reduce using rule 75 (type_specifier -> typedef_name .)
    SEMI            reduce using rule 75 (type_specifier -> typedef_name .)
    RPAREN          reduce using rule 75 (type_specifier -> typedef_name .)
    COMMA           reduce using rule 75 (type_specifier -> typedef_name .)
    AUTO            reduce using rule 75 (type_specifier -> typedef_name .)
    REGISTER        reduce using rule 75 (type_specifier -> typedef_name .)
    STATIC          reduce using rule 75 (type_specifier -> typedef_name .)
    EXTERN          reduce using rule 75 (type_specifier -> typedef_name .)
    TYPEDEF         reduce using rule 75 (type_specifier -> typedef_name .)
    INLINE          reduce using rule 75 (type_specifier -> typedef_name .)
    EQUALS          reduce using rule 75 (type_specifier -> typedef_name .)


state 12

    (116) declarator -> direct_declarator .
    (121) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 116 (declarator -> direct_declarator .)
    CONST           reduce using rule 116 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 116 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 116 (declarator -> direct_declarator .)
    VOID            reduce using rule 116 (declarator -> direct_declarator .)
    _BOOL           reduce using rule 116 (declarator -> direct_declarator .)
    CHAR            reduce using rule 116 (declarator -> direct_declarator .)
    SHORT           reduce using rule 116 (declarator -> direct_declarator .)
    INT             reduce using rule 116 (declarator -> direct_declarator .)
    LONG            reduce using rule 116 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 116 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 116 (declarator -> direct_declarator .)
    _COMPLEX        reduce using rule 116 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 116 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 116 (declarator -> direct_declarator .)
    AUTO            reduce using rule 116 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 116 (declarator -> direct_declarator .)
    STATIC          reduce using rule 116 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 116 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 116 (declarator -> direct_declarator .)
    INLINE          reduce using rule 116 (declarator -> direct_declarator .)
    TYPEID          reduce using rule 116 (declarator -> direct_declarator .)
    ENUM            reduce using rule 116 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 116 (declarator -> direct_declarator .)
    UNION           reduce using rule 116 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 116 (declarator -> direct_declarator .)
    COMMA           reduce using rule 116 (declarator -> direct_declarator .)
    SEMI            reduce using rule 116 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 116 (declarator -> direct_declarator .)
    COLON           reduce using rule 116 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 57
    LPAREN          shift and go to state 58


state 13

    (94) struct_or_union -> STRUCT .

    ID              reduce using rule 94 (struct_or_union -> STRUCT .)
    TYPEID          reduce using rule 94 (struct_or_union -> STRUCT .)
    LBRACE          reduce using rule 94 (struct_or_union -> STRUCT .)


state 14

    (57) declaration_specifiers -> function_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (268) empty -> .
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    ID              reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    EQUALS          reduce using rule 268 (empty -> .)
    LBRACKET        reduce using rule 268 (empty -> .)
    SEMI            reduce using rule 268 (empty -> .)
    COMMA           reduce using rule 268 (empty -> .)
    RPAREN          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 59
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    declaration_specifiers         shift and go to state 61
    enum_specifier                 shift and go to state 33
    declaration_specifiers_opt     shift and go to state 60
    struct_or_union                shift and go to state 8
    storage_class_specifier        shift and go to state 47
    struct_or_union_specifier      shift and go to state 36
    typedef_name                   shift and go to state 11
    function_specifier             shift and go to state 14

state 15

    (37) external_declaration -> SEMI .

    SEMI            reduce using rule 37 (external_declaration -> SEMI .)
    PPHASH          reduce using rule 37 (external_declaration -> SEMI .)
    PPPRAGMA        reduce using rule 37 (external_declaration -> SEMI .)
    ID              reduce using rule 37 (external_declaration -> SEMI .)
    LPAREN          reduce using rule 37 (external_declaration -> SEMI .)
    TIMES           reduce using rule 37 (external_declaration -> SEMI .)
    CONST           reduce using rule 37 (external_declaration -> SEMI .)
    RESTRICT        reduce using rule 37 (external_declaration -> SEMI .)
    VOLATILE        reduce using rule 37 (external_declaration -> SEMI .)
    VOID            reduce using rule 37 (external_declaration -> SEMI .)
    _BOOL           reduce using rule 37 (external_declaration -> SEMI .)
    CHAR            reduce using rule 37 (external_declaration -> SEMI .)
    SHORT           reduce using rule 37 (external_declaration -> SEMI .)
    INT             reduce using rule 37 (external_declaration -> SEMI .)
    LONG            reduce using rule 37 (external_declaration -> SEMI .)
    FLOAT           reduce using rule 37 (external_declaration -> SEMI .)
    DOUBLE          reduce using rule 37 (external_declaration -> SEMI .)
    _COMPLEX        reduce using rule 37 (external_declaration -> SEMI .)
    SIGNED          reduce using rule 37 (external_declaration -> SEMI .)
    UNSIGNED        reduce using rule 37 (external_declaration -> SEMI .)
    AUTO            reduce using rule 37 (external_declaration -> SEMI .)
    REGISTER        reduce using rule 37 (external_declaration -> SEMI .)
    STATIC          reduce using rule 37 (external_declaration -> SEMI .)
    EXTERN          reduce using rule 37 (external_declaration -> SEMI .)
    TYPEDEF         reduce using rule 37 (external_declaration -> SEMI .)
    INLINE          reduce using rule 37 (external_declaration -> SEMI .)
    TYPEID          reduce using rule 37 (external_declaration -> SEMI .)
    ENUM            reduce using rule 37 (external_declaration -> SEMI .)
    STRUCT          reduce using rule 37 (external_declaration -> SEMI .)
    UNION           reduce using rule 37 (external_declaration -> SEMI .)
    $end            reduce using rule 37 (external_declaration -> SEMI .)


state 16

    (33) external_declaration -> function_definition .

    SEMI            reduce using rule 33 (external_declaration -> function_definition .)
    PPHASH          reduce using rule 33 (external_declaration -> function_definition .)
    PPPRAGMA        reduce using rule 33 (external_declaration -> function_definition .)
    ID              reduce using rule 33 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 33 (external_declaration -> function_definition .)
    TIMES           reduce using rule 33 (external_declaration -> function_definition .)
    CONST           reduce using rule 33 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 33 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 33 (external_declaration -> function_definition .)
    VOID            reduce using rule 33 (external_declaration -> function_definition .)
    _BOOL           reduce using rule 33 (external_declaration -> function_definition .)
    CHAR            reduce using rule 33 (external_declaration -> function_definition .)
    SHORT           reduce using rule 33 (external_declaration -> function_definition .)
    INT             reduce using rule 33 (external_declaration -> function_definition .)
    LONG            reduce using rule 33 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 33 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 33 (external_declaration -> function_definition .)
    _COMPLEX        reduce using rule 33 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 33 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 33 (external_declaration -> function_definition .)
    AUTO            reduce using rule 33 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 33 (external_declaration -> function_definition .)
    STATIC          reduce using rule 33 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 33 (external_declaration -> function_definition .)
    TYPEDEF         reduce using rule 33 (external_declaration -> function_definition .)
    INLINE          reduce using rule 33 (external_declaration -> function_definition .)
    TYPEID          reduce using rule 33 (external_declaration -> function_definition .)
    ENUM            reduce using rule 33 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 33 (external_declaration -> function_definition .)
    UNION           reduce using rule 33 (external_declaration -> function_definition .)
    $end            reduce using rule 33 (external_declaration -> function_definition .)


state 17

    (127) pointer -> TIMES . type_qualifier_list_opt
    (128) pointer -> TIMES . type_qualifier_list_opt pointer
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (268) empty -> .
    (129) type_qualifier_list -> . type_qualifier
    (130) type_qualifier_list -> . type_qualifier_list type_qualifier
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE

    TIMES           reduce using rule 268 (empty -> .)
    TYPEID          reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    LBRACKET        reduce using rule 268 (empty -> .)
    COMMA           reduce using rule 268 (empty -> .)
    SEMI            reduce using rule 268 (empty -> .)
    RPAREN          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29

    empty                          shift and go to state 62
    type_qualifier                 shift and go to state 64
    type_qualifier_list_opt        shift and go to state 63
    type_qualifier_list            shift and go to state 65

state 18

    (0) S' -> translation_unit_or_empty .



state 19

    (39) pppragma_directive -> PPPRAGMA .
    (40) pppragma_directive -> PPPRAGMA . PPPRAGMASTR

    ID              reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    CASE            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    DEFAULT         reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    IF              reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    SWITCH          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    WHILE           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    DO              reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    FOR             reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    GOTO            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    BREAK           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    CONTINUE        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    RETURN          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    PPPRAGMA        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    LBRACE          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    CONST           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    RESTRICT        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    VOLATILE        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    VOID            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    _BOOL           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    CHAR            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    SHORT           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    INT             reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    LONG            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    FLOAT           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    DOUBLE          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    _COMPLEX        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    SIGNED          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    UNSIGNED        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    AUTO            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    REGISTER        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    STATIC          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    EXTERN          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    TYPEDEF         reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    INLINE          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    TYPEID          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    ENUM            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    STRUCT          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    UNION           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    PLUSPLUS        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    MINUSMINUS      reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    SIZEOF          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    LPAREN          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    AND             reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    TIMES           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    PLUS            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    MINUS           reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    NOT             reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    LNOT            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    OFFSETOF        reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_DEC   reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_OCT   reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_HEX   reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    INT_CONST_BIN   reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    FLOAT_CONST     reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    HEX_FLOAT_CONST reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    CHAR_CONST      reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    WCHAR_CONST     reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    STRING_LITERAL  reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    WSTRING_LITERAL reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    SEMI            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    RBRACE          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    ELSE            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    PPHASH          reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    $end            reduce using rule 39 (pppragma_directive -> PPPRAGMA .)
    PPPRAGMASTR     shift and go to state 66


state 20

    (38) pp_directive -> PPHASH .

    SEMI            reduce using rule 38 (pp_directive -> PPHASH .)
    PPHASH          reduce using rule 38 (pp_directive -> PPHASH .)
    PPPRAGMA        reduce using rule 38 (pp_directive -> PPHASH .)
    ID              reduce using rule 38 (pp_directive -> PPHASH .)
    LPAREN          reduce using rule 38 (pp_directive -> PPHASH .)
    TIMES           reduce using rule 38 (pp_directive -> PPHASH .)
    CONST           reduce using rule 38 (pp_directive -> PPHASH .)
    RESTRICT        reduce using rule 38 (pp_directive -> PPHASH .)
    VOLATILE        reduce using rule 38 (pp_directive -> PPHASH .)
    VOID            reduce using rule 38 (pp_directive -> PPHASH .)
    _BOOL           reduce using rule 38 (pp_directive -> PPHASH .)
    CHAR            reduce using rule 38 (pp_directive -> PPHASH .)
    SHORT           reduce using rule 38 (pp_directive -> PPHASH .)
    INT             reduce using rule 38 (pp_directive -> PPHASH .)
    LONG            reduce using rule 38 (pp_directive -> PPHASH .)
    FLOAT           reduce using rule 38 (pp_directive -> PPHASH .)
    DOUBLE          reduce using rule 38 (pp_directive -> PPHASH .)
    _COMPLEX        reduce using rule 38 (pp_directive -> PPHASH .)
    SIGNED          reduce using rule 38 (pp_directive -> PPHASH .)
    UNSIGNED        reduce using rule 38 (pp_directive -> PPHASH .)
    AUTO            reduce using rule 38 (pp_directive -> PPHASH .)
    REGISTER        reduce using rule 38 (pp_directive -> PPHASH .)
    STATIC          reduce using rule 38 (pp_directive -> PPHASH .)
    EXTERN          reduce using rule 38 (pp_directive -> PPHASH .)
    TYPEDEF         reduce using rule 38 (pp_directive -> PPHASH .)
    INLINE          reduce using rule 38 (pp_directive -> PPHASH .)
    TYPEID          reduce using rule 38 (pp_directive -> PPHASH .)
    ENUM            reduce using rule 38 (pp_directive -> PPHASH .)
    STRUCT          reduce using rule 38 (pp_directive -> PPHASH .)
    UNION           reduce using rule 38 (pp_directive -> PPHASH .)
    $end            reduce using rule 38 (pp_directive -> PPHASH .)


state 21

    (41) function_definition -> declarator . declaration_list_opt compound_statement
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (268) empty -> .
    (52) declaration_list -> . declaration
    (53) declaration_list -> . declaration_list declaration
    (51) declaration -> . decl_body SEMI
    (50) decl_body -> . declaration_specifiers init_declarator_list_opt
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    LBRACE          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 67
    declaration_list               shift and go to state 68
    declaration                    shift and go to state 69
    enum_specifier                 shift and go to state 33
    typedef_name                   shift and go to state 11
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    decl_body                      shift and go to state 28
    declaration_list_opt           shift and go to state 70
    function_specifier             shift and go to state 14
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    declaration_specifiers         shift and go to state 71
    storage_class_specifier        shift and go to state 47

state 22

    (106) enum_specifier -> ENUM . ID
    (107) enum_specifier -> ENUM . TYPEID
    (108) enum_specifier -> ENUM . brace_open enumerator_list brace_close
    (109) enum_specifier -> ENUM . ID brace_open enumerator_list brace_close
    (110) enum_specifier -> ENUM . TYPEID brace_open enumerator_list brace_close
    (266) brace_open -> . LBRACE

    ID              shift and go to state 73
    TYPEID          shift and go to state 74
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 72

state 23

    (59) storage_class_specifier -> REGISTER .

    CONST           reduce using rule 59 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 59 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 59 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 59 (storage_class_specifier -> REGISTER .)
    _BOOL           reduce using rule 59 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 59 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 59 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 59 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 59 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 59 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    _COMPLEX        reduce using rule 59 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 59 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 59 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 59 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    TYPEDEF         reduce using rule 59 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    TYPEID          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 59 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 59 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 59 (storage_class_specifier -> REGISTER .)
    LPAREN          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 59 (storage_class_specifier -> REGISTER .)
    EQUALS          reduce using rule 59 (storage_class_specifier -> REGISTER .)
    LBRACKET        reduce using rule 59 (storage_class_specifier -> REGISTER .)
    SEMI            reduce using rule 59 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 59 (storage_class_specifier -> REGISTER .)
    RPAREN          reduce using rule 59 (storage_class_specifier -> REGISTER .)


state 24

    (62) storage_class_specifier -> TYPEDEF .

    CONST           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    _BOOL           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    _COMPLEX        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    TYPEDEF         reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    TYPEID          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    LPAREN          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    EQUALS          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    LBRACKET        reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    SEMI            reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 62 (storage_class_specifier -> TYPEDEF .)
    RPAREN          reduce using rule 62 (storage_class_specifier -> TYPEDEF .)


state 25

    (79) type_qualifier -> RESTRICT .

    CONST           reduce using rule 79 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 79 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 79 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 79 (type_qualifier -> RESTRICT .)
    _BOOL           reduce using rule 79 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 79 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 79 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 79 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 79 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 79 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 79 (type_qualifier -> RESTRICT .)
    _COMPLEX        reduce using rule 79 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 79 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 79 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 79 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 79 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 79 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 79 (type_qualifier -> RESTRICT .)
    TYPEDEF         reduce using rule 79 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 79 (type_qualifier -> RESTRICT .)
    TYPEID          reduce using rule 79 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 79 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 79 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 79 (type_qualifier -> RESTRICT .)
    ID              reduce using rule 79 (type_qualifier -> RESTRICT .)
    LPAREN          reduce using rule 79 (type_qualifier -> RESTRICT .)
    TIMES           reduce using rule 79 (type_qualifier -> RESTRICT .)
    EQUALS          reduce using rule 79 (type_qualifier -> RESTRICT .)
    LBRACKET        reduce using rule 79 (type_qualifier -> RESTRICT .)
    SEMI            reduce using rule 79 (type_qualifier -> RESTRICT .)
    COMMA           reduce using rule 79 (type_qualifier -> RESTRICT .)
    RPAREN          reduce using rule 79 (type_qualifier -> RESTRICT .)
    PLUSPLUS        reduce using rule 79 (type_qualifier -> RESTRICT .)
    MINUSMINUS      reduce using rule 79 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 79 (type_qualifier -> RESTRICT .)
    AND             reduce using rule 79 (type_qualifier -> RESTRICT .)
    PLUS            reduce using rule 79 (type_qualifier -> RESTRICT .)
    MINUS           reduce using rule 79 (type_qualifier -> RESTRICT .)
    NOT             reduce using rule 79 (type_qualifier -> RESTRICT .)
    LNOT            reduce using rule 79 (type_qualifier -> RESTRICT .)
    OFFSETOF        reduce using rule 79 (type_qualifier -> RESTRICT .)
    INT_CONST_DEC   reduce using rule 79 (type_qualifier -> RESTRICT .)
    INT_CONST_OCT   reduce using rule 79 (type_qualifier -> RESTRICT .)
    INT_CONST_HEX   reduce using rule 79 (type_qualifier -> RESTRICT .)
    INT_CONST_BIN   reduce using rule 79 (type_qualifier -> RESTRICT .)
    FLOAT_CONST     reduce using rule 79 (type_qualifier -> RESTRICT .)
    HEX_FLOAT_CONST reduce using rule 79 (type_qualifier -> RESTRICT .)
    CHAR_CONST      reduce using rule 79 (type_qualifier -> RESTRICT .)
    WCHAR_CONST     reduce using rule 79 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 79 (type_qualifier -> RESTRICT .)
    WSTRING_LITERAL reduce using rule 79 (type_qualifier -> RESTRICT .)
    COLON           reduce using rule 79 (type_qualifier -> RESTRICT .)
    RBRACKET        reduce using rule 79 (type_qualifier -> RESTRICT .)


state 26

    (69) type_specifier -> LONG .

    CONST           reduce using rule 69 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 69 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 69 (type_specifier -> LONG .)
    VOID            reduce using rule 69 (type_specifier -> LONG .)
    _BOOL           reduce using rule 69 (type_specifier -> LONG .)
    CHAR            reduce using rule 69 (type_specifier -> LONG .)
    SHORT           reduce using rule 69 (type_specifier -> LONG .)
    INT             reduce using rule 69 (type_specifier -> LONG .)
    LONG            reduce using rule 69 (type_specifier -> LONG .)
    FLOAT           reduce using rule 69 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 69 (type_specifier -> LONG .)
    _COMPLEX        reduce using rule 69 (type_specifier -> LONG .)
    SIGNED          reduce using rule 69 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 69 (type_specifier -> LONG .)
    TYPEID          reduce using rule 69 (type_specifier -> LONG .)
    ENUM            reduce using rule 69 (type_specifier -> LONG .)
    STRUCT          reduce using rule 69 (type_specifier -> LONG .)
    UNION           reduce using rule 69 (type_specifier -> LONG .)
    TIMES           reduce using rule 69 (type_specifier -> LONG .)
    LPAREN          reduce using rule 69 (type_specifier -> LONG .)
    LBRACKET        reduce using rule 69 (type_specifier -> LONG .)
    COLON           reduce using rule 69 (type_specifier -> LONG .)
    ID              reduce using rule 69 (type_specifier -> LONG .)
    SEMI            reduce using rule 69 (type_specifier -> LONG .)
    RPAREN          reduce using rule 69 (type_specifier -> LONG .)
    COMMA           reduce using rule 69 (type_specifier -> LONG .)
    AUTO            reduce using rule 69 (type_specifier -> LONG .)
    REGISTER        reduce using rule 69 (type_specifier -> LONG .)
    STATIC          reduce using rule 69 (type_specifier -> LONG .)
    EXTERN          reduce using rule 69 (type_specifier -> LONG .)
    TYPEDEF         reduce using rule 69 (type_specifier -> LONG .)
    INLINE          reduce using rule 69 (type_specifier -> LONG .)
    EQUALS          reduce using rule 69 (type_specifier -> LONG .)


state 27

    (31) translation_unit -> external_declaration .

    SEMI            reduce using rule 31 (translation_unit -> external_declaration .)
    PPHASH          reduce using rule 31 (translation_unit -> external_declaration .)
    PPPRAGMA        reduce using rule 31 (translation_unit -> external_declaration .)
    ID              reduce using rule 31 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 31 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 31 (translation_unit -> external_declaration .)
    CONST           reduce using rule 31 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 31 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 31 (translation_unit -> external_declaration .)
    VOID            reduce using rule 31 (translation_unit -> external_declaration .)
    _BOOL           reduce using rule 31 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 31 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 31 (translation_unit -> external_declaration .)
    INT             reduce using rule 31 (translation_unit -> external_declaration .)
    LONG            reduce using rule 31 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 31 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 31 (translation_unit -> external_declaration .)
    _COMPLEX        reduce using rule 31 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 31 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 31 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 31 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 31 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 31 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 31 (translation_unit -> external_declaration .)
    TYPEDEF         reduce using rule 31 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 31 (translation_unit -> external_declaration .)
    TYPEID          reduce using rule 31 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 31 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 31 (translation_unit -> external_declaration .)
    UNION           reduce using rule 31 (translation_unit -> external_declaration .)
    $end            reduce using rule 31 (translation_unit -> external_declaration .)


state 28

    (51) declaration -> decl_body . SEMI

    SEMI            shift and go to state 75


state 29

    (80) type_qualifier -> VOLATILE .

    CONST           reduce using rule 80 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 80 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 80 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 80 (type_qualifier -> VOLATILE .)
    _BOOL           reduce using rule 80 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 80 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 80 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 80 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 80 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 80 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 80 (type_qualifier -> VOLATILE .)
    _COMPLEX        reduce using rule 80 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 80 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 80 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 80 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 80 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 80 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 80 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 80 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 80 (type_qualifier -> VOLATILE .)
    TYPEID          reduce using rule 80 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 80 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 80 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 80 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 80 (type_qualifier -> VOLATILE .)
    LPAREN          reduce using rule 80 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 80 (type_qualifier -> VOLATILE .)
    EQUALS          reduce using rule 80 (type_qualifier -> VOLATILE .)
    LBRACKET        reduce using rule 80 (type_qualifier -> VOLATILE .)
    SEMI            reduce using rule 80 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 80 (type_qualifier -> VOLATILE .)
    RPAREN          reduce using rule 80 (type_qualifier -> VOLATILE .)
    PLUSPLUS        reduce using rule 80 (type_qualifier -> VOLATILE .)
    MINUSMINUS      reduce using rule 80 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 80 (type_qualifier -> VOLATILE .)
    AND             reduce using rule 80 (type_qualifier -> VOLATILE .)
    PLUS            reduce using rule 80 (type_qualifier -> VOLATILE .)
    MINUS           reduce using rule 80 (type_qualifier -> VOLATILE .)
    NOT             reduce using rule 80 (type_qualifier -> VOLATILE .)
    LNOT            reduce using rule 80 (type_qualifier -> VOLATILE .)
    OFFSETOF        reduce using rule 80 (type_qualifier -> VOLATILE .)
    INT_CONST_DEC   reduce using rule 80 (type_qualifier -> VOLATILE .)
    INT_CONST_OCT   reduce using rule 80 (type_qualifier -> VOLATILE .)
    INT_CONST_HEX   reduce using rule 80 (type_qualifier -> VOLATILE .)
    INT_CONST_BIN   reduce using rule 80 (type_qualifier -> VOLATILE .)
    FLOAT_CONST     reduce using rule 80 (type_qualifier -> VOLATILE .)
    HEX_FLOAT_CONST reduce using rule 80 (type_qualifier -> VOLATILE .)
    CHAR_CONST      reduce using rule 80 (type_qualifier -> VOLATILE .)
    WCHAR_CONST     reduce using rule 80 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 80 (type_qualifier -> VOLATILE .)
    WSTRING_LITERAL reduce using rule 80 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 80 (type_qualifier -> VOLATILE .)
    RBRACKET        reduce using rule 80 (type_qualifier -> VOLATILE .)


state 30

    (64) type_specifier -> VOID .

    CONST           reduce using rule 64 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 64 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 64 (type_specifier -> VOID .)
    VOID            reduce using rule 64 (type_specifier -> VOID .)
    _BOOL           reduce using rule 64 (type_specifier -> VOID .)
    CHAR            reduce using rule 64 (type_specifier -> VOID .)
    SHORT           reduce using rule 64 (type_specifier -> VOID .)
    INT             reduce using rule 64 (type_specifier -> VOID .)
    LONG            reduce using rule 64 (type_specifier -> VOID .)
    FLOAT           reduce using rule 64 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 64 (type_specifier -> VOID .)
    _COMPLEX        reduce using rule 64 (type_specifier -> VOID .)
    SIGNED          reduce using rule 64 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 64 (type_specifier -> VOID .)
    TYPEID          reduce using rule 64 (type_specifier -> VOID .)
    ENUM            reduce using rule 64 (type_specifier -> VOID .)
    STRUCT          reduce using rule 64 (type_specifier -> VOID .)
    UNION           reduce using rule 64 (type_specifier -> VOID .)
    TIMES           reduce using rule 64 (type_specifier -> VOID .)
    LPAREN          reduce using rule 64 (type_specifier -> VOID .)
    LBRACKET        reduce using rule 64 (type_specifier -> VOID .)
    COLON           reduce using rule 64 (type_specifier -> VOID .)
    ID              reduce using rule 64 (type_specifier -> VOID .)
    SEMI            reduce using rule 64 (type_specifier -> VOID .)
    RPAREN          reduce using rule 64 (type_specifier -> VOID .)
    COMMA           reduce using rule 64 (type_specifier -> VOID .)
    AUTO            reduce using rule 64 (type_specifier -> VOID .)
    REGISTER        reduce using rule 64 (type_specifier -> VOID .)
    STATIC          reduce using rule 64 (type_specifier -> VOID .)
    EXTERN          reduce using rule 64 (type_specifier -> VOID .)
    TYPEDEF         reduce using rule 64 (type_specifier -> VOID .)
    INLINE          reduce using rule 64 (type_specifier -> VOID .)
    EQUALS          reduce using rule 64 (type_specifier -> VOID .)


state 31

    (54) declaration_specifiers -> type_qualifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (268) empty -> .
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    ID              reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    EQUALS          reduce using rule 268 (empty -> .)
    LBRACKET        reduce using rule 268 (empty -> .)
    SEMI            reduce using rule 268 (empty -> .)
    COMMA           reduce using rule 268 (empty -> .)
    RPAREN          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    declaration_specifiers_opt     shift and go to state 76
    type_specifier                 shift and go to state 41
    declaration_specifiers         shift and go to state 61
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 31
    typedef_name                   shift and go to state 11
    struct_or_union                shift and go to state 8
    storage_class_specifier        shift and go to state 47
    struct_or_union_specifier      shift and go to state 36
    empty                          shift and go to state 59
    function_specifier             shift and go to state 14

state 32

    (35) external_declaration -> pp_directive .

    SEMI            reduce using rule 35 (external_declaration -> pp_directive .)
    PPHASH          reduce using rule 35 (external_declaration -> pp_directive .)
    PPPRAGMA        reduce using rule 35 (external_declaration -> pp_directive .)
    ID              reduce using rule 35 (external_declaration -> pp_directive .)
    LPAREN          reduce using rule 35 (external_declaration -> pp_directive .)
    TIMES           reduce using rule 35 (external_declaration -> pp_directive .)
    CONST           reduce using rule 35 (external_declaration -> pp_directive .)
    RESTRICT        reduce using rule 35 (external_declaration -> pp_directive .)
    VOLATILE        reduce using rule 35 (external_declaration -> pp_directive .)
    VOID            reduce using rule 35 (external_declaration -> pp_directive .)
    _BOOL           reduce using rule 35 (external_declaration -> pp_directive .)
    CHAR            reduce using rule 35 (external_declaration -> pp_directive .)
    SHORT           reduce using rule 35 (external_declaration -> pp_directive .)
    INT             reduce using rule 35 (external_declaration -> pp_directive .)
    LONG            reduce using rule 35 (external_declaration -> pp_directive .)
    FLOAT           reduce using rule 35 (external_declaration -> pp_directive .)
    DOUBLE          reduce using rule 35 (external_declaration -> pp_directive .)
    _COMPLEX        reduce using rule 35 (external_declaration -> pp_directive .)
    SIGNED          reduce using rule 35 (external_declaration -> pp_directive .)
    UNSIGNED        reduce using rule 35 (external_declaration -> pp_directive .)
    AUTO            reduce using rule 35 (external_declaration -> pp_directive .)
    REGISTER        reduce using rule 35 (external_declaration -> pp_directive .)
    STATIC          reduce using rule 35 (external_declaration -> pp_directive .)
    EXTERN          reduce using rule 35 (external_declaration -> pp_directive .)
    TYPEDEF         reduce using rule 35 (external_declaration -> pp_directive .)
    INLINE          reduce using rule 35 (external_declaration -> pp_directive .)
    TYPEID          reduce using rule 35 (external_declaration -> pp_directive .)
    ENUM            reduce using rule 35 (external_declaration -> pp_directive .)
    STRUCT          reduce using rule 35 (external_declaration -> pp_directive .)
    UNION           reduce using rule 35 (external_declaration -> pp_directive .)
    $end            reduce using rule 35 (external_declaration -> pp_directive .)


state 33

    (76) type_specifier -> enum_specifier .

    CONST           reduce using rule 76 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 76 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 76 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 76 (type_specifier -> enum_specifier .)
    _BOOL           reduce using rule 76 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 76 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 76 (type_specifier -> enum_specifier .)
    INT             reduce using rule 76 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 76 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 76 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 76 (type_specifier -> enum_specifier .)
    _COMPLEX        reduce using rule 76 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 76 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 76 (type_specifier -> enum_specifier .)
    TYPEID          reduce using rule 76 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 76 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 76 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 76 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 76 (type_specifier -> enum_specifier .)
    LPAREN          reduce using rule 76 (type_specifier -> enum_specifier .)
    LBRACKET        reduce using rule 76 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 76 (type_specifier -> enum_specifier .)
    ID              reduce using rule 76 (type_specifier -> enum_specifier .)
    SEMI            reduce using rule 76 (type_specifier -> enum_specifier .)
    RPAREN          reduce using rule 76 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 76 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 76 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 76 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 76 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 76 (type_specifier -> enum_specifier .)
    TYPEDEF         reduce using rule 76 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 76 (type_specifier -> enum_specifier .)
    EQUALS          reduce using rule 76 (type_specifier -> enum_specifier .)


state 34

    (72) type_specifier -> _COMPLEX .

    CONST           reduce using rule 72 (type_specifier -> _COMPLEX .)
    RESTRICT        reduce using rule 72 (type_specifier -> _COMPLEX .)
    VOLATILE        reduce using rule 72 (type_specifier -> _COMPLEX .)
    VOID            reduce using rule 72 (type_specifier -> _COMPLEX .)
    _BOOL           reduce using rule 72 (type_specifier -> _COMPLEX .)
    CHAR            reduce using rule 72 (type_specifier -> _COMPLEX .)
    SHORT           reduce using rule 72 (type_specifier -> _COMPLEX .)
    INT             reduce using rule 72 (type_specifier -> _COMPLEX .)
    LONG            reduce using rule 72 (type_specifier -> _COMPLEX .)
    FLOAT           reduce using rule 72 (type_specifier -> _COMPLEX .)
    DOUBLE          reduce using rule 72 (type_specifier -> _COMPLEX .)
    _COMPLEX        reduce using rule 72 (type_specifier -> _COMPLEX .)
    SIGNED          reduce using rule 72 (type_specifier -> _COMPLEX .)
    UNSIGNED        reduce using rule 72 (type_specifier -> _COMPLEX .)
    TYPEID          reduce using rule 72 (type_specifier -> _COMPLEX .)
    ENUM            reduce using rule 72 (type_specifier -> _COMPLEX .)
    STRUCT          reduce using rule 72 (type_specifier -> _COMPLEX .)
    UNION           reduce using rule 72 (type_specifier -> _COMPLEX .)
    TIMES           reduce using rule 72 (type_specifier -> _COMPLEX .)
    LPAREN          reduce using rule 72 (type_specifier -> _COMPLEX .)
    LBRACKET        reduce using rule 72 (type_specifier -> _COMPLEX .)
    COLON           reduce using rule 72 (type_specifier -> _COMPLEX .)
    ID              reduce using rule 72 (type_specifier -> _COMPLEX .)
    SEMI            reduce using rule 72 (type_specifier -> _COMPLEX .)
    RPAREN          reduce using rule 72 (type_specifier -> _COMPLEX .)
    COMMA           reduce using rule 72 (type_specifier -> _COMPLEX .)
    AUTO            reduce using rule 72 (type_specifier -> _COMPLEX .)
    REGISTER        reduce using rule 72 (type_specifier -> _COMPLEX .)
    STATIC          reduce using rule 72 (type_specifier -> _COMPLEX .)
    EXTERN          reduce using rule 72 (type_specifier -> _COMPLEX .)
    TYPEDEF         reduce using rule 72 (type_specifier -> _COMPLEX .)
    INLINE          reduce using rule 72 (type_specifier -> _COMPLEX .)
    EQUALS          reduce using rule 72 (type_specifier -> _COMPLEX .)


state 35

    (66) type_specifier -> CHAR .

    CONST           reduce using rule 66 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 66 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 66 (type_specifier -> CHAR .)
    VOID            reduce using rule 66 (type_specifier -> CHAR .)
    _BOOL           reduce using rule 66 (type_specifier -> CHAR .)
    CHAR            reduce using rule 66 (type_specifier -> CHAR .)
    SHORT           reduce using rule 66 (type_specifier -> CHAR .)
    INT             reduce using rule 66 (type_specifier -> CHAR .)
    LONG            reduce using rule 66 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 66 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 66 (type_specifier -> CHAR .)
    _COMPLEX        reduce using rule 66 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 66 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 66 (type_specifier -> CHAR .)
    TYPEID          reduce using rule 66 (type_specifier -> CHAR .)
    ENUM            reduce using rule 66 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 66 (type_specifier -> CHAR .)
    UNION           reduce using rule 66 (type_specifier -> CHAR .)
    TIMES           reduce using rule 66 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 66 (type_specifier -> CHAR .)
    LBRACKET        reduce using rule 66 (type_specifier -> CHAR .)
    COLON           reduce using rule 66 (type_specifier -> CHAR .)
    ID              reduce using rule 66 (type_specifier -> CHAR .)
    SEMI            reduce using rule 66 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 66 (type_specifier -> CHAR .)
    COMMA           reduce using rule 66 (type_specifier -> CHAR .)
    AUTO            reduce using rule 66 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 66 (type_specifier -> CHAR .)
    STATIC          reduce using rule 66 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 66 (type_specifier -> CHAR .)
    TYPEDEF         reduce using rule 66 (type_specifier -> CHAR .)
    INLINE          reduce using rule 66 (type_specifier -> CHAR .)
    EQUALS          reduce using rule 66 (type_specifier -> CHAR .)


state 36

    (77) type_specifier -> struct_or_union_specifier .

    CONST           reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    _BOOL           reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    _COMPLEX        reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    TYPEID          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    LPAREN          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    LBRACKET        reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    SEMI            reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    RPAREN          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    TYPEDEF         reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)
    EQUALS          reduce using rule 77 (type_specifier -> struct_or_union_specifier .)


state 37

    (74) type_specifier -> UNSIGNED .

    CONST           reduce using rule 74 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 74 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 74 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 74 (type_specifier -> UNSIGNED .)
    _BOOL           reduce using rule 74 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 74 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 74 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 74 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 74 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 74 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 74 (type_specifier -> UNSIGNED .)
    _COMPLEX        reduce using rule 74 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 74 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 74 (type_specifier -> UNSIGNED .)
    TYPEID          reduce using rule 74 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 74 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 74 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 74 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 74 (type_specifier -> UNSIGNED .)
    LPAREN          reduce using rule 74 (type_specifier -> UNSIGNED .)
    LBRACKET        reduce using rule 74 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 74 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 74 (type_specifier -> UNSIGNED .)
    SEMI            reduce using rule 74 (type_specifier -> UNSIGNED .)
    RPAREN          reduce using rule 74 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 74 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 74 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 74 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 74 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 74 (type_specifier -> UNSIGNED .)
    TYPEDEF         reduce using rule 74 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 74 (type_specifier -> UNSIGNED .)
    EQUALS          reduce using rule 74 (type_specifier -> UNSIGNED .)


state 38

    (36) external_declaration -> pppragma_directive .

    SEMI            reduce using rule 36 (external_declaration -> pppragma_directive .)
    PPHASH          reduce using rule 36 (external_declaration -> pppragma_directive .)
    PPPRAGMA        reduce using rule 36 (external_declaration -> pppragma_directive .)
    ID              reduce using rule 36 (external_declaration -> pppragma_directive .)
    LPAREN          reduce using rule 36 (external_declaration -> pppragma_directive .)
    TIMES           reduce using rule 36 (external_declaration -> pppragma_directive .)
    CONST           reduce using rule 36 (external_declaration -> pppragma_directive .)
    RESTRICT        reduce using rule 36 (external_declaration -> pppragma_directive .)
    VOLATILE        reduce using rule 36 (external_declaration -> pppragma_directive .)
    VOID            reduce using rule 36 (external_declaration -> pppragma_directive .)
    _BOOL           reduce using rule 36 (external_declaration -> pppragma_directive .)
    CHAR            reduce using rule 36 (external_declaration -> pppragma_directive .)
    SHORT           reduce using rule 36 (external_declaration -> pppragma_directive .)
    INT             reduce using rule 36 (external_declaration -> pppragma_directive .)
    LONG            reduce using rule 36 (external_declaration -> pppragma_directive .)
    FLOAT           reduce using rule 36 (external_declaration -> pppragma_directive .)
    DOUBLE          reduce using rule 36 (external_declaration -> pppragma_directive .)
    _COMPLEX        reduce using rule 36 (external_declaration -> pppragma_directive .)
    SIGNED          reduce using rule 36 (external_declaration -> pppragma_directive .)
    UNSIGNED        reduce using rule 36 (external_declaration -> pppragma_directive .)
    AUTO            reduce using rule 36 (external_declaration -> pppragma_directive .)
    REGISTER        reduce using rule 36 (external_declaration -> pppragma_directive .)
    STATIC          reduce using rule 36 (external_declaration -> pppragma_directive .)
    EXTERN          reduce using rule 36 (external_declaration -> pppragma_directive .)
    TYPEDEF         reduce using rule 36 (external_declaration -> pppragma_directive .)
    INLINE          reduce using rule 36 (external_declaration -> pppragma_directive .)
    TYPEID          reduce using rule 36 (external_declaration -> pppragma_directive .)
    ENUM            reduce using rule 36 (external_declaration -> pppragma_directive .)
    STRUCT          reduce using rule 36 (external_declaration -> pppragma_directive .)
    UNION           reduce using rule 36 (external_declaration -> pppragma_directive .)
    $end            reduce using rule 36 (external_declaration -> pppragma_directive .)


state 39

    (78) type_qualifier -> CONST .

    CONST           reduce using rule 78 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 78 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 78 (type_qualifier -> CONST .)
    VOID            reduce using rule 78 (type_qualifier -> CONST .)
    _BOOL           reduce using rule 78 (type_qualifier -> CONST .)
    CHAR            reduce using rule 78 (type_qualifier -> CONST .)
    SHORT           reduce using rule 78 (type_qualifier -> CONST .)
    INT             reduce using rule 78 (type_qualifier -> CONST .)
    LONG            reduce using rule 78 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 78 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 78 (type_qualifier -> CONST .)
    _COMPLEX        reduce using rule 78 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 78 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 78 (type_qualifier -> CONST .)
    AUTO            reduce using rule 78 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 78 (type_qualifier -> CONST .)
    STATIC          reduce using rule 78 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 78 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 78 (type_qualifier -> CONST .)
    INLINE          reduce using rule 78 (type_qualifier -> CONST .)
    TYPEID          reduce using rule 78 (type_qualifier -> CONST .)
    ENUM            reduce using rule 78 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 78 (type_qualifier -> CONST .)
    UNION           reduce using rule 78 (type_qualifier -> CONST .)
    ID              reduce using rule 78 (type_qualifier -> CONST .)
    LPAREN          reduce using rule 78 (type_qualifier -> CONST .)
    TIMES           reduce using rule 78 (type_qualifier -> CONST .)
    EQUALS          reduce using rule 78 (type_qualifier -> CONST .)
    LBRACKET        reduce using rule 78 (type_qualifier -> CONST .)
    SEMI            reduce using rule 78 (type_qualifier -> CONST .)
    COMMA           reduce using rule 78 (type_qualifier -> CONST .)
    RPAREN          reduce using rule 78 (type_qualifier -> CONST .)
    PLUSPLUS        reduce using rule 78 (type_qualifier -> CONST .)
    MINUSMINUS      reduce using rule 78 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 78 (type_qualifier -> CONST .)
    AND             reduce using rule 78 (type_qualifier -> CONST .)
    PLUS            reduce using rule 78 (type_qualifier -> CONST .)
    MINUS           reduce using rule 78 (type_qualifier -> CONST .)
    NOT             reduce using rule 78 (type_qualifier -> CONST .)
    LNOT            reduce using rule 78 (type_qualifier -> CONST .)
    OFFSETOF        reduce using rule 78 (type_qualifier -> CONST .)
    INT_CONST_DEC   reduce using rule 78 (type_qualifier -> CONST .)
    INT_CONST_OCT   reduce using rule 78 (type_qualifier -> CONST .)
    INT_CONST_HEX   reduce using rule 78 (type_qualifier -> CONST .)
    INT_CONST_BIN   reduce using rule 78 (type_qualifier -> CONST .)
    FLOAT_CONST     reduce using rule 78 (type_qualifier -> CONST .)
    HEX_FLOAT_CONST reduce using rule 78 (type_qualifier -> CONST .)
    CHAR_CONST      reduce using rule 78 (type_qualifier -> CONST .)
    WCHAR_CONST     reduce using rule 78 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 78 (type_qualifier -> CONST .)
    WSTRING_LITERAL reduce using rule 78 (type_qualifier -> CONST .)
    COLON           reduce using rule 78 (type_qualifier -> CONST .)
    RBRACKET        reduce using rule 78 (type_qualifier -> CONST .)


state 40

    (119) direct_declarator -> ID .

    LBRACKET        reduce using rule 119 (direct_declarator -> ID .)
    LPAREN          reduce using rule 119 (direct_declarator -> ID .)
    RPAREN          reduce using rule 119 (direct_declarator -> ID .)
    EQUALS          reduce using rule 119 (direct_declarator -> ID .)
    CONST           reduce using rule 119 (direct_declarator -> ID .)
    RESTRICT        reduce using rule 119 (direct_declarator -> ID .)
    VOLATILE        reduce using rule 119 (direct_declarator -> ID .)
    VOID            reduce using rule 119 (direct_declarator -> ID .)
    _BOOL           reduce using rule 119 (direct_declarator -> ID .)
    CHAR            reduce using rule 119 (direct_declarator -> ID .)
    SHORT           reduce using rule 119 (direct_declarator -> ID .)
    INT             reduce using rule 119 (direct_declarator -> ID .)
    LONG            reduce using rule 119 (direct_declarator -> ID .)
    FLOAT           reduce using rule 119 (direct_declarator -> ID .)
    DOUBLE          reduce using rule 119 (direct_declarator -> ID .)
    _COMPLEX        reduce using rule 119 (direct_declarator -> ID .)
    SIGNED          reduce using rule 119 (direct_declarator -> ID .)
    UNSIGNED        reduce using rule 119 (direct_declarator -> ID .)
    AUTO            reduce using rule 119 (direct_declarator -> ID .)
    REGISTER        reduce using rule 119 (direct_declarator -> ID .)
    STATIC          reduce using rule 119 (direct_declarator -> ID .)
    EXTERN          reduce using rule 119 (direct_declarator -> ID .)
    TYPEDEF         reduce using rule 119 (direct_declarator -> ID .)
    INLINE          reduce using rule 119 (direct_declarator -> ID .)
    TYPEID          reduce using rule 119 (direct_declarator -> ID .)
    ENUM            reduce using rule 119 (direct_declarator -> ID .)
    STRUCT          reduce using rule 119 (direct_declarator -> ID .)
    UNION           reduce using rule 119 (direct_declarator -> ID .)
    LBRACE          reduce using rule 119 (direct_declarator -> ID .)
    COMMA           reduce using rule 119 (direct_declarator -> ID .)
    SEMI            reduce using rule 119 (direct_declarator -> ID .)
    COLON           reduce using rule 119 (direct_declarator -> ID .)


state 41

    (55) declaration_specifiers -> type_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (268) empty -> .
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    ID              reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    EQUALS          reduce using rule 268 (empty -> .)
    LBRACKET        reduce using rule 268 (empty -> .)
    SEMI            reduce using rule 268 (empty -> .)
    COMMA           reduce using rule 268 (empty -> .)
    RPAREN          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    type_qualifier                 shift and go to state 31
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 61
    enum_specifier                 shift and go to state 33
    declaration_specifiers_opt     shift and go to state 77
    type_specifier                 shift and go to state 41
    struct_or_union                shift and go to state 8
    storage_class_specifier        shift and go to state 47
    struct_or_union_specifier      shift and go to state 36
    empty                          shift and go to state 59
    function_specifier             shift and go to state 14

state 42

    (42) function_definition -> declaration_specifiers . declarator declaration_list_opt compound_statement
    (50) decl_body -> declaration_specifiers . init_declarator_list_opt
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (17) init_declarator_list_opt -> . empty
    (18) init_declarator_list_opt -> . init_declarator_list
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (268) empty -> .
    (81) init_declarator_list -> . init_declarator
    (82) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (83) init_declarator_list -> . EQUALS initializer
    (84) init_declarator_list -> . abstract_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (150) abstract_declarator -> . pointer
    (151) abstract_declarator -> . pointer direct_abstract_declarator
    (152) abstract_declarator -> . direct_abstract_declarator
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    ID              shift and go to state 40
    LPAREN          shift and go to state 81
    TIMES           shift and go to state 17
    SEMI            reduce using rule 268 (empty -> .)
    EQUALS          shift and go to state 87
    LBRACKET        shift and go to state 85

    empty                          shift and go to state 78
    init_declarator_list_opt       shift and go to state 83
    direct_abstract_declarator     shift and go to state 79
    abstract_declarator            shift and go to state 84
    declarator                     shift and go to state 86
    init_declarator                shift and go to state 80
    direct_declarator              shift and go to state 12
    init_declarator_list           shift and go to state 82
    pointer                        shift and go to state 88

state 43

    (73) type_specifier -> SIGNED .

    CONST           reduce using rule 73 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 73 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 73 (type_specifier -> SIGNED .)
    VOID            reduce using rule 73 (type_specifier -> SIGNED .)
    _BOOL           reduce using rule 73 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 73 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 73 (type_specifier -> SIGNED .)
    INT             reduce using rule 73 (type_specifier -> SIGNED .)
    LONG            reduce using rule 73 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 73 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 73 (type_specifier -> SIGNED .)
    _COMPLEX        reduce using rule 73 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 73 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 73 (type_specifier -> SIGNED .)
    TYPEID          reduce using rule 73 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 73 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 73 (type_specifier -> SIGNED .)
    UNION           reduce using rule 73 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 73 (type_specifier -> SIGNED .)
    LPAREN          reduce using rule 73 (type_specifier -> SIGNED .)
    LBRACKET        reduce using rule 73 (type_specifier -> SIGNED .)
    COLON           reduce using rule 73 (type_specifier -> SIGNED .)
    ID              reduce using rule 73 (type_specifier -> SIGNED .)
    SEMI            reduce using rule 73 (type_specifier -> SIGNED .)
    RPAREN          reduce using rule 73 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 73 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 73 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 73 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 73 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 73 (type_specifier -> SIGNED .)
    TYPEDEF         reduce using rule 73 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 73 (type_specifier -> SIGNED .)
    EQUALS          reduce using rule 73 (type_specifier -> SIGNED .)


state 44

    (29) translation_unit_or_empty -> translation_unit .
    (32) translation_unit -> translation_unit . external_declaration
    (33) external_declaration -> . function_definition
    (34) external_declaration -> . declaration
    (35) external_declaration -> . pp_directive
    (36) external_declaration -> . pppragma_directive
    (37) external_declaration -> . SEMI
    (41) function_definition -> . declarator declaration_list_opt compound_statement
    (42) function_definition -> . declaration_specifiers declarator declaration_list_opt compound_statement
    (51) declaration -> . decl_body SEMI
    (38) pp_directive -> . PPHASH
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (50) decl_body -> . declaration_specifiers init_declarator_list_opt
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    $end            reduce using rule 29 (translation_unit_or_empty -> translation_unit .)
    SEMI            shift and go to state 15
    PPHASH          shift and go to state 20
    PPPRAGMA        shift and go to state 19
    ID              shift and go to state 40
    LPAREN          shift and go to state 10
    TIMES           shift and go to state 17
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    pppragma_directive             shift and go to state 38
    decl_body                      shift and go to state 28
    declaration                    shift and go to state 2
    enum_specifier                 shift and go to state 33
    type_specifier                 shift and go to state 41
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    typedef_name                   shift and go to state 11
    direct_declarator              shift and go to state 12
    function_specifier             shift and go to state 14
    type_qualifier                 shift and go to state 31
    function_definition            shift and go to state 16
    pp_directive                   shift and go to state 32
    declaration_specifiers         shift and go to state 42
    declarator                     shift and go to state 21
    storage_class_specifier        shift and go to state 47
    pointer                        shift and go to state 51
    external_declaration           shift and go to state 89

state 45

    (58) storage_class_specifier -> AUTO .

    CONST           reduce using rule 58 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 58 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 58 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 58 (storage_class_specifier -> AUTO .)
    _BOOL           reduce using rule 58 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 58 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 58 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 58 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 58 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 58 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 58 (storage_class_specifier -> AUTO .)
    _COMPLEX        reduce using rule 58 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 58 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 58 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 58 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 58 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 58 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 58 (storage_class_specifier -> AUTO .)
    TYPEDEF         reduce using rule 58 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 58 (storage_class_specifier -> AUTO .)
    TYPEID          reduce using rule 58 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 58 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 58 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 58 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 58 (storage_class_specifier -> AUTO .)
    LPAREN          reduce using rule 58 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 58 (storage_class_specifier -> AUTO .)
    EQUALS          reduce using rule 58 (storage_class_specifier -> AUTO .)
    LBRACKET        reduce using rule 58 (storage_class_specifier -> AUTO .)
    SEMI            reduce using rule 58 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 58 (storage_class_specifier -> AUTO .)
    RPAREN          reduce using rule 58 (storage_class_specifier -> AUTO .)


state 46

    (95) struct_or_union -> UNION .

    ID              reduce using rule 95 (struct_or_union -> UNION .)
    TYPEID          reduce using rule 95 (struct_or_union -> UNION .)
    LBRACE          reduce using rule 95 (struct_or_union -> UNION .)


state 47

    (56) declaration_specifiers -> storage_class_specifier . declaration_specifiers_opt
    (9) declaration_specifiers_opt -> . empty
    (10) declaration_specifiers_opt -> . declaration_specifiers
    (268) empty -> .
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    ID              reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    EQUALS          reduce using rule 268 (empty -> .)
    LBRACKET        reduce using rule 268 (empty -> .)
    SEMI            reduce using rule 268 (empty -> .)
    COMMA           reduce using rule 268 (empty -> .)
    RPAREN          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 59
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    declaration_specifiers         shift and go to state 61
    enum_specifier                 shift and go to state 33
    declaration_specifiers_opt     shift and go to state 90
    struct_or_union                shift and go to state 8
    storage_class_specifier        shift and go to state 47
    struct_or_union_specifier      shift and go to state 36
    typedef_name                   shift and go to state 11
    function_specifier             shift and go to state 14

state 48

    (61) storage_class_specifier -> EXTERN .

    CONST           reduce using rule 61 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 61 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 61 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 61 (storage_class_specifier -> EXTERN .)
    _BOOL           reduce using rule 61 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 61 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 61 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 61 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 61 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 61 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    _COMPLEX        reduce using rule 61 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 61 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 61 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 61 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    TYPEDEF         reduce using rule 61 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    TYPEID          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 61 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 61 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 61 (storage_class_specifier -> EXTERN .)
    LPAREN          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 61 (storage_class_specifier -> EXTERN .)
    EQUALS          reduce using rule 61 (storage_class_specifier -> EXTERN .)
    LBRACKET        reduce using rule 61 (storage_class_specifier -> EXTERN .)
    SEMI            reduce using rule 61 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 61 (storage_class_specifier -> EXTERN .)
    RPAREN          reduce using rule 61 (storage_class_specifier -> EXTERN .)


state 49

    (68) type_specifier -> INT .

    CONST           reduce using rule 68 (type_specifier -> INT .)
    RESTRICT        reduce using rule 68 (type_specifier -> INT .)
    VOLATILE        reduce using rule 68 (type_specifier -> INT .)
    VOID            reduce using rule 68 (type_specifier -> INT .)
    _BOOL           reduce using rule 68 (type_specifier -> INT .)
    CHAR            reduce using rule 68 (type_specifier -> INT .)
    SHORT           reduce using rule 68 (type_specifier -> INT .)
    INT             reduce using rule 68 (type_specifier -> INT .)
    LONG            reduce using rule 68 (type_specifier -> INT .)
    FLOAT           reduce using rule 68 (type_specifier -> INT .)
    DOUBLE          reduce using rule 68 (type_specifier -> INT .)
    _COMPLEX        reduce using rule 68 (type_specifier -> INT .)
    SIGNED          reduce using rule 68 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 68 (type_specifier -> INT .)
    TYPEID          reduce using rule 68 (type_specifier -> INT .)
    ENUM            reduce using rule 68 (type_specifier -> INT .)
    STRUCT          reduce using rule 68 (type_specifier -> INT .)
    UNION           reduce using rule 68 (type_specifier -> INT .)
    TIMES           reduce using rule 68 (type_specifier -> INT .)
    LPAREN          reduce using rule 68 (type_specifier -> INT .)
    LBRACKET        reduce using rule 68 (type_specifier -> INT .)
    COLON           reduce using rule 68 (type_specifier -> INT .)
    ID              reduce using rule 68 (type_specifier -> INT .)
    SEMI            reduce using rule 68 (type_specifier -> INT .)
    RPAREN          reduce using rule 68 (type_specifier -> INT .)
    COMMA           reduce using rule 68 (type_specifier -> INT .)
    AUTO            reduce using rule 68 (type_specifier -> INT .)
    REGISTER        reduce using rule 68 (type_specifier -> INT .)
    STATIC          reduce using rule 68 (type_specifier -> INT .)
    EXTERN          reduce using rule 68 (type_specifier -> INT .)
    TYPEDEF         reduce using rule 68 (type_specifier -> INT .)
    INLINE          reduce using rule 68 (type_specifier -> INT .)
    EQUALS          reduce using rule 68 (type_specifier -> INT .)


state 50

    (60) storage_class_specifier -> STATIC .

    CONST           reduce using rule 60 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 60 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 60 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 60 (storage_class_specifier -> STATIC .)
    _BOOL           reduce using rule 60 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 60 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 60 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 60 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 60 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 60 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 60 (storage_class_specifier -> STATIC .)
    _COMPLEX        reduce using rule 60 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 60 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 60 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 60 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 60 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 60 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 60 (storage_class_specifier -> STATIC .)
    TYPEDEF         reduce using rule 60 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 60 (storage_class_specifier -> STATIC .)
    TYPEID          reduce using rule 60 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 60 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 60 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 60 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 60 (storage_class_specifier -> STATIC .)
    LPAREN          reduce using rule 60 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 60 (storage_class_specifier -> STATIC .)
    EQUALS          reduce using rule 60 (storage_class_specifier -> STATIC .)
    LBRACKET        reduce using rule 60 (storage_class_specifier -> STATIC .)
    SEMI            reduce using rule 60 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 60 (storage_class_specifier -> STATIC .)
    RPAREN          reduce using rule 60 (storage_class_specifier -> STATIC .)


state 51

    (117) declarator -> pointer . direct_declarator
    (118) declarator -> pointer . TYPEID
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    TYPEID          shift and go to state 91
    ID              shift and go to state 40
    LPAREN          shift and go to state 10

    direct_declarator              shift and go to state 92

state 52

    (91) struct_or_union_specifier -> struct_or_union brace_open . struct_declaration_list brace_close
    (96) struct_declaration_list -> . struct_declaration
    (97) struct_declaration_list -> . struct_declaration_list struct_declaration
    (98) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (99) struct_declaration -> . specifier_qualifier_list abstract_declarator SEMI
    (100) struct_declaration -> . SEMI
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    SEMI            shift and go to state 93
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    struct_declaration             shift and go to state 94
    type_qualifier                 shift and go to state 95
    type_specifier                 shift and go to state 96
    enum_specifier                 shift and go to state 33
    struct_declaration_list        shift and go to state 97
    struct_or_union                shift and go to state 8
    typedef_name                   shift and go to state 11
    struct_or_union_specifier      shift and go to state 36
    specifier_qualifier_list       shift and go to state 98

state 53

    (90) struct_or_union_specifier -> struct_or_union TYPEID .
    (93) struct_or_union_specifier -> struct_or_union TYPEID . brace_open struct_declaration_list brace_close
    (266) brace_open -> . LBRACE

    CONST           reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RESTRICT        reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOLATILE        reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    VOID            reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _BOOL           reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    CHAR            reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SHORT           reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INT             reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LONG            reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    FLOAT           reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    DOUBLE          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    _COMPLEX        reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SIGNED          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNSIGNED        reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    AUTO            reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    REGISTER        reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STATIC          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    EXTERN          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEDEF         reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    INLINE          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TYPEID          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ENUM            reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    STRUCT          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    UNION           reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    EQUALS          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    TIMES           reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LPAREN          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACKET        reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    ID              reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    SEMI            reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    RPAREN          reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COLON           reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    COMMA           reduce using rule 90 (struct_or_union_specifier -> struct_or_union TYPEID .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 99

state 54

    (266) brace_open -> LBRACE .

    ID              reduce using rule 266 (brace_open -> LBRACE .)
    CASE            reduce using rule 266 (brace_open -> LBRACE .)
    DEFAULT         reduce using rule 266 (brace_open -> LBRACE .)
    IF              reduce using rule 266 (brace_open -> LBRACE .)
    SWITCH          reduce using rule 266 (brace_open -> LBRACE .)
    WHILE           reduce using rule 266 (brace_open -> LBRACE .)
    DO              reduce using rule 266 (brace_open -> LBRACE .)
    FOR             reduce using rule 266 (brace_open -> LBRACE .)
    GOTO            reduce using rule 266 (brace_open -> LBRACE .)
    BREAK           reduce using rule 266 (brace_open -> LBRACE .)
    CONTINUE        reduce using rule 266 (brace_open -> LBRACE .)
    RETURN          reduce using rule 266 (brace_open -> LBRACE .)
    PPPRAGMA        reduce using rule 266 (brace_open -> LBRACE .)
    LBRACE          reduce using rule 266 (brace_open -> LBRACE .)
    CONST           reduce using rule 266 (brace_open -> LBRACE .)
    RESTRICT        reduce using rule 266 (brace_open -> LBRACE .)
    VOLATILE        reduce using rule 266 (brace_open -> LBRACE .)
    VOID            reduce using rule 266 (brace_open -> LBRACE .)
    _BOOL           reduce using rule 266 (brace_open -> LBRACE .)
    CHAR            reduce using rule 266 (brace_open -> LBRACE .)
    SHORT           reduce using rule 266 (brace_open -> LBRACE .)
    INT             reduce using rule 266 (brace_open -> LBRACE .)
    LONG            reduce using rule 266 (brace_open -> LBRACE .)
    FLOAT           reduce using rule 266 (brace_open -> LBRACE .)
    DOUBLE          reduce using rule 266 (brace_open -> LBRACE .)
    _COMPLEX        reduce using rule 266 (brace_open -> LBRACE .)
    SIGNED          reduce using rule 266 (brace_open -> LBRACE .)
    UNSIGNED        reduce using rule 266 (brace_open -> LBRACE .)
    AUTO            reduce using rule 266 (brace_open -> LBRACE .)
    REGISTER        reduce using rule 266 (brace_open -> LBRACE .)
    STATIC          reduce using rule 266 (brace_open -> LBRACE .)
    EXTERN          reduce using rule 266 (brace_open -> LBRACE .)
    TYPEDEF         reduce using rule 266 (brace_open -> LBRACE .)
    INLINE          reduce using rule 266 (brace_open -> LBRACE .)
    TYPEID          reduce using rule 266 (brace_open -> LBRACE .)
    ENUM            reduce using rule 266 (brace_open -> LBRACE .)
    STRUCT          reduce using rule 266 (brace_open -> LBRACE .)
    UNION           reduce using rule 266 (brace_open -> LBRACE .)
    PLUSPLUS        reduce using rule 266 (brace_open -> LBRACE .)
    MINUSMINUS      reduce using rule 266 (brace_open -> LBRACE .)
    SIZEOF          reduce using rule 266 (brace_open -> LBRACE .)
    LPAREN          reduce using rule 266 (brace_open -> LBRACE .)
    AND             reduce using rule 266 (brace_open -> LBRACE .)
    TIMES           reduce using rule 266 (brace_open -> LBRACE .)
    PLUS            reduce using rule 266 (brace_open -> LBRACE .)
    MINUS           reduce using rule 266 (brace_open -> LBRACE .)
    NOT             reduce using rule 266 (brace_open -> LBRACE .)
    LNOT            reduce using rule 266 (brace_open -> LBRACE .)
    OFFSETOF        reduce using rule 266 (brace_open -> LBRACE .)
    INT_CONST_DEC   reduce using rule 266 (brace_open -> LBRACE .)
    INT_CONST_OCT   reduce using rule 266 (brace_open -> LBRACE .)
    INT_CONST_HEX   reduce using rule 266 (brace_open -> LBRACE .)
    INT_CONST_BIN   reduce using rule 266 (brace_open -> LBRACE .)
    FLOAT_CONST     reduce using rule 266 (brace_open -> LBRACE .)
    HEX_FLOAT_CONST reduce using rule 266 (brace_open -> LBRACE .)
    CHAR_CONST      reduce using rule 266 (brace_open -> LBRACE .)
    WCHAR_CONST     reduce using rule 266 (brace_open -> LBRACE .)
    STRING_LITERAL  reduce using rule 266 (brace_open -> LBRACE .)
    WSTRING_LITERAL reduce using rule 266 (brace_open -> LBRACE .)
    RBRACE          reduce using rule 266 (brace_open -> LBRACE .)
    SEMI            reduce using rule 266 (brace_open -> LBRACE .)
    LBRACKET        reduce using rule 266 (brace_open -> LBRACE .)
    PERIOD          reduce using rule 266 (brace_open -> LBRACE .)


state 55

    (89) struct_or_union_specifier -> struct_or_union ID .
    (92) struct_or_union_specifier -> struct_or_union ID . brace_open struct_declaration_list brace_close
    (266) brace_open -> . LBRACE

    CONST           reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    RESTRICT        reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    VOLATILE        reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    VOID            reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    _BOOL           reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    CHAR            reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    SHORT           reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    INT             reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    LONG            reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    FLOAT           reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    DOUBLE          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    _COMPLEX        reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    SIGNED          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    UNSIGNED        reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    AUTO            reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    REGISTER        reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    STATIC          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    EXTERN          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEDEF         reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    INLINE          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    TYPEID          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    ENUM            reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    STRUCT          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    UNION           reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    EQUALS          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    TIMES           reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    LPAREN          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACKET        reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    ID              reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    SEMI            reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    RPAREN          reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    COLON           reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    COMMA           reduce using rule 89 (struct_or_union_specifier -> struct_or_union ID .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 100

state 56

    (120) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 101


state 57

    (121) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> direct_declarator LBRACKET . STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> direct_declarator LBRACKET . type_qualifier_list_opt TIMES RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (129) type_qualifier_list -> . type_qualifier
    (130) type_qualifier_list -> . type_qualifier_list type_qualifier
    (268) empty -> .
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 103
    TIMES           reduce using rule 268 (empty -> .)
    PLUSPLUS        reduce using rule 268 (empty -> .)
    MINUSMINUS      reduce using rule 268 (empty -> .)
    SIZEOF          reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    AND             reduce using rule 268 (empty -> .)
    PLUS            reduce using rule 268 (empty -> .)
    MINUS           reduce using rule 268 (empty -> .)
    NOT             reduce using rule 268 (empty -> .)
    LNOT            reduce using rule 268 (empty -> .)
    OFFSETOF        reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    INT_CONST_DEC   reduce using rule 268 (empty -> .)
    INT_CONST_OCT   reduce using rule 268 (empty -> .)
    INT_CONST_HEX   reduce using rule 268 (empty -> .)
    INT_CONST_BIN   reduce using rule 268 (empty -> .)
    FLOAT_CONST     reduce using rule 268 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 268 (empty -> .)
    CHAR_CONST      reduce using rule 268 (empty -> .)
    WCHAR_CONST     reduce using rule 268 (empty -> .)
    STRING_LITERAL  reduce using rule 268 (empty -> .)
    WSTRING_LITERAL reduce using rule 268 (empty -> .)
    RBRACKET        reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29

    empty                          shift and go to state 62
    type_qualifier_list_opt        shift and go to state 102
    type_qualifier                 shift and go to state 64
    type_qualifier_list            shift and go to state 104

state 58

    (125) direct_declarator -> direct_declarator LPAREN . parameter_type_list RPAREN
    (126) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (131) parameter_type_list -> . parameter_list
    (132) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (15) identifier_list_opt -> . empty
    (16) identifier_list_opt -> . identifier_list
    (133) parameter_list -> . parameter_declaration
    (134) parameter_list -> . parameter_list COMMA parameter_declaration
    (268) empty -> .
    (137) identifier_list -> . identifier
    (138) identifier_list -> . identifier_list COMMA identifier
    (135) parameter_declaration -> . declaration_specifiers declarator
    (136) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (253) identifier -> . ID
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    RPAREN          reduce using rule 268 (empty -> .)
    ID              shift and go to state 112
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 105
    parameter_list                 shift and go to state 109
    struct_or_union_specifier      shift and go to state 36
    identifier_list_opt            shift and go to state 108
    identifier                     shift and go to state 111
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    enum_specifier                 shift and go to state 33
    identifier_list                shift and go to state 107
    function_specifier             shift and go to state 14
    parameter_type_list            shift and go to state 110
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 113
    parameter_declaration          shift and go to state 106
    storage_class_specifier        shift and go to state 47
    struct_or_union                shift and go to state 8

state 59

    (9) declaration_specifiers_opt -> empty .

    ID              reduce using rule 9 (declaration_specifiers_opt -> empty .)
    LPAREN          reduce using rule 9 (declaration_specifiers_opt -> empty .)
    TIMES           reduce using rule 9 (declaration_specifiers_opt -> empty .)
    EQUALS          reduce using rule 9 (declaration_specifiers_opt -> empty .)
    LBRACKET        reduce using rule 9 (declaration_specifiers_opt -> empty .)
    SEMI            reduce using rule 9 (declaration_specifiers_opt -> empty .)
    COMMA           reduce using rule 9 (declaration_specifiers_opt -> empty .)
    RPAREN          reduce using rule 9 (declaration_specifiers_opt -> empty .)


state 60

    (57) declaration_specifiers -> function_specifier declaration_specifiers_opt .

    EQUALS          reduce using rule 57 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 57 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 57 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 57 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    ID              reduce using rule 57 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 57 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 57 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 57 (declaration_specifiers -> function_specifier declaration_specifiers_opt .)


state 61

    (10) declaration_specifiers_opt -> declaration_specifiers .

    ID              reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    LPAREN          reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    TIMES           reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    EQUALS          reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    LBRACKET        reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    SEMI            reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    COMMA           reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)
    RPAREN          reduce using rule 10 (declaration_specifiers_opt -> declaration_specifiers .)


state 62

    (27) type_qualifier_list_opt -> empty .

    PLUSPLUS        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    MINUSMINUS      reduce using rule 27 (type_qualifier_list_opt -> empty .)
    SIZEOF          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    AND             reduce using rule 27 (type_qualifier_list_opt -> empty .)
    TIMES           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    PLUS            reduce using rule 27 (type_qualifier_list_opt -> empty .)
    MINUS           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    NOT             reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LNOT            reduce using rule 27 (type_qualifier_list_opt -> empty .)
    OFFSETOF        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    ID              reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_DEC   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_OCT   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_HEX   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    INT_CONST_BIN   reduce using rule 27 (type_qualifier_list_opt -> empty .)
    FLOAT_CONST     reduce using rule 27 (type_qualifier_list_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 27 (type_qualifier_list_opt -> empty .)
    CHAR_CONST      reduce using rule 27 (type_qualifier_list_opt -> empty .)
    WCHAR_CONST     reduce using rule 27 (type_qualifier_list_opt -> empty .)
    STRING_LITERAL  reduce using rule 27 (type_qualifier_list_opt -> empty .)
    WSTRING_LITERAL reduce using rule 27 (type_qualifier_list_opt -> empty .)
    RBRACKET        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    TYPEID          reduce using rule 27 (type_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 27 (type_qualifier_list_opt -> empty .)
    COMMA           reduce using rule 27 (type_qualifier_list_opt -> empty .)
    SEMI            reduce using rule 27 (type_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 27 (type_qualifier_list_opt -> empty .)


state 63

    (127) pointer -> TIMES type_qualifier_list_opt .
    (128) pointer -> TIMES type_qualifier_list_opt . pointer
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer

    TYPEID          reduce using rule 127 (pointer -> TIMES type_qualifier_list_opt .)
    ID              reduce using rule 127 (pointer -> TIMES type_qualifier_list_opt .)
    LPAREN          reduce using rule 127 (pointer -> TIMES type_qualifier_list_opt .)
    LBRACKET        reduce using rule 127 (pointer -> TIMES type_qualifier_list_opt .)
    COMMA           reduce using rule 127 (pointer -> TIMES type_qualifier_list_opt .)
    RPAREN          reduce using rule 127 (pointer -> TIMES type_qualifier_list_opt .)
    SEMI            reduce using rule 127 (pointer -> TIMES type_qualifier_list_opt .)
    TIMES           shift and go to state 17

    pointer                        shift and go to state 114

state 64

    (129) type_qualifier_list -> type_qualifier .

    CONST           reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    PLUSPLUS        reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    MINUSMINUS      reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    LPAREN          reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    AND             reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    PLUS            reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    MINUS           reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    NOT             reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    LNOT            reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    OFFSETOF        reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    INT_CONST_DEC   reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    INT_CONST_OCT   reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    INT_CONST_HEX   reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    INT_CONST_BIN   reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    FLOAT_CONST     reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    HEX_FLOAT_CONST reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    CHAR_CONST      reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    WCHAR_CONST     reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    WSTRING_LITERAL reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    TYPEID          reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    LBRACKET        reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    SEMI            reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    RPAREN          reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 129 (type_qualifier_list -> type_qualifier .)
    RBRACKET        reduce using rule 129 (type_qualifier_list -> type_qualifier .)


state 65

    (28) type_qualifier_list_opt -> type_qualifier_list .
    (130) type_qualifier_list -> type_qualifier_list . type_qualifier
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE

    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    TYPEID          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    COMMA           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SEMI            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29

    type_qualifier                 shift and go to state 115

state 66

    (40) pppragma_directive -> PPPRAGMA PPPRAGMASTR .

    ID              reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CASE            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DEFAULT         reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    IF              reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SWITCH          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WHILE           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DO              reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FOR             reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    GOTO            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    BREAK           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CONTINUE        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RETURN          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PPPRAGMA        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LBRACE          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CONST           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RESTRICT        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    VOLATILE        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    VOID            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _BOOL           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CHAR            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SHORT           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT             reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LONG            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FLOAT           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    DOUBLE          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    _COMPLEX        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SIGNED          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    UNSIGNED        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    AUTO            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    REGISTER        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STATIC          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    EXTERN          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TYPEDEF         reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INLINE          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TYPEID          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ENUM            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STRUCT          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    UNION           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PLUSPLUS        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    MINUSMINUS      reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SIZEOF          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LPAREN          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    AND             reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    TIMES           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PLUS            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    MINUS           reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    NOT             reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    LNOT            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    OFFSETOF        reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_DEC   reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_OCT   reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_HEX   reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    INT_CONST_BIN   reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    FLOAT_CONST     reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    HEX_FLOAT_CONST reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    CHAR_CONST      reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WCHAR_CONST     reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    STRING_LITERAL  reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    WSTRING_LITERAL reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    SEMI            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    RBRACE          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    ELSE            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    PPHASH          reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)
    $end            reduce using rule 40 (pppragma_directive -> PPPRAGMA PPPRAGMASTR .)


state 67

    (7) declaration_list_opt -> empty .

    LBRACE          reduce using rule 7 (declaration_list_opt -> empty .)


state 68

    (8) declaration_list_opt -> declaration_list .
    (53) declaration_list -> declaration_list . declaration
    (51) declaration -> . decl_body SEMI
    (50) decl_body -> . declaration_specifiers init_declarator_list_opt
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    LBRACE          reduce using rule 8 (declaration_list_opt -> declaration_list .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    decl_body                      shift and go to state 28
    struct_or_union                shift and go to state 8
    declaration                    shift and go to state 116
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 71
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    storage_class_specifier        shift and go to state 47
    struct_or_union_specifier      shift and go to state 36
    function_specifier             shift and go to state 14

state 69

    (52) declaration_list -> declaration .

    CONST           reduce using rule 52 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 52 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 52 (declaration_list -> declaration .)
    VOID            reduce using rule 52 (declaration_list -> declaration .)
    _BOOL           reduce using rule 52 (declaration_list -> declaration .)
    CHAR            reduce using rule 52 (declaration_list -> declaration .)
    SHORT           reduce using rule 52 (declaration_list -> declaration .)
    INT             reduce using rule 52 (declaration_list -> declaration .)
    LONG            reduce using rule 52 (declaration_list -> declaration .)
    FLOAT           reduce using rule 52 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 52 (declaration_list -> declaration .)
    _COMPLEX        reduce using rule 52 (declaration_list -> declaration .)
    SIGNED          reduce using rule 52 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 52 (declaration_list -> declaration .)
    AUTO            reduce using rule 52 (declaration_list -> declaration .)
    REGISTER        reduce using rule 52 (declaration_list -> declaration .)
    STATIC          reduce using rule 52 (declaration_list -> declaration .)
    EXTERN          reduce using rule 52 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 52 (declaration_list -> declaration .)
    INLINE          reduce using rule 52 (declaration_list -> declaration .)
    TYPEID          reduce using rule 52 (declaration_list -> declaration .)
    ENUM            reduce using rule 52 (declaration_list -> declaration .)
    STRUCT          reduce using rule 52 (declaration_list -> declaration .)
    UNION           reduce using rule 52 (declaration_list -> declaration .)
    LBRACE          reduce using rule 52 (declaration_list -> declaration .)


state 70

    (41) function_definition -> declarator declaration_list_opt . compound_statement
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (266) brace_open -> . LBRACE

    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 117
    compound_statement             shift and go to state 118

state 71

    (50) decl_body -> declaration_specifiers . init_declarator_list_opt
    (17) init_declarator_list_opt -> . empty
    (18) init_declarator_list_opt -> . init_declarator_list
    (268) empty -> .
    (81) init_declarator_list -> . init_declarator
    (82) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (83) init_declarator_list -> . EQUALS initializer
    (84) init_declarator_list -> . abstract_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (150) abstract_declarator -> . pointer
    (151) abstract_declarator -> . pointer direct_abstract_declarator
    (152) abstract_declarator -> . direct_abstract_declarator
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    SEMI            reduce using rule 268 (empty -> .)
    EQUALS          shift and go to state 87
    TIMES           shift and go to state 17
    LPAREN          shift and go to state 119
    LBRACKET        shift and go to state 85
    ID              shift and go to state 40

    empty                          shift and go to state 78
    init_declarator_list_opt       shift and go to state 83
    abstract_declarator            shift and go to state 84
    direct_abstract_declarator     shift and go to state 79
    declarator                     shift and go to state 120
    init_declarator                shift and go to state 80
    init_declarator_list           shift and go to state 82
    direct_declarator              shift and go to state 12
    pointer                        shift and go to state 121

state 72

    (108) enum_specifier -> ENUM brace_open . enumerator_list brace_close
    (111) enumerator_list -> . enumerator
    (112) enumerator_list -> . enumerator_list COMMA
    (113) enumerator_list -> . enumerator_list COMMA enumerator
    (114) enumerator -> . ID
    (115) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 122

    enumerator_list                shift and go to state 123
    enumerator                     shift and go to state 124

state 73

    (106) enum_specifier -> ENUM ID .
    (109) enum_specifier -> ENUM ID . brace_open enumerator_list brace_close
    (266) brace_open -> . LBRACE

    CONST           reduce using rule 106 (enum_specifier -> ENUM ID .)
    RESTRICT        reduce using rule 106 (enum_specifier -> ENUM ID .)
    VOLATILE        reduce using rule 106 (enum_specifier -> ENUM ID .)
    VOID            reduce using rule 106 (enum_specifier -> ENUM ID .)
    _BOOL           reduce using rule 106 (enum_specifier -> ENUM ID .)
    CHAR            reduce using rule 106 (enum_specifier -> ENUM ID .)
    SHORT           reduce using rule 106 (enum_specifier -> ENUM ID .)
    INT             reduce using rule 106 (enum_specifier -> ENUM ID .)
    LONG            reduce using rule 106 (enum_specifier -> ENUM ID .)
    FLOAT           reduce using rule 106 (enum_specifier -> ENUM ID .)
    DOUBLE          reduce using rule 106 (enum_specifier -> ENUM ID .)
    _COMPLEX        reduce using rule 106 (enum_specifier -> ENUM ID .)
    SIGNED          reduce using rule 106 (enum_specifier -> ENUM ID .)
    UNSIGNED        reduce using rule 106 (enum_specifier -> ENUM ID .)
    AUTO            reduce using rule 106 (enum_specifier -> ENUM ID .)
    REGISTER        reduce using rule 106 (enum_specifier -> ENUM ID .)
    STATIC          reduce using rule 106 (enum_specifier -> ENUM ID .)
    EXTERN          reduce using rule 106 (enum_specifier -> ENUM ID .)
    TYPEDEF         reduce using rule 106 (enum_specifier -> ENUM ID .)
    INLINE          reduce using rule 106 (enum_specifier -> ENUM ID .)
    TYPEID          reduce using rule 106 (enum_specifier -> ENUM ID .)
    ENUM            reduce using rule 106 (enum_specifier -> ENUM ID .)
    STRUCT          reduce using rule 106 (enum_specifier -> ENUM ID .)
    UNION           reduce using rule 106 (enum_specifier -> ENUM ID .)
    ID              reduce using rule 106 (enum_specifier -> ENUM ID .)
    LPAREN          reduce using rule 106 (enum_specifier -> ENUM ID .)
    TIMES           reduce using rule 106 (enum_specifier -> ENUM ID .)
    EQUALS          reduce using rule 106 (enum_specifier -> ENUM ID .)
    LBRACKET        reduce using rule 106 (enum_specifier -> ENUM ID .)
    SEMI            reduce using rule 106 (enum_specifier -> ENUM ID .)
    COMMA           reduce using rule 106 (enum_specifier -> ENUM ID .)
    RPAREN          reduce using rule 106 (enum_specifier -> ENUM ID .)
    COLON           reduce using rule 106 (enum_specifier -> ENUM ID .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 125

state 74

    (107) enum_specifier -> ENUM TYPEID .
    (110) enum_specifier -> ENUM TYPEID . brace_open enumerator_list brace_close
    (266) brace_open -> . LBRACE

    CONST           reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    RESTRICT        reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    VOLATILE        reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    VOID            reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    _BOOL           reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    CHAR            reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    SHORT           reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    INT             reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    LONG            reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    FLOAT           reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    DOUBLE          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    _COMPLEX        reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    SIGNED          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    UNSIGNED        reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    AUTO            reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    REGISTER        reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    STATIC          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    EXTERN          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    TYPEDEF         reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    INLINE          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    TYPEID          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    ENUM            reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    STRUCT          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    UNION           reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    ID              reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    LPAREN          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    TIMES           reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    EQUALS          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    LBRACKET        reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    SEMI            reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    COMMA           reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    RPAREN          reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    COLON           reduce using rule 107 (enum_specifier -> ENUM TYPEID .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 126

state 75

    (51) declaration -> decl_body SEMI .

    SEMI            reduce using rule 51 (declaration -> decl_body SEMI .)
    PPHASH          reduce using rule 51 (declaration -> decl_body SEMI .)
    PPPRAGMA        reduce using rule 51 (declaration -> decl_body SEMI .)
    ID              reduce using rule 51 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 51 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 51 (declaration -> decl_body SEMI .)
    CONST           reduce using rule 51 (declaration -> decl_body SEMI .)
    RESTRICT        reduce using rule 51 (declaration -> decl_body SEMI .)
    VOLATILE        reduce using rule 51 (declaration -> decl_body SEMI .)
    VOID            reduce using rule 51 (declaration -> decl_body SEMI .)
    _BOOL           reduce using rule 51 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 51 (declaration -> decl_body SEMI .)
    SHORT           reduce using rule 51 (declaration -> decl_body SEMI .)
    INT             reduce using rule 51 (declaration -> decl_body SEMI .)
    LONG            reduce using rule 51 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 51 (declaration -> decl_body SEMI .)
    DOUBLE          reduce using rule 51 (declaration -> decl_body SEMI .)
    _COMPLEX        reduce using rule 51 (declaration -> decl_body SEMI .)
    SIGNED          reduce using rule 51 (declaration -> decl_body SEMI .)
    UNSIGNED        reduce using rule 51 (declaration -> decl_body SEMI .)
    AUTO            reduce using rule 51 (declaration -> decl_body SEMI .)
    REGISTER        reduce using rule 51 (declaration -> decl_body SEMI .)
    STATIC          reduce using rule 51 (declaration -> decl_body SEMI .)
    EXTERN          reduce using rule 51 (declaration -> decl_body SEMI .)
    TYPEDEF         reduce using rule 51 (declaration -> decl_body SEMI .)
    INLINE          reduce using rule 51 (declaration -> decl_body SEMI .)
    TYPEID          reduce using rule 51 (declaration -> decl_body SEMI .)
    ENUM            reduce using rule 51 (declaration -> decl_body SEMI .)
    STRUCT          reduce using rule 51 (declaration -> decl_body SEMI .)
    UNION           reduce using rule 51 (declaration -> decl_body SEMI .)
    $end            reduce using rule 51 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 51 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 51 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 51 (declaration -> decl_body SEMI .)
    SIZEOF          reduce using rule 51 (declaration -> decl_body SEMI .)
    AND             reduce using rule 51 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 51 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 51 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 51 (declaration -> decl_body SEMI .)
    LNOT            reduce using rule 51 (declaration -> decl_body SEMI .)
    OFFSETOF        reduce using rule 51 (declaration -> decl_body SEMI .)
    INT_CONST_DEC   reduce using rule 51 (declaration -> decl_body SEMI .)
    INT_CONST_OCT   reduce using rule 51 (declaration -> decl_body SEMI .)
    INT_CONST_HEX   reduce using rule 51 (declaration -> decl_body SEMI .)
    INT_CONST_BIN   reduce using rule 51 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 51 (declaration -> decl_body SEMI .)
    HEX_FLOAT_CONST reduce using rule 51 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 51 (declaration -> decl_body SEMI .)
    WCHAR_CONST     reduce using rule 51 (declaration -> decl_body SEMI .)
    STRING_LITERAL  reduce using rule 51 (declaration -> decl_body SEMI .)
    WSTRING_LITERAL reduce using rule 51 (declaration -> decl_body SEMI .)
    CASE            reduce using rule 51 (declaration -> decl_body SEMI .)
    DEFAULT         reduce using rule 51 (declaration -> decl_body SEMI .)
    IF              reduce using rule 51 (declaration -> decl_body SEMI .)
    SWITCH          reduce using rule 51 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 51 (declaration -> decl_body SEMI .)
    DO              reduce using rule 51 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 51 (declaration -> decl_body SEMI .)
    GOTO            reduce using rule 51 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 51 (declaration -> decl_body SEMI .)
    CONTINUE        reduce using rule 51 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 51 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 51 (declaration -> decl_body SEMI .)


state 76

    (54) declaration_specifiers -> type_qualifier declaration_specifiers_opt .

    EQUALS          reduce using rule 54 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    TIMES           reduce using rule 54 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 54 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 54 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    ID              reduce using rule 54 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    SEMI            reduce using rule 54 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    COMMA           reduce using rule 54 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 54 (declaration_specifiers -> type_qualifier declaration_specifiers_opt .)


state 77

    (55) declaration_specifiers -> type_specifier declaration_specifiers_opt .

    EQUALS          reduce using rule 55 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 55 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 55 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 55 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    ID              reduce using rule 55 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 55 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 55 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 55 (declaration_specifiers -> type_specifier declaration_specifiers_opt .)


state 78

    (17) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 17 (init_declarator_list_opt -> empty .)


state 79

    (152) abstract_declarator -> direct_abstract_declarator .
    (154) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 152 (abstract_declarator -> direct_abstract_declarator .)
    SEMI            reduce using rule 152 (abstract_declarator -> direct_abstract_declarator .)
    RPAREN          reduce using rule 152 (abstract_declarator -> direct_abstract_declarator .)
    LBRACKET        shift and go to state 128
    LPAREN          shift and go to state 127


state 80

    (81) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 81 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 81 (init_declarator_list -> init_declarator .)


state 81

    (120) direct_declarator -> LPAREN . declarator RPAREN
    (153) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (159) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (150) abstract_declarator -> . pointer
    (151) abstract_declarator -> . pointer direct_abstract_declarator
    (152) abstract_declarator -> . direct_abstract_declarator
    (21) parameter_type_list_opt -> . empty
    (22) parameter_type_list_opt -> . parameter_type_list
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (268) empty -> .
    (131) parameter_type_list -> . parameter_list
    (132) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (133) parameter_list -> . parameter_declaration
    (134) parameter_list -> . parameter_list COMMA parameter_declaration
    (135) parameter_declaration -> . declaration_specifiers declarator
    (136) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    ID              shift and go to state 40
    LPAREN          shift and go to state 81
    TIMES           shift and go to state 17
    LBRACKET        shift and go to state 85
    RPAREN          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 129
    direct_abstract_declarator     shift and go to state 79
    enum_specifier                 shift and go to state 33
    type_specifier                 shift and go to state 41
    parameter_list                 shift and go to state 109
    struct_or_union_specifier      shift and go to state 36
    direct_declarator              shift and go to state 12
    function_specifier             shift and go to state 14
    parameter_declaration          shift and go to state 106
    parameter_type_list            shift and go to state 132
    type_qualifier                 shift and go to state 31
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 113
    abstract_declarator            shift and go to state 130
    declarator                     shift and go to state 56
    storage_class_specifier        shift and go to state 47
    parameter_type_list_opt        shift and go to state 131
    pointer                        shift and go to state 88
    struct_or_union                shift and go to state 8

state 82

    (18) init_declarator_list_opt -> init_declarator_list .
    (82) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 18 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 133


state 83

    (50) decl_body -> declaration_specifiers init_declarator_list_opt .

    SEMI            reduce using rule 50 (decl_body -> declaration_specifiers init_declarator_list_opt .)


state 84

    (84) init_declarator_list -> abstract_declarator .

    COMMA           reduce using rule 84 (init_declarator_list -> abstract_declarator .)
    SEMI            reduce using rule 84 (init_declarator_list -> abstract_declarator .)


state 85

    (155) direct_abstract_declarator -> LBRACKET . assignment_expression_opt RBRACKET
    (157) direct_abstract_declarator -> LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (268) empty -> .
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 143
    RBRACKET        reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 134
    assignment_expression_opt      shift and go to state 142
    assignment_expression          shift and go to state 135
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 86

    (42) function_definition -> declaration_specifiers declarator . declaration_list_opt compound_statement
    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . EQUALS initializer
    (7) declaration_list_opt -> . empty
    (8) declaration_list_opt -> . declaration_list
    (268) empty -> .
    (52) declaration_list -> . declaration
    (53) declaration_list -> . declaration_list declaration
    (51) declaration -> . decl_body SEMI
    (50) decl_body -> . declaration_specifiers init_declarator_list_opt
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    COMMA           reduce using rule 85 (init_declarator -> declarator .)
    SEMI            reduce using rule 85 (init_declarator -> declarator .)
    EQUALS          shift and go to state 170
    LBRACE          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 67
    declaration_list               shift and go to state 68
    declaration                    shift and go to state 69
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    decl_body                      shift and go to state 28
    declaration_list_opt           shift and go to state 169
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 71
    storage_class_specifier        shift and go to state 47
    function_specifier             shift and go to state 14

state 87

    (83) init_declarator_list -> EQUALS . initializer
    (139) initializer -> . assignment_expression
    (140) initializer -> . brace_open initializer_list_opt brace_close
    (141) initializer -> . brace_open initializer_list COMMA brace_close
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (266) brace_open -> . LBRACE
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    brace_open                     shift and go to state 174
    conditional_expression         shift and go to state 167
    assignment_expression          shift and go to state 171
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147
    unary_expression               shift and go to state 136
    initializer                    shift and go to state 173

state 88

    (117) declarator -> pointer . direct_declarator
    (118) declarator -> pointer . TYPEID
    (150) abstract_declarator -> pointer .
    (151) abstract_declarator -> pointer . direct_abstract_declarator
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    TYPEID          shift and go to state 91
    COMMA           reduce using rule 150 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 150 (abstract_declarator -> pointer .)
    SEMI            reduce using rule 150 (abstract_declarator -> pointer .)
    ID              shift and go to state 40
    LPAREN          shift and go to state 81
    LBRACKET        shift and go to state 85

    direct_abstract_declarator     shift and go to state 175
    direct_declarator              shift and go to state 92

state 89

    (32) translation_unit -> translation_unit external_declaration .

    SEMI            reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    PPHASH          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    PPPRAGMA        reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    _BOOL           reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    _COMPLEX        reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    TYPEDEF         reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    TYPEID          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 32 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 32 (translation_unit -> translation_unit external_declaration .)


state 90

    (56) declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .

    EQUALS          reduce using rule 56 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    TIMES           reduce using rule 56 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    LPAREN          reduce using rule 56 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    LBRACKET        reduce using rule 56 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    ID              reduce using rule 56 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    SEMI            reduce using rule 56 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    COMMA           reduce using rule 56 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)
    RPAREN          reduce using rule 56 (declaration_specifiers -> storage_class_specifier declaration_specifiers_opt .)


state 91

    (118) declarator -> pointer TYPEID .

    EQUALS          reduce using rule 118 (declarator -> pointer TYPEID .)
    CONST           reduce using rule 118 (declarator -> pointer TYPEID .)
    RESTRICT        reduce using rule 118 (declarator -> pointer TYPEID .)
    VOLATILE        reduce using rule 118 (declarator -> pointer TYPEID .)
    VOID            reduce using rule 118 (declarator -> pointer TYPEID .)
    _BOOL           reduce using rule 118 (declarator -> pointer TYPEID .)
    CHAR            reduce using rule 118 (declarator -> pointer TYPEID .)
    SHORT           reduce using rule 118 (declarator -> pointer TYPEID .)
    INT             reduce using rule 118 (declarator -> pointer TYPEID .)
    LONG            reduce using rule 118 (declarator -> pointer TYPEID .)
    FLOAT           reduce using rule 118 (declarator -> pointer TYPEID .)
    DOUBLE          reduce using rule 118 (declarator -> pointer TYPEID .)
    _COMPLEX        reduce using rule 118 (declarator -> pointer TYPEID .)
    SIGNED          reduce using rule 118 (declarator -> pointer TYPEID .)
    UNSIGNED        reduce using rule 118 (declarator -> pointer TYPEID .)
    AUTO            reduce using rule 118 (declarator -> pointer TYPEID .)
    REGISTER        reduce using rule 118 (declarator -> pointer TYPEID .)
    STATIC          reduce using rule 118 (declarator -> pointer TYPEID .)
    EXTERN          reduce using rule 118 (declarator -> pointer TYPEID .)
    TYPEDEF         reduce using rule 118 (declarator -> pointer TYPEID .)
    INLINE          reduce using rule 118 (declarator -> pointer TYPEID .)
    TYPEID          reduce using rule 118 (declarator -> pointer TYPEID .)
    ENUM            reduce using rule 118 (declarator -> pointer TYPEID .)
    STRUCT          reduce using rule 118 (declarator -> pointer TYPEID .)
    UNION           reduce using rule 118 (declarator -> pointer TYPEID .)
    LBRACE          reduce using rule 118 (declarator -> pointer TYPEID .)
    COMMA           reduce using rule 118 (declarator -> pointer TYPEID .)
    SEMI            reduce using rule 118 (declarator -> pointer TYPEID .)
    RPAREN          reduce using rule 118 (declarator -> pointer TYPEID .)
    COLON           reduce using rule 118 (declarator -> pointer TYPEID .)


state 92

    (117) declarator -> pointer direct_declarator .
    (121) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> direct_declarator . LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> direct_declarator . LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> direct_declarator . LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    EQUALS          reduce using rule 117 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 117 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 117 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 117 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 117 (declarator -> pointer direct_declarator .)
    _BOOL           reduce using rule 117 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 117 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 117 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 117 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 117 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 117 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 117 (declarator -> pointer direct_declarator .)
    _COMPLEX        reduce using rule 117 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 117 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 117 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 117 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 117 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 117 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 117 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 117 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 117 (declarator -> pointer direct_declarator .)
    TYPEID          reduce using rule 117 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 117 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 117 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 117 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 117 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 117 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 117 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 117 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 117 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 57
    LPAREN          shift and go to state 58


state 93

    (100) struct_declaration -> SEMI .

    RBRACE          reduce using rule 100 (struct_declaration -> SEMI .)
    SEMI            reduce using rule 100 (struct_declaration -> SEMI .)
    CONST           reduce using rule 100 (struct_declaration -> SEMI .)
    RESTRICT        reduce using rule 100 (struct_declaration -> SEMI .)
    VOLATILE        reduce using rule 100 (struct_declaration -> SEMI .)
    VOID            reduce using rule 100 (struct_declaration -> SEMI .)
    _BOOL           reduce using rule 100 (struct_declaration -> SEMI .)
    CHAR            reduce using rule 100 (struct_declaration -> SEMI .)
    SHORT           reduce using rule 100 (struct_declaration -> SEMI .)
    INT             reduce using rule 100 (struct_declaration -> SEMI .)
    LONG            reduce using rule 100 (struct_declaration -> SEMI .)
    FLOAT           reduce using rule 100 (struct_declaration -> SEMI .)
    DOUBLE          reduce using rule 100 (struct_declaration -> SEMI .)
    _COMPLEX        reduce using rule 100 (struct_declaration -> SEMI .)
    SIGNED          reduce using rule 100 (struct_declaration -> SEMI .)
    UNSIGNED        reduce using rule 100 (struct_declaration -> SEMI .)
    TYPEID          reduce using rule 100 (struct_declaration -> SEMI .)
    ENUM            reduce using rule 100 (struct_declaration -> SEMI .)
    STRUCT          reduce using rule 100 (struct_declaration -> SEMI .)
    UNION           reduce using rule 100 (struct_declaration -> SEMI .)


state 94

    (96) struct_declaration_list -> struct_declaration .

    RBRACE          reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    SEMI            reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    _BOOL           reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    _COMPLEX        reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    TYPEID          reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 96 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 96 (struct_declaration_list -> struct_declaration .)


state 95

    (87) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list_opt
    (23) specifier_qualifier_list_opt -> . empty
    (24) specifier_qualifier_list_opt -> . specifier_qualifier_list
    (268) empty -> .
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    TIMES           reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    LBRACKET        reduce using rule 268 (empty -> .)
    COLON           reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    SEMI            reduce using rule 268 (empty -> .)
    RPAREN          reduce using rule 268 (empty -> .)
    COMMA           reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 176
    type_specifier                 shift and go to state 96
    specifier_qualifier_list       shift and go to state 177
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 95
    typedef_name                   shift and go to state 11
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    specifier_qualifier_list_opt   shift and go to state 178

state 96

    (88) specifier_qualifier_list -> type_specifier . specifier_qualifier_list_opt
    (23) specifier_qualifier_list_opt -> . empty
    (24) specifier_qualifier_list_opt -> . specifier_qualifier_list
    (268) empty -> .
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    TIMES           reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    LBRACKET        reduce using rule 268 (empty -> .)
    COLON           reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    SEMI            reduce using rule 268 (empty -> .)
    RPAREN          reduce using rule 268 (empty -> .)
    COMMA           reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 176
    typedef_name                   shift and go to state 11
    specifier_qualifier_list       shift and go to state 177
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 95
    type_specifier                 shift and go to state 96
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    specifier_qualifier_list_opt   shift and go to state 179

state 97

    (91) struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list . brace_close
    (97) struct_declaration_list -> struct_declaration_list . struct_declaration
    (267) brace_close -> . RBRACE
    (98) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (99) struct_declaration -> . specifier_qualifier_list abstract_declarator SEMI
    (100) struct_declaration -> . SEMI
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    RBRACE          shift and go to state 181
    SEMI            shift and go to state 93
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    brace_close                    shift and go to state 182
    struct_declaration             shift and go to state 180
    type_qualifier                 shift and go to state 95
    type_specifier                 shift and go to state 96
    enum_specifier                 shift and go to state 33
    struct_or_union                shift and go to state 8
    typedef_name                   shift and go to state 11
    struct_or_union_specifier      shift and go to state 36
    specifier_qualifier_list       shift and go to state 98

state 98

    (98) struct_declaration -> specifier_qualifier_list . struct_declarator_list_opt SEMI
    (99) struct_declaration -> specifier_qualifier_list . abstract_declarator SEMI
    (25) struct_declarator_list_opt -> . empty
    (26) struct_declarator_list_opt -> . struct_declarator_list
    (150) abstract_declarator -> . pointer
    (151) abstract_declarator -> . pointer direct_abstract_declarator
    (152) abstract_declarator -> . direct_abstract_declarator
    (268) empty -> .
    (101) struct_declarator_list -> . struct_declarator
    (102) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (103) struct_declarator -> . declarator
    (104) struct_declarator -> . declarator COLON constant_expression
    (105) struct_declarator -> . COLON constant_expression
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    SEMI            reduce using rule 268 (empty -> .)
    TIMES           shift and go to state 17
    LPAREN          shift and go to state 119
    LBRACKET        shift and go to state 85
    COLON           shift and go to state 189
    ID              shift and go to state 40

    empty                          shift and go to state 183
    abstract_declarator            shift and go to state 185
    struct_declarator_list         shift and go to state 186
    struct_declarator_list_opt     shift and go to state 184
    declarator                     shift and go to state 188
    direct_declarator              shift and go to state 12
    direct_abstract_declarator     shift and go to state 79
    pointer                        shift and go to state 121
    struct_declarator              shift and go to state 187

state 99

    (93) struct_or_union_specifier -> struct_or_union TYPEID brace_open . struct_declaration_list brace_close
    (96) struct_declaration_list -> . struct_declaration
    (97) struct_declaration_list -> . struct_declaration_list struct_declaration
    (98) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (99) struct_declaration -> . specifier_qualifier_list abstract_declarator SEMI
    (100) struct_declaration -> . SEMI
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    SEMI            shift and go to state 93
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    struct_declaration             shift and go to state 94
    type_qualifier                 shift and go to state 95
    type_specifier                 shift and go to state 96
    enum_specifier                 shift and go to state 33
    struct_declaration_list        shift and go to state 190
    struct_or_union                shift and go to state 8
    typedef_name                   shift and go to state 11
    struct_or_union_specifier      shift and go to state 36
    specifier_qualifier_list       shift and go to state 98

state 100

    (92) struct_or_union_specifier -> struct_or_union ID brace_open . struct_declaration_list brace_close
    (96) struct_declaration_list -> . struct_declaration
    (97) struct_declaration_list -> . struct_declaration_list struct_declaration
    (98) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (99) struct_declaration -> . specifier_qualifier_list abstract_declarator SEMI
    (100) struct_declaration -> . SEMI
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    SEMI            shift and go to state 93
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    struct_declaration             shift and go to state 94
    type_qualifier                 shift and go to state 95
    type_specifier                 shift and go to state 96
    enum_specifier                 shift and go to state 33
    struct_declaration_list        shift and go to state 191
    struct_or_union                shift and go to state 8
    typedef_name                   shift and go to state 11
    struct_or_union_specifier      shift and go to state 36
    specifier_qualifier_list       shift and go to state 98

state 101

    (120) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    CONST           reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    RESTRICT        reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    VOLATILE        reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    _BOOL           reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    SHORT           reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    LONG            reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    DOUBLE          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    _COMPLEX        reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    SIGNED          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    UNSIGNED        reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    AUTO            reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    REGISTER        reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    STATIC          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    EXTERN          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEDEF         reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    INLINE          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    TYPEID          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    ENUM            reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    STRUCT          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    UNION           reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)
    COLON           reduce using rule 120 (direct_declarator -> LPAREN declarator RPAREN .)


state 102

    (121) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt . assignment_expression_opt RBRACKET
    (124) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (268) empty -> .
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 193
    RBRACKET        reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 134
    assignment_expression          shift and go to state 135
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    identifier                     shift and go to state 156
    assignment_expression_opt      shift and go to state 192
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 103

    (122) direct_declarator -> direct_declarator LBRACKET STATIC . type_qualifier_list_opt assignment_expression RBRACKET
    (27) type_qualifier_list_opt -> . empty
    (28) type_qualifier_list_opt -> . type_qualifier_list
    (268) empty -> .
    (129) type_qualifier_list -> . type_qualifier
    (130) type_qualifier_list -> . type_qualifier_list type_qualifier
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE

    PLUSPLUS        reduce using rule 268 (empty -> .)
    MINUSMINUS      reduce using rule 268 (empty -> .)
    SIZEOF          reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    AND             reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    PLUS            reduce using rule 268 (empty -> .)
    MINUS           reduce using rule 268 (empty -> .)
    NOT             reduce using rule 268 (empty -> .)
    LNOT            reduce using rule 268 (empty -> .)
    OFFSETOF        reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    INT_CONST_DEC   reduce using rule 268 (empty -> .)
    INT_CONST_OCT   reduce using rule 268 (empty -> .)
    INT_CONST_HEX   reduce using rule 268 (empty -> .)
    INT_CONST_BIN   reduce using rule 268 (empty -> .)
    FLOAT_CONST     reduce using rule 268 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 268 (empty -> .)
    CHAR_CONST      reduce using rule 268 (empty -> .)
    WCHAR_CONST     reduce using rule 268 (empty -> .)
    STRING_LITERAL  reduce using rule 268 (empty -> .)
    WSTRING_LITERAL reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29

    empty                          shift and go to state 62
    type_qualifier                 shift and go to state 64
    type_qualifier_list_opt        shift and go to state 194
    type_qualifier_list            shift and go to state 65

state 104

    (123) direct_declarator -> direct_declarator LBRACKET type_qualifier_list . STATIC assignment_expression RBRACKET
    (28) type_qualifier_list_opt -> type_qualifier_list .
    (130) type_qualifier_list -> type_qualifier_list . type_qualifier
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE

    STATIC          shift and go to state 195
    TIMES           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUSPLUS        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUSMINUS      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    SIZEOF          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LPAREN          reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    AND             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    PLUS            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    MINUS           reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    NOT             reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    LNOT            reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    OFFSETOF        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    ID              reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_DEC   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_OCT   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_HEX   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    INT_CONST_BIN   reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    FLOAT_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    HEX_FLOAT_CONST reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CHAR_CONST      reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WCHAR_CONST     reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    STRING_LITERAL  reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    WSTRING_LITERAL reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    RBRACKET        reduce using rule 28 (type_qualifier_list_opt -> type_qualifier_list .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29

    type_qualifier                 shift and go to state 115

state 105

    (15) identifier_list_opt -> empty .

    RPAREN          reduce using rule 15 (identifier_list_opt -> empty .)


state 106

    (133) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 133 (parameter_list -> parameter_declaration .)
    RPAREN          reduce using rule 133 (parameter_list -> parameter_declaration .)


state 107

    (16) identifier_list_opt -> identifier_list .
    (138) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 16 (identifier_list_opt -> identifier_list .)
    COMMA           shift and go to state 196


state 108

    (126) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 197


state 109

    (131) parameter_type_list -> parameter_list .
    (132) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (134) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 131 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 198


state 110

    (125) direct_declarator -> direct_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 199


state 111

    (137) identifier_list -> identifier .

    COMMA           reduce using rule 137 (identifier_list -> identifier .)
    RPAREN          reduce using rule 137 (identifier_list -> identifier .)


state 112

    (253) identifier -> ID .

    LBRACKET        reduce using rule 253 (identifier -> ID .)
    LPAREN          reduce using rule 253 (identifier -> ID .)
    PERIOD          reduce using rule 253 (identifier -> ID .)
    ARROW           reduce using rule 253 (identifier -> ID .)
    PLUSPLUS        reduce using rule 253 (identifier -> ID .)
    MINUSMINUS      reduce using rule 253 (identifier -> ID .)
    TIMES           reduce using rule 253 (identifier -> ID .)
    DIVIDE          reduce using rule 253 (identifier -> ID .)
    MOD             reduce using rule 253 (identifier -> ID .)
    PLUS            reduce using rule 253 (identifier -> ID .)
    MINUS           reduce using rule 253 (identifier -> ID .)
    RSHIFT          reduce using rule 253 (identifier -> ID .)
    LSHIFT          reduce using rule 253 (identifier -> ID .)
    LT              reduce using rule 253 (identifier -> ID .)
    LE              reduce using rule 253 (identifier -> ID .)
    GE              reduce using rule 253 (identifier -> ID .)
    GT              reduce using rule 253 (identifier -> ID .)
    EQ              reduce using rule 253 (identifier -> ID .)
    NE              reduce using rule 253 (identifier -> ID .)
    AND             reduce using rule 253 (identifier -> ID .)
    OR              reduce using rule 253 (identifier -> ID .)
    XOR             reduce using rule 253 (identifier -> ID .)
    LAND            reduce using rule 253 (identifier -> ID .)
    LOR             reduce using rule 253 (identifier -> ID .)
    CONDOP          reduce using rule 253 (identifier -> ID .)
    RBRACKET        reduce using rule 253 (identifier -> ID .)
    COMMA           reduce using rule 253 (identifier -> ID .)
    SEMI            reduce using rule 253 (identifier -> ID .)
    RPAREN          reduce using rule 253 (identifier -> ID .)
    COLON           reduce using rule 253 (identifier -> ID .)
    RBRACE          reduce using rule 253 (identifier -> ID .)
    EQUALS          reduce using rule 253 (identifier -> ID .)
    XOREQUAL        reduce using rule 253 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 253 (identifier -> ID .)
    DIVEQUAL        reduce using rule 253 (identifier -> ID .)
    MODEQUAL        reduce using rule 253 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 253 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 253 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 253 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 253 (identifier -> ID .)
    ANDEQUAL        reduce using rule 253 (identifier -> ID .)
    OREQUAL         reduce using rule 253 (identifier -> ID .)


state 113

    (135) parameter_declaration -> declaration_specifiers . declarator
    (136) parameter_declaration -> declaration_specifiers . abstract_declarator_opt
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (268) empty -> .
    (150) abstract_declarator -> . pointer
    (151) abstract_declarator -> . pointer direct_abstract_declarator
    (152) abstract_declarator -> . direct_abstract_declarator
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    ID              shift and go to state 40
    LPAREN          shift and go to state 81
    TIMES           shift and go to state 17
    COMMA           reduce using rule 268 (empty -> .)
    RPAREN          reduce using rule 268 (empty -> .)
    LBRACKET        shift and go to state 85

    empty                          shift and go to state 200
    abstract_declarator            shift and go to state 201
    abstract_declarator_opt        shift and go to state 202
    declarator                     shift and go to state 203
    pointer                        shift and go to state 88
    direct_declarator              shift and go to state 12
    direct_abstract_declarator     shift and go to state 79

state 114

    (128) pointer -> TIMES type_qualifier_list_opt pointer .

    TYPEID          reduce using rule 128 (pointer -> TIMES type_qualifier_list_opt pointer .)
    ID              reduce using rule 128 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LPAREN          reduce using rule 128 (pointer -> TIMES type_qualifier_list_opt pointer .)
    LBRACKET        reduce using rule 128 (pointer -> TIMES type_qualifier_list_opt pointer .)
    COMMA           reduce using rule 128 (pointer -> TIMES type_qualifier_list_opt pointer .)
    RPAREN          reduce using rule 128 (pointer -> TIMES type_qualifier_list_opt pointer .)
    SEMI            reduce using rule 128 (pointer -> TIMES type_qualifier_list_opt pointer .)


state 115

    (130) type_qualifier_list -> type_qualifier_list type_qualifier .

    CONST           reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUSPLUS        reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUSMINUS      reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LPAREN          reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    AND             reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TIMES           reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    PLUS            reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    MINUS           reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    NOT             reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LNOT            reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    OFFSETOF        reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_DEC   reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_OCT   reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_HEX   reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INT_CONST_BIN   reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    FLOAT_CONST     reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    HEX_FLOAT_CONST reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CHAR_CONST      reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    WCHAR_CONST     reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    WSTRING_LITERAL reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    TYPEID          reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    LBRACKET        reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SEMI            reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RPAREN          reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RBRACKET        reduce using rule 130 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 116

    (53) declaration_list -> declaration_list declaration .

    CONST           reduce using rule 53 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 53 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 53 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 53 (declaration_list -> declaration_list declaration .)
    _BOOL           reduce using rule 53 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 53 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 53 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 53 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 53 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 53 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 53 (declaration_list -> declaration_list declaration .)
    _COMPLEX        reduce using rule 53 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 53 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 53 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 53 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 53 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 53 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 53 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 53 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 53 (declaration_list -> declaration_list declaration .)
    TYPEID          reduce using rule 53 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 53 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 53 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 53 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 53 (declaration_list -> declaration_list declaration .)


state 117

    (164) compound_statement -> brace_open . block_item_list_opt brace_close
    (5) block_item_list_opt -> . empty
    (6) block_item_list_opt -> . block_item_list
    (268) empty -> .
    (162) block_item_list -> . block_item
    (163) block_item_list -> . block_item_list block_item
    (160) block_item -> . declaration
    (161) block_item -> . statement
    (51) declaration -> . decl_body SEMI
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (50) decl_body -> . declaration_specifiers init_declarator_list_opt
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RBRACE          reduce using rule 268 (empty -> .)
    SEMI            reduce using rule 268 (empty -> .)
    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 215
    decl_body                      shift and go to state 28
    assignment_expression          shift and go to state 217
    identifier                     shift and go to state 156
    declaration                    shift and go to state 204
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    block_item_list_opt            shift and go to state 219
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    expression_statement           shift and go to state 206
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    block_item_list                shift and go to state 208
    function_specifier             shift and go to state 14
    pppragma_directive             shift and go to state 216
    unified_wstring_literal        shift and go to state 154
    compound_statement             shift and go to state 223
    postfix_expression             shift and go to state 147
    jump_statement                 shift and go to state 229
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    binary_expression              shift and go to state 153
    block_item                     shift and go to state 226
    statement                      shift and go to state 207
    type_specifier                 shift and go to state 41
    enum_specifier                 shift and go to state 33
    selection_statement            shift and go to state 211
    brace_open                     shift and go to state 117
    type_qualifier                 shift and go to state 31
    primary_expression             shift and go to state 163
    iteration_statement            shift and go to state 228
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 71
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    storage_class_specifier        shift and go to state 47
    expression_opt                 shift and go to state 212

state 118

    (41) function_definition -> declarator declaration_list_opt compound_statement .

    SEMI            reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    PPPRAGMA        reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    _BOOL           reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    _COMPLEX        reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 41 (function_definition -> declarator declaration_list_opt compound_statement .)


state 119

    (153) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (159) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (120) direct_declarator -> LPAREN . declarator RPAREN
    (150) abstract_declarator -> . pointer
    (151) abstract_declarator -> . pointer direct_abstract_declarator
    (152) abstract_declarator -> . direct_abstract_declarator
    (21) parameter_type_list_opt -> . empty
    (22) parameter_type_list_opt -> . parameter_type_list
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (268) empty -> .
    (131) parameter_type_list -> . parameter_list
    (132) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (133) parameter_list -> . parameter_declaration
    (134) parameter_list -> . parameter_list COMMA parameter_declaration
    (135) parameter_declaration -> . declaration_specifiers declarator
    (136) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    TIMES           shift and go to state 17
    LPAREN          shift and go to state 119
    LBRACKET        shift and go to state 85
    RPAREN          reduce using rule 268 (empty -> .)
    ID              shift and go to state 40
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 129
    direct_abstract_declarator     shift and go to state 79
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    parameter_list                 shift and go to state 109
    struct_or_union_specifier      shift and go to state 36
    direct_declarator              shift and go to state 12
    function_specifier             shift and go to state 14
    parameter_declaration          shift and go to state 106
    parameter_type_list            shift and go to state 132
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 113
    abstract_declarator            shift and go to state 130
    declarator                     shift and go to state 56
    storage_class_specifier        shift and go to state 47
    parameter_type_list_opt        shift and go to state 131
    pointer                        shift and go to state 121
    struct_or_union                shift and go to state 8

state 120

    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 85 (init_declarator -> declarator .)
    SEMI            reduce using rule 85 (init_declarator -> declarator .)
    EQUALS          shift and go to state 170


state 121

    (150) abstract_declarator -> pointer .
    (151) abstract_declarator -> pointer . direct_abstract_declarator
    (117) declarator -> pointer . direct_declarator
    (118) declarator -> pointer . TYPEID
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    COMMA           reduce using rule 150 (abstract_declarator -> pointer .)
    SEMI            reduce using rule 150 (abstract_declarator -> pointer .)
    RPAREN          reduce using rule 150 (abstract_declarator -> pointer .)
    TYPEID          shift and go to state 91
    LPAREN          shift and go to state 119
    LBRACKET        shift and go to state 85
    ID              shift and go to state 40

    direct_abstract_declarator     shift and go to state 175
    direct_declarator              shift and go to state 92

state 122

    (114) enumerator -> ID .
    (115) enumerator -> ID . EQUALS constant_expression

    COMMA           reduce using rule 114 (enumerator -> ID .)
    RBRACE          reduce using rule 114 (enumerator -> ID .)
    EQUALS          shift and go to state 232


state 123

    (108) enum_specifier -> ENUM brace_open enumerator_list . brace_close
    (112) enumerator_list -> enumerator_list . COMMA
    (113) enumerator_list -> enumerator_list . COMMA enumerator
    (267) brace_close -> . RBRACE

    COMMA           shift and go to state 233
    RBRACE          shift and go to state 181

    brace_close                    shift and go to state 234

state 124

    (111) enumerator_list -> enumerator .

    COMMA           reduce using rule 111 (enumerator_list -> enumerator .)
    RBRACE          reduce using rule 111 (enumerator_list -> enumerator .)


state 125

    (109) enum_specifier -> ENUM ID brace_open . enumerator_list brace_close
    (111) enumerator_list -> . enumerator
    (112) enumerator_list -> . enumerator_list COMMA
    (113) enumerator_list -> . enumerator_list COMMA enumerator
    (114) enumerator -> . ID
    (115) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 122

    enumerator_list                shift and go to state 235
    enumerator                     shift and go to state 124

state 126

    (110) enum_specifier -> ENUM TYPEID brace_open . enumerator_list brace_close
    (111) enumerator_list -> . enumerator
    (112) enumerator_list -> . enumerator_list COMMA
    (113) enumerator_list -> . enumerator_list COMMA enumerator
    (114) enumerator -> . ID
    (115) enumerator -> . ID EQUALS constant_expression

    ID              shift and go to state 122

    enumerator_list                shift and go to state 236
    enumerator                     shift and go to state 124

state 127

    (158) direct_abstract_declarator -> direct_abstract_declarator LPAREN . parameter_type_list_opt RPAREN
    (21) parameter_type_list_opt -> . empty
    (22) parameter_type_list_opt -> . parameter_type_list
    (268) empty -> .
    (131) parameter_type_list -> . parameter_list
    (132) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (133) parameter_list -> . parameter_declaration
    (134) parameter_list -> . parameter_list COMMA parameter_declaration
    (135) parameter_declaration -> . declaration_specifiers declarator
    (136) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    RPAREN          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 129
    parameter_list                 shift and go to state 109
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    function_specifier             shift and go to state 14
    parameter_type_list            shift and go to state 132
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 113
    parameter_declaration          shift and go to state 106
    storage_class_specifier        shift and go to state 47
    parameter_type_list_opt        shift and go to state 237

state 128

    (154) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> direct_abstract_declarator LBRACKET . TIMES RBRACKET
    (3) assignment_expression_opt -> . empty
    (4) assignment_expression_opt -> . assignment_expression
    (268) empty -> .
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    TIMES           shift and go to state 239
    RBRACKET        reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 134
    assignment_expression          shift and go to state 135
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    identifier                     shift and go to state 156
    assignment_expression_opt      shift and go to state 238
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    unary_expression               shift and go to state 136

state 129

    (21) parameter_type_list_opt -> empty .

    RPAREN          reduce using rule 21 (parameter_type_list_opt -> empty .)


state 130

    (153) direct_abstract_declarator -> LPAREN abstract_declarator . RPAREN

    RPAREN          shift and go to state 240


state 131

    (159) direct_abstract_declarator -> LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 241


state 132

    (22) parameter_type_list_opt -> parameter_type_list .

    RPAREN          reduce using rule 22 (parameter_type_list_opt -> parameter_type_list .)


state 133

    (82) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer

    ID              shift and go to state 40
    LPAREN          shift and go to state 10
    TIMES           shift and go to state 17

    declarator                     shift and go to state 120
    pointer                        shift and go to state 51
    init_declarator                shift and go to state 242
    direct_declarator              shift and go to state 12

state 134

    (3) assignment_expression_opt -> empty .

    RBRACKET        reduce using rule 3 (assignment_expression_opt -> empty .)


state 135

    (4) assignment_expression_opt -> assignment_expression .

    RBRACKET        reduce using rule 4 (assignment_expression_opt -> assignment_expression .)


state 136

    (185) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (219) cast_expression -> unary_expression .
    (186) assignment_operator -> . EQUALS
    (187) assignment_operator -> . XOREQUAL
    (188) assignment_operator -> . TIMESEQUAL
    (189) assignment_operator -> . DIVEQUAL
    (190) assignment_operator -> . MODEQUAL
    (191) assignment_operator -> . PLUSEQUAL
    (192) assignment_operator -> . MINUSEQUAL
    (193) assignment_operator -> . LSHIFTEQUAL
    (194) assignment_operator -> . RSHIFTEQUAL
    (195) assignment_operator -> . ANDEQUAL
    (196) assignment_operator -> . OREQUAL

    CONDOP          reduce using rule 219 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 219 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 219 (cast_expression -> unary_expression .)
    MOD             reduce using rule 219 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 219 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 219 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 219 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 219 (cast_expression -> unary_expression .)
    LT              reduce using rule 219 (cast_expression -> unary_expression .)
    LE              reduce using rule 219 (cast_expression -> unary_expression .)
    GE              reduce using rule 219 (cast_expression -> unary_expression .)
    GT              reduce using rule 219 (cast_expression -> unary_expression .)
    EQ              reduce using rule 219 (cast_expression -> unary_expression .)
    NE              reduce using rule 219 (cast_expression -> unary_expression .)
    AND             reduce using rule 219 (cast_expression -> unary_expression .)
    OR              reduce using rule 219 (cast_expression -> unary_expression .)
    XOR             reduce using rule 219 (cast_expression -> unary_expression .)
    LAND            reduce using rule 219 (cast_expression -> unary_expression .)
    LOR             reduce using rule 219 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 219 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 219 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 219 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 219 (cast_expression -> unary_expression .)
    COLON           reduce using rule 219 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 219 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 251
    XOREQUAL        shift and go to state 246
    TIMESEQUAL      shift and go to state 254
    DIVEQUAL        shift and go to state 253
    MODEQUAL        shift and go to state 243
    PLUSEQUAL       shift and go to state 249
    MINUSEQUAL      shift and go to state 248
    LSHIFTEQUAL     shift and go to state 250
    RSHIFTEQUAL     shift and go to state 245
    ANDEQUAL        shift and go to state 247
    OREQUAL         shift and go to state 244

    assignment_operator            shift and go to state 252

state 137

    (230) unary_operator -> MINUS .

    LPAREN          reduce using rule 230 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 230 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 230 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 230 (unary_operator -> MINUS .)
    AND             reduce using rule 230 (unary_operator -> MINUS .)
    TIMES           reduce using rule 230 (unary_operator -> MINUS .)
    PLUS            reduce using rule 230 (unary_operator -> MINUS .)
    MINUS           reduce using rule 230 (unary_operator -> MINUS .)
    NOT             reduce using rule 230 (unary_operator -> MINUS .)
    LNOT            reduce using rule 230 (unary_operator -> MINUS .)
    OFFSETOF        reduce using rule 230 (unary_operator -> MINUS .)
    ID              reduce using rule 230 (unary_operator -> MINUS .)
    INT_CONST_DEC   reduce using rule 230 (unary_operator -> MINUS .)
    INT_CONST_OCT   reduce using rule 230 (unary_operator -> MINUS .)
    INT_CONST_HEX   reduce using rule 230 (unary_operator -> MINUS .)
    INT_CONST_BIN   reduce using rule 230 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 230 (unary_operator -> MINUS .)
    HEX_FLOAT_CONST reduce using rule 230 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 230 (unary_operator -> MINUS .)
    WCHAR_CONST     reduce using rule 230 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 230 (unary_operator -> MINUS .)
    WSTRING_LITERAL reduce using rule 230 (unary_operator -> MINUS .)


state 138

    (258) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 258 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 258 (constant -> FLOAT_CONST .)
    PERIOD          reduce using rule 258 (constant -> FLOAT_CONST .)
    ARROW           reduce using rule 258 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 258 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 258 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 258 (constant -> FLOAT_CONST .)
    XOREQUAL        reduce using rule 258 (constant -> FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 258 (constant -> FLOAT_CONST .)
    DIVEQUAL        reduce using rule 258 (constant -> FLOAT_CONST .)
    MODEQUAL        reduce using rule 258 (constant -> FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 258 (constant -> FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 258 (constant -> FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 258 (constant -> FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 258 (constant -> FLOAT_CONST .)
    ANDEQUAL        reduce using rule 258 (constant -> FLOAT_CONST .)
    OREQUAL         reduce using rule 258 (constant -> FLOAT_CONST .)
    CONDOP          reduce using rule 258 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 258 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 258 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 258 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 258 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 258 (constant -> FLOAT_CONST .)
    RSHIFT          reduce using rule 258 (constant -> FLOAT_CONST .)
    LSHIFT          reduce using rule 258 (constant -> FLOAT_CONST .)
    LT              reduce using rule 258 (constant -> FLOAT_CONST .)
    LE              reduce using rule 258 (constant -> FLOAT_CONST .)
    GE              reduce using rule 258 (constant -> FLOAT_CONST .)
    GT              reduce using rule 258 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 258 (constant -> FLOAT_CONST .)
    NE              reduce using rule 258 (constant -> FLOAT_CONST .)
    AND             reduce using rule 258 (constant -> FLOAT_CONST .)
    OR              reduce using rule 258 (constant -> FLOAT_CONST .)
    XOR             reduce using rule 258 (constant -> FLOAT_CONST .)
    LAND            reduce using rule 258 (constant -> FLOAT_CONST .)
    LOR             reduce using rule 258 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 258 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 258 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 258 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 258 (constant -> FLOAT_CONST .)
    COLON           reduce using rule 258 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 258 (constant -> FLOAT_CONST .)


state 139

    (200) binary_expression -> cast_expression .

    TIMES           reduce using rule 200 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 200 (binary_expression -> cast_expression .)
    MOD             reduce using rule 200 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 200 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 200 (binary_expression -> cast_expression .)
    RSHIFT          reduce using rule 200 (binary_expression -> cast_expression .)
    LSHIFT          reduce using rule 200 (binary_expression -> cast_expression .)
    LT              reduce using rule 200 (binary_expression -> cast_expression .)
    LE              reduce using rule 200 (binary_expression -> cast_expression .)
    GE              reduce using rule 200 (binary_expression -> cast_expression .)
    GT              reduce using rule 200 (binary_expression -> cast_expression .)
    EQ              reduce using rule 200 (binary_expression -> cast_expression .)
    NE              reduce using rule 200 (binary_expression -> cast_expression .)
    AND             reduce using rule 200 (binary_expression -> cast_expression .)
    OR              reduce using rule 200 (binary_expression -> cast_expression .)
    XOR             reduce using rule 200 (binary_expression -> cast_expression .)
    LAND            reduce using rule 200 (binary_expression -> cast_expression .)
    LOR             reduce using rule 200 (binary_expression -> cast_expression .)
    CONDOP          reduce using rule 200 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 200 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 200 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 200 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 200 (binary_expression -> cast_expression .)
    COLON           reduce using rule 200 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 200 (binary_expression -> cast_expression .)


state 140

    (243) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (220) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (249) primary_expression -> LPAREN . expression RPAREN
    (149) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    identifier                     shift and go to state 156
    type_name                      shift and go to state 256
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 255
    type_qualifier                 shift and go to state 95
    typedef_name                   shift and go to state 11
    enum_specifier                 shift and go to state 33
    struct_or_union_specifier      shift and go to state 36
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    type_specifier                 shift and go to state 96
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    specifier_qualifier_list       shift and go to state 257
    struct_or_union                shift and go to state 8

state 141

    (231) unary_operator -> NOT .

    LPAREN          reduce using rule 231 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 231 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 231 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 231 (unary_operator -> NOT .)
    AND             reduce using rule 231 (unary_operator -> NOT .)
    TIMES           reduce using rule 231 (unary_operator -> NOT .)
    PLUS            reduce using rule 231 (unary_operator -> NOT .)
    MINUS           reduce using rule 231 (unary_operator -> NOT .)
    NOT             reduce using rule 231 (unary_operator -> NOT .)
    LNOT            reduce using rule 231 (unary_operator -> NOT .)
    OFFSETOF        reduce using rule 231 (unary_operator -> NOT .)
    ID              reduce using rule 231 (unary_operator -> NOT .)
    INT_CONST_DEC   reduce using rule 231 (unary_operator -> NOT .)
    INT_CONST_OCT   reduce using rule 231 (unary_operator -> NOT .)
    INT_CONST_HEX   reduce using rule 231 (unary_operator -> NOT .)
    INT_CONST_BIN   reduce using rule 231 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 231 (unary_operator -> NOT .)
    HEX_FLOAT_CONST reduce using rule 231 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 231 (unary_operator -> NOT .)
    WCHAR_CONST     reduce using rule 231 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 231 (unary_operator -> NOT .)
    WSTRING_LITERAL reduce using rule 231 (unary_operator -> NOT .)


state 142

    (155) direct_abstract_declarator -> LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 258


state 143

    (157) direct_abstract_declarator -> LBRACKET TIMES . RBRACKET
    (228) unary_operator -> TIMES .

    RBRACKET        shift and go to state 259
    LPAREN          reduce using rule 228 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 228 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 228 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 228 (unary_operator -> TIMES .)
    AND             reduce using rule 228 (unary_operator -> TIMES .)
    TIMES           reduce using rule 228 (unary_operator -> TIMES .)
    PLUS            reduce using rule 228 (unary_operator -> TIMES .)
    MINUS           reduce using rule 228 (unary_operator -> TIMES .)
    NOT             reduce using rule 228 (unary_operator -> TIMES .)
    LNOT            reduce using rule 228 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 228 (unary_operator -> TIMES .)
    ID              reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 228 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 228 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 228 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 228 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 228 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 228 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 228 (unary_operator -> TIMES .)


state 144

    (264) unified_wstring_literal -> WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    LBRACKET        reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    LPAREN          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    PERIOD          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    ARROW           reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQUALS          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    OREQUAL         reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    CONDOP          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    TIMES           reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    DIVIDE          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    MOD             reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    PLUS            reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    MINUS           reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    RSHIFT          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    LSHIFT          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    LT              reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    LE              reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    GE              reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    GT              reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    EQ              reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    NE              reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    AND             reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    OR              reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    XOR             reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    LAND            reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    LOR             reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    COMMA           reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    SEMI            reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACE          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    RBRACKET        reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    RPAREN          reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)
    COLON           reduce using rule 264 (unified_wstring_literal -> WSTRING_LITERAL .)


state 145

    (260) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 260 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 260 (constant -> CHAR_CONST .)
    PERIOD          reduce using rule 260 (constant -> CHAR_CONST .)
    ARROW           reduce using rule 260 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 260 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 260 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 260 (constant -> CHAR_CONST .)
    XOREQUAL        reduce using rule 260 (constant -> CHAR_CONST .)
    TIMESEQUAL      reduce using rule 260 (constant -> CHAR_CONST .)
    DIVEQUAL        reduce using rule 260 (constant -> CHAR_CONST .)
    MODEQUAL        reduce using rule 260 (constant -> CHAR_CONST .)
    PLUSEQUAL       reduce using rule 260 (constant -> CHAR_CONST .)
    MINUSEQUAL      reduce using rule 260 (constant -> CHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 260 (constant -> CHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 260 (constant -> CHAR_CONST .)
    ANDEQUAL        reduce using rule 260 (constant -> CHAR_CONST .)
    OREQUAL         reduce using rule 260 (constant -> CHAR_CONST .)
    CONDOP          reduce using rule 260 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 260 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 260 (constant -> CHAR_CONST .)
    MOD             reduce using rule 260 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 260 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 260 (constant -> CHAR_CONST .)
    RSHIFT          reduce using rule 260 (constant -> CHAR_CONST .)
    LSHIFT          reduce using rule 260 (constant -> CHAR_CONST .)
    LT              reduce using rule 260 (constant -> CHAR_CONST .)
    LE              reduce using rule 260 (constant -> CHAR_CONST .)
    GE              reduce using rule 260 (constant -> CHAR_CONST .)
    GT              reduce using rule 260 (constant -> CHAR_CONST .)
    EQ              reduce using rule 260 (constant -> CHAR_CONST .)
    NE              reduce using rule 260 (constant -> CHAR_CONST .)
    AND             reduce using rule 260 (constant -> CHAR_CONST .)
    OR              reduce using rule 260 (constant -> CHAR_CONST .)
    XOR             reduce using rule 260 (constant -> CHAR_CONST .)
    LAND            reduce using rule 260 (constant -> CHAR_CONST .)
    LOR             reduce using rule 260 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 260 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 260 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 260 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 260 (constant -> CHAR_CONST .)
    COLON           reduce using rule 260 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 260 (constant -> CHAR_CONST .)


state 146

    (246) primary_expression -> constant .

    LBRACKET        reduce using rule 246 (primary_expression -> constant .)
    LPAREN          reduce using rule 246 (primary_expression -> constant .)
    PERIOD          reduce using rule 246 (primary_expression -> constant .)
    ARROW           reduce using rule 246 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 246 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 246 (primary_expression -> constant .)
    EQUALS          reduce using rule 246 (primary_expression -> constant .)
    XOREQUAL        reduce using rule 246 (primary_expression -> constant .)
    TIMESEQUAL      reduce using rule 246 (primary_expression -> constant .)
    DIVEQUAL        reduce using rule 246 (primary_expression -> constant .)
    MODEQUAL        reduce using rule 246 (primary_expression -> constant .)
    PLUSEQUAL       reduce using rule 246 (primary_expression -> constant .)
    MINUSEQUAL      reduce using rule 246 (primary_expression -> constant .)
    LSHIFTEQUAL     reduce using rule 246 (primary_expression -> constant .)
    RSHIFTEQUAL     reduce using rule 246 (primary_expression -> constant .)
    ANDEQUAL        reduce using rule 246 (primary_expression -> constant .)
    OREQUAL         reduce using rule 246 (primary_expression -> constant .)
    CONDOP          reduce using rule 246 (primary_expression -> constant .)
    TIMES           reduce using rule 246 (primary_expression -> constant .)
    DIVIDE          reduce using rule 246 (primary_expression -> constant .)
    MOD             reduce using rule 246 (primary_expression -> constant .)
    PLUS            reduce using rule 246 (primary_expression -> constant .)
    MINUS           reduce using rule 246 (primary_expression -> constant .)
    RSHIFT          reduce using rule 246 (primary_expression -> constant .)
    LSHIFT          reduce using rule 246 (primary_expression -> constant .)
    LT              reduce using rule 246 (primary_expression -> constant .)
    LE              reduce using rule 246 (primary_expression -> constant .)
    GE              reduce using rule 246 (primary_expression -> constant .)
    GT              reduce using rule 246 (primary_expression -> constant .)
    EQ              reduce using rule 246 (primary_expression -> constant .)
    NE              reduce using rule 246 (primary_expression -> constant .)
    AND             reduce using rule 246 (primary_expression -> constant .)
    OR              reduce using rule 246 (primary_expression -> constant .)
    XOR             reduce using rule 246 (primary_expression -> constant .)
    LAND            reduce using rule 246 (primary_expression -> constant .)
    LOR             reduce using rule 246 (primary_expression -> constant .)
    RPAREN          reduce using rule 246 (primary_expression -> constant .)
    COMMA           reduce using rule 246 (primary_expression -> constant .)
    RBRACKET        reduce using rule 246 (primary_expression -> constant .)
    SEMI            reduce using rule 246 (primary_expression -> constant .)
    COLON           reduce using rule 246 (primary_expression -> constant .)
    RBRACE          reduce using rule 246 (primary_expression -> constant .)


state 147

    (221) unary_expression -> postfix_expression .
    (234) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (235) postfix_expression -> postfix_expression . LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> postfix_expression . LPAREN RPAREN
    (237) postfix_expression -> postfix_expression . PERIOD ID
    (238) postfix_expression -> postfix_expression . PERIOD TYPEID
    (239) postfix_expression -> postfix_expression . ARROW ID
    (240) postfix_expression -> postfix_expression . ARROW TYPEID
    (241) postfix_expression -> postfix_expression . PLUSPLUS
    (242) postfix_expression -> postfix_expression . MINUSMINUS

    EQUALS          reduce using rule 221 (unary_expression -> postfix_expression .)
    XOREQUAL        reduce using rule 221 (unary_expression -> postfix_expression .)
    TIMESEQUAL      reduce using rule 221 (unary_expression -> postfix_expression .)
    DIVEQUAL        reduce using rule 221 (unary_expression -> postfix_expression .)
    MODEQUAL        reduce using rule 221 (unary_expression -> postfix_expression .)
    PLUSEQUAL       reduce using rule 221 (unary_expression -> postfix_expression .)
    MINUSEQUAL      reduce using rule 221 (unary_expression -> postfix_expression .)
    LSHIFTEQUAL     reduce using rule 221 (unary_expression -> postfix_expression .)
    RSHIFTEQUAL     reduce using rule 221 (unary_expression -> postfix_expression .)
    ANDEQUAL        reduce using rule 221 (unary_expression -> postfix_expression .)
    OREQUAL         reduce using rule 221 (unary_expression -> postfix_expression .)
    CONDOP          reduce using rule 221 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 221 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 221 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 221 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 221 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 221 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 221 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 221 (unary_expression -> postfix_expression .)
    LT              reduce using rule 221 (unary_expression -> postfix_expression .)
    LE              reduce using rule 221 (unary_expression -> postfix_expression .)
    GE              reduce using rule 221 (unary_expression -> postfix_expression .)
    GT              reduce using rule 221 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 221 (unary_expression -> postfix_expression .)
    NE              reduce using rule 221 (unary_expression -> postfix_expression .)
    AND             reduce using rule 221 (unary_expression -> postfix_expression .)
    OR              reduce using rule 221 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 221 (unary_expression -> postfix_expression .)
    LAND            reduce using rule 221 (unary_expression -> postfix_expression .)
    LOR             reduce using rule 221 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 221 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 221 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 221 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 221 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 221 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 221 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 260
    LPAREN          shift and go to state 263
    PERIOD          shift and go to state 262
    ARROW           shift and go to state 265
    PLUSPLUS        shift and go to state 261
    MINUSMINUS      shift and go to state 264


state 148

    (254) constant -> INT_CONST_DEC .

    LBRACKET        reduce using rule 254 (constant -> INT_CONST_DEC .)
    LPAREN          reduce using rule 254 (constant -> INT_CONST_DEC .)
    PERIOD          reduce using rule 254 (constant -> INT_CONST_DEC .)
    ARROW           reduce using rule 254 (constant -> INT_CONST_DEC .)
    PLUSPLUS        reduce using rule 254 (constant -> INT_CONST_DEC .)
    MINUSMINUS      reduce using rule 254 (constant -> INT_CONST_DEC .)
    EQUALS          reduce using rule 254 (constant -> INT_CONST_DEC .)
    XOREQUAL        reduce using rule 254 (constant -> INT_CONST_DEC .)
    TIMESEQUAL      reduce using rule 254 (constant -> INT_CONST_DEC .)
    DIVEQUAL        reduce using rule 254 (constant -> INT_CONST_DEC .)
    MODEQUAL        reduce using rule 254 (constant -> INT_CONST_DEC .)
    PLUSEQUAL       reduce using rule 254 (constant -> INT_CONST_DEC .)
    MINUSEQUAL      reduce using rule 254 (constant -> INT_CONST_DEC .)
    LSHIFTEQUAL     reduce using rule 254 (constant -> INT_CONST_DEC .)
    RSHIFTEQUAL     reduce using rule 254 (constant -> INT_CONST_DEC .)
    ANDEQUAL        reduce using rule 254 (constant -> INT_CONST_DEC .)
    OREQUAL         reduce using rule 254 (constant -> INT_CONST_DEC .)
    CONDOP          reduce using rule 254 (constant -> INT_CONST_DEC .)
    TIMES           reduce using rule 254 (constant -> INT_CONST_DEC .)
    DIVIDE          reduce using rule 254 (constant -> INT_CONST_DEC .)
    MOD             reduce using rule 254 (constant -> INT_CONST_DEC .)
    PLUS            reduce using rule 254 (constant -> INT_CONST_DEC .)
    MINUS           reduce using rule 254 (constant -> INT_CONST_DEC .)
    RSHIFT          reduce using rule 254 (constant -> INT_CONST_DEC .)
    LSHIFT          reduce using rule 254 (constant -> INT_CONST_DEC .)
    LT              reduce using rule 254 (constant -> INT_CONST_DEC .)
    LE              reduce using rule 254 (constant -> INT_CONST_DEC .)
    GE              reduce using rule 254 (constant -> INT_CONST_DEC .)
    GT              reduce using rule 254 (constant -> INT_CONST_DEC .)
    EQ              reduce using rule 254 (constant -> INT_CONST_DEC .)
    NE              reduce using rule 254 (constant -> INT_CONST_DEC .)
    AND             reduce using rule 254 (constant -> INT_CONST_DEC .)
    OR              reduce using rule 254 (constant -> INT_CONST_DEC .)
    XOR             reduce using rule 254 (constant -> INT_CONST_DEC .)
    LAND            reduce using rule 254 (constant -> INT_CONST_DEC .)
    LOR             reduce using rule 254 (constant -> INT_CONST_DEC .)
    COMMA           reduce using rule 254 (constant -> INT_CONST_DEC .)
    SEMI            reduce using rule 254 (constant -> INT_CONST_DEC .)
    RPAREN          reduce using rule 254 (constant -> INT_CONST_DEC .)
    RBRACKET        reduce using rule 254 (constant -> INT_CONST_DEC .)
    COLON           reduce using rule 254 (constant -> INT_CONST_DEC .)
    RBRACE          reduce using rule 254 (constant -> INT_CONST_DEC .)


state 149

    (224) unary_expression -> unary_operator . cast_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unified_wstring_literal        shift and go to state 154
    cast_expression                shift and go to state 267
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147
    unary_expression               shift and go to state 266

state 150

    (247) primary_expression -> unified_string_literal .
    (263) unified_string_literal -> unified_string_literal . STRING_LITERAL

    LBRACKET        reduce using rule 247 (primary_expression -> unified_string_literal .)
    LPAREN          reduce using rule 247 (primary_expression -> unified_string_literal .)
    PERIOD          reduce using rule 247 (primary_expression -> unified_string_literal .)
    ARROW           reduce using rule 247 (primary_expression -> unified_string_literal .)
    PLUSPLUS        reduce using rule 247 (primary_expression -> unified_string_literal .)
    MINUSMINUS      reduce using rule 247 (primary_expression -> unified_string_literal .)
    EQUALS          reduce using rule 247 (primary_expression -> unified_string_literal .)
    XOREQUAL        reduce using rule 247 (primary_expression -> unified_string_literal .)
    TIMESEQUAL      reduce using rule 247 (primary_expression -> unified_string_literal .)
    DIVEQUAL        reduce using rule 247 (primary_expression -> unified_string_literal .)
    MODEQUAL        reduce using rule 247 (primary_expression -> unified_string_literal .)
    PLUSEQUAL       reduce using rule 247 (primary_expression -> unified_string_literal .)
    MINUSEQUAL      reduce using rule 247 (primary_expression -> unified_string_literal .)
    LSHIFTEQUAL     reduce using rule 247 (primary_expression -> unified_string_literal .)
    RSHIFTEQUAL     reduce using rule 247 (primary_expression -> unified_string_literal .)
    ANDEQUAL        reduce using rule 247 (primary_expression -> unified_string_literal .)
    OREQUAL         reduce using rule 247 (primary_expression -> unified_string_literal .)
    CONDOP          reduce using rule 247 (primary_expression -> unified_string_literal .)
    TIMES           reduce using rule 247 (primary_expression -> unified_string_literal .)
    DIVIDE          reduce using rule 247 (primary_expression -> unified_string_literal .)
    MOD             reduce using rule 247 (primary_expression -> unified_string_literal .)
    PLUS            reduce using rule 247 (primary_expression -> unified_string_literal .)
    MINUS           reduce using rule 247 (primary_expression -> unified_string_literal .)
    RSHIFT          reduce using rule 247 (primary_expression -> unified_string_literal .)
    LSHIFT          reduce using rule 247 (primary_expression -> unified_string_literal .)
    LT              reduce using rule 247 (primary_expression -> unified_string_literal .)
    LE              reduce using rule 247 (primary_expression -> unified_string_literal .)
    GE              reduce using rule 247 (primary_expression -> unified_string_literal .)
    GT              reduce using rule 247 (primary_expression -> unified_string_literal .)
    EQ              reduce using rule 247 (primary_expression -> unified_string_literal .)
    NE              reduce using rule 247 (primary_expression -> unified_string_literal .)
    AND             reduce using rule 247 (primary_expression -> unified_string_literal .)
    OR              reduce using rule 247 (primary_expression -> unified_string_literal .)
    XOR             reduce using rule 247 (primary_expression -> unified_string_literal .)
    LAND            reduce using rule 247 (primary_expression -> unified_string_literal .)
    LOR             reduce using rule 247 (primary_expression -> unified_string_literal .)
    RPAREN          reduce using rule 247 (primary_expression -> unified_string_literal .)
    COMMA           reduce using rule 247 (primary_expression -> unified_string_literal .)
    RBRACKET        reduce using rule 247 (primary_expression -> unified_string_literal .)
    SEMI            reduce using rule 247 (primary_expression -> unified_string_literal .)
    COLON           reduce using rule 247 (primary_expression -> unified_string_literal .)
    RBRACE          reduce using rule 247 (primary_expression -> unified_string_literal .)
    STRING_LITERAL  shift and go to state 269


state 151

    (225) unary_expression -> SIZEOF . unary_expression
    (226) unary_expression -> SIZEOF . LPAREN type_name RPAREN
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 271
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unified_wstring_literal        shift and go to state 154
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147
    unary_expression               shift and go to state 270

state 152

    (222) unary_expression -> PLUSPLUS . unary_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 273
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unified_wstring_literal        shift and go to state 154
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147
    unary_expression               shift and go to state 272

state 153

    (198) conditional_expression -> binary_expression .
    (199) conditional_expression -> binary_expression . CONDOP expression COLON conditional_expression
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    COLON           reduce using rule 198 (conditional_expression -> binary_expression .)
    COMMA           reduce using rule 198 (conditional_expression -> binary_expression .)
    RBRACKET        reduce using rule 198 (conditional_expression -> binary_expression .)
    SEMI            reduce using rule 198 (conditional_expression -> binary_expression .)
    RPAREN          reduce using rule 198 (conditional_expression -> binary_expression .)
    RBRACE          reduce using rule 198 (conditional_expression -> binary_expression .)
    CONDOP          shift and go to state 289
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287
    LT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 274
    GT              shift and go to state 284
    EQ              shift and go to state 277
    NE              shift and go to state 288
    AND             shift and go to state 281
    OR              shift and go to state 292
    XOR             shift and go to state 280
    LAND            shift and go to state 279
    LOR             shift and go to state 282


state 154

    (248) primary_expression -> unified_wstring_literal .
    (265) unified_wstring_literal -> unified_wstring_literal . WSTRING_LITERAL

    LBRACKET        reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    LPAREN          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    PERIOD          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    ARROW           reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    PLUSPLUS        reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    MINUSMINUS      reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    EQUALS          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    XOREQUAL        reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    TIMESEQUAL      reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    DIVEQUAL        reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    MODEQUAL        reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    PLUSEQUAL       reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    MINUSEQUAL      reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    LSHIFTEQUAL     reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    RSHIFTEQUAL     reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    ANDEQUAL        reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    OREQUAL         reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    CONDOP          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    TIMES           reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    DIVIDE          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    MOD             reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    PLUS            reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    MINUS           reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    RSHIFT          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    LSHIFT          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    LT              reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    LE              reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    GE              reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    GT              reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    EQ              reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    NE              reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    AND             reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    OR              reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    XOR             reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    LAND            reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    LOR             reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    RPAREN          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    COMMA           reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    RBRACKET        reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    SEMI            reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    COLON           reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    RBRACE          reduce using rule 248 (primary_expression -> unified_wstring_literal .)
    WSTRING_LITERAL shift and go to state 293


state 155

    (259) constant -> HEX_FLOAT_CONST .

    LBRACKET        reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    LPAREN          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    PERIOD          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    ARROW           reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    PLUSPLUS        reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    MINUSMINUS      reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    EQUALS          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    XOREQUAL        reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    TIMESEQUAL      reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    DIVEQUAL        reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    MODEQUAL        reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    PLUSEQUAL       reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    MINUSEQUAL      reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    LSHIFTEQUAL     reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    RSHIFTEQUAL     reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    ANDEQUAL        reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    OREQUAL         reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    CONDOP          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    TIMES           reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    DIVIDE          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    MOD             reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    PLUS            reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    MINUS           reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    RSHIFT          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    LSHIFT          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    LT              reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    LE              reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    GE              reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    GT              reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    EQ              reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    NE              reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    AND             reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    OR              reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    XOR             reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    LAND            reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    LOR             reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    COMMA           reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    SEMI            reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    RPAREN          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    RBRACKET        reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    COLON           reduce using rule 259 (constant -> HEX_FLOAT_CONST .)
    RBRACE          reduce using rule 259 (constant -> HEX_FLOAT_CONST .)


state 156

    (245) primary_expression -> identifier .

    LBRACKET        reduce using rule 245 (primary_expression -> identifier .)
    LPAREN          reduce using rule 245 (primary_expression -> identifier .)
    PERIOD          reduce using rule 245 (primary_expression -> identifier .)
    ARROW           reduce using rule 245 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 245 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 245 (primary_expression -> identifier .)
    EQUALS          reduce using rule 245 (primary_expression -> identifier .)
    XOREQUAL        reduce using rule 245 (primary_expression -> identifier .)
    TIMESEQUAL      reduce using rule 245 (primary_expression -> identifier .)
    DIVEQUAL        reduce using rule 245 (primary_expression -> identifier .)
    MODEQUAL        reduce using rule 245 (primary_expression -> identifier .)
    PLUSEQUAL       reduce using rule 245 (primary_expression -> identifier .)
    MINUSEQUAL      reduce using rule 245 (primary_expression -> identifier .)
    LSHIFTEQUAL     reduce using rule 245 (primary_expression -> identifier .)
    RSHIFTEQUAL     reduce using rule 245 (primary_expression -> identifier .)
    ANDEQUAL        reduce using rule 245 (primary_expression -> identifier .)
    OREQUAL         reduce using rule 245 (primary_expression -> identifier .)
    CONDOP          reduce using rule 245 (primary_expression -> identifier .)
    TIMES           reduce using rule 245 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 245 (primary_expression -> identifier .)
    MOD             reduce using rule 245 (primary_expression -> identifier .)
    PLUS            reduce using rule 245 (primary_expression -> identifier .)
    MINUS           reduce using rule 245 (primary_expression -> identifier .)
    RSHIFT          reduce using rule 245 (primary_expression -> identifier .)
    LSHIFT          reduce using rule 245 (primary_expression -> identifier .)
    LT              reduce using rule 245 (primary_expression -> identifier .)
    LE              reduce using rule 245 (primary_expression -> identifier .)
    GE              reduce using rule 245 (primary_expression -> identifier .)
    GT              reduce using rule 245 (primary_expression -> identifier .)
    EQ              reduce using rule 245 (primary_expression -> identifier .)
    NE              reduce using rule 245 (primary_expression -> identifier .)
    AND             reduce using rule 245 (primary_expression -> identifier .)
    OR              reduce using rule 245 (primary_expression -> identifier .)
    XOR             reduce using rule 245 (primary_expression -> identifier .)
    LAND            reduce using rule 245 (primary_expression -> identifier .)
    LOR             reduce using rule 245 (primary_expression -> identifier .)
    RPAREN          reduce using rule 245 (primary_expression -> identifier .)
    COMMA           reduce using rule 245 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 245 (primary_expression -> identifier .)
    SEMI            reduce using rule 245 (primary_expression -> identifier .)
    COLON           reduce using rule 245 (primary_expression -> identifier .)
    RBRACE          reduce using rule 245 (primary_expression -> identifier .)


state 157

    (227) unary_operator -> AND .

    LPAREN          reduce using rule 227 (unary_operator -> AND .)
    PLUSPLUS        reduce using rule 227 (unary_operator -> AND .)
    MINUSMINUS      reduce using rule 227 (unary_operator -> AND .)
    SIZEOF          reduce using rule 227 (unary_operator -> AND .)
    AND             reduce using rule 227 (unary_operator -> AND .)
    TIMES           reduce using rule 227 (unary_operator -> AND .)
    PLUS            reduce using rule 227 (unary_operator -> AND .)
    MINUS           reduce using rule 227 (unary_operator -> AND .)
    NOT             reduce using rule 227 (unary_operator -> AND .)
    LNOT            reduce using rule 227 (unary_operator -> AND .)
    OFFSETOF        reduce using rule 227 (unary_operator -> AND .)
    ID              reduce using rule 227 (unary_operator -> AND .)
    INT_CONST_DEC   reduce using rule 227 (unary_operator -> AND .)
    INT_CONST_OCT   reduce using rule 227 (unary_operator -> AND .)
    INT_CONST_HEX   reduce using rule 227 (unary_operator -> AND .)
    INT_CONST_BIN   reduce using rule 227 (unary_operator -> AND .)
    FLOAT_CONST     reduce using rule 227 (unary_operator -> AND .)
    HEX_FLOAT_CONST reduce using rule 227 (unary_operator -> AND .)
    CHAR_CONST      reduce using rule 227 (unary_operator -> AND .)
    WCHAR_CONST     reduce using rule 227 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 227 (unary_operator -> AND .)
    WSTRING_LITERAL reduce using rule 227 (unary_operator -> AND .)


state 158

    (232) unary_operator -> LNOT .

    LPAREN          reduce using rule 232 (unary_operator -> LNOT .)
    PLUSPLUS        reduce using rule 232 (unary_operator -> LNOT .)
    MINUSMINUS      reduce using rule 232 (unary_operator -> LNOT .)
    SIZEOF          reduce using rule 232 (unary_operator -> LNOT .)
    AND             reduce using rule 232 (unary_operator -> LNOT .)
    TIMES           reduce using rule 232 (unary_operator -> LNOT .)
    PLUS            reduce using rule 232 (unary_operator -> LNOT .)
    MINUS           reduce using rule 232 (unary_operator -> LNOT .)
    NOT             reduce using rule 232 (unary_operator -> LNOT .)
    LNOT            reduce using rule 232 (unary_operator -> LNOT .)
    OFFSETOF        reduce using rule 232 (unary_operator -> LNOT .)
    ID              reduce using rule 232 (unary_operator -> LNOT .)
    INT_CONST_DEC   reduce using rule 232 (unary_operator -> LNOT .)
    INT_CONST_OCT   reduce using rule 232 (unary_operator -> LNOT .)
    INT_CONST_HEX   reduce using rule 232 (unary_operator -> LNOT .)
    INT_CONST_BIN   reduce using rule 232 (unary_operator -> LNOT .)
    FLOAT_CONST     reduce using rule 232 (unary_operator -> LNOT .)
    HEX_FLOAT_CONST reduce using rule 232 (unary_operator -> LNOT .)
    CHAR_CONST      reduce using rule 232 (unary_operator -> LNOT .)
    WCHAR_CONST     reduce using rule 232 (unary_operator -> LNOT .)
    STRING_LITERAL  reduce using rule 232 (unary_operator -> LNOT .)
    WSTRING_LITERAL reduce using rule 232 (unary_operator -> LNOT .)


state 159

    (257) constant -> INT_CONST_BIN .

    LBRACKET        reduce using rule 257 (constant -> INT_CONST_BIN .)
    LPAREN          reduce using rule 257 (constant -> INT_CONST_BIN .)
    PERIOD          reduce using rule 257 (constant -> INT_CONST_BIN .)
    ARROW           reduce using rule 257 (constant -> INT_CONST_BIN .)
    PLUSPLUS        reduce using rule 257 (constant -> INT_CONST_BIN .)
    MINUSMINUS      reduce using rule 257 (constant -> INT_CONST_BIN .)
    EQUALS          reduce using rule 257 (constant -> INT_CONST_BIN .)
    XOREQUAL        reduce using rule 257 (constant -> INT_CONST_BIN .)
    TIMESEQUAL      reduce using rule 257 (constant -> INT_CONST_BIN .)
    DIVEQUAL        reduce using rule 257 (constant -> INT_CONST_BIN .)
    MODEQUAL        reduce using rule 257 (constant -> INT_CONST_BIN .)
    PLUSEQUAL       reduce using rule 257 (constant -> INT_CONST_BIN .)
    MINUSEQUAL      reduce using rule 257 (constant -> INT_CONST_BIN .)
    LSHIFTEQUAL     reduce using rule 257 (constant -> INT_CONST_BIN .)
    RSHIFTEQUAL     reduce using rule 257 (constant -> INT_CONST_BIN .)
    ANDEQUAL        reduce using rule 257 (constant -> INT_CONST_BIN .)
    OREQUAL         reduce using rule 257 (constant -> INT_CONST_BIN .)
    CONDOP          reduce using rule 257 (constant -> INT_CONST_BIN .)
    TIMES           reduce using rule 257 (constant -> INT_CONST_BIN .)
    DIVIDE          reduce using rule 257 (constant -> INT_CONST_BIN .)
    MOD             reduce using rule 257 (constant -> INT_CONST_BIN .)
    PLUS            reduce using rule 257 (constant -> INT_CONST_BIN .)
    MINUS           reduce using rule 257 (constant -> INT_CONST_BIN .)
    RSHIFT          reduce using rule 257 (constant -> INT_CONST_BIN .)
    LSHIFT          reduce using rule 257 (constant -> INT_CONST_BIN .)
    LT              reduce using rule 257 (constant -> INT_CONST_BIN .)
    LE              reduce using rule 257 (constant -> INT_CONST_BIN .)
    GE              reduce using rule 257 (constant -> INT_CONST_BIN .)
    GT              reduce using rule 257 (constant -> INT_CONST_BIN .)
    EQ              reduce using rule 257 (constant -> INT_CONST_BIN .)
    NE              reduce using rule 257 (constant -> INT_CONST_BIN .)
    AND             reduce using rule 257 (constant -> INT_CONST_BIN .)
    OR              reduce using rule 257 (constant -> INT_CONST_BIN .)
    XOR             reduce using rule 257 (constant -> INT_CONST_BIN .)
    LAND            reduce using rule 257 (constant -> INT_CONST_BIN .)
    LOR             reduce using rule 257 (constant -> INT_CONST_BIN .)
    COMMA           reduce using rule 257 (constant -> INT_CONST_BIN .)
    SEMI            reduce using rule 257 (constant -> INT_CONST_BIN .)
    RPAREN          reduce using rule 257 (constant -> INT_CONST_BIN .)
    RBRACKET        reduce using rule 257 (constant -> INT_CONST_BIN .)
    COLON           reduce using rule 257 (constant -> INT_CONST_BIN .)
    RBRACE          reduce using rule 257 (constant -> INT_CONST_BIN .)


state 160

    (255) constant -> INT_CONST_OCT .

    LBRACKET        reduce using rule 255 (constant -> INT_CONST_OCT .)
    LPAREN          reduce using rule 255 (constant -> INT_CONST_OCT .)
    PERIOD          reduce using rule 255 (constant -> INT_CONST_OCT .)
    ARROW           reduce using rule 255 (constant -> INT_CONST_OCT .)
    PLUSPLUS        reduce using rule 255 (constant -> INT_CONST_OCT .)
    MINUSMINUS      reduce using rule 255 (constant -> INT_CONST_OCT .)
    EQUALS          reduce using rule 255 (constant -> INT_CONST_OCT .)
    XOREQUAL        reduce using rule 255 (constant -> INT_CONST_OCT .)
    TIMESEQUAL      reduce using rule 255 (constant -> INT_CONST_OCT .)
    DIVEQUAL        reduce using rule 255 (constant -> INT_CONST_OCT .)
    MODEQUAL        reduce using rule 255 (constant -> INT_CONST_OCT .)
    PLUSEQUAL       reduce using rule 255 (constant -> INT_CONST_OCT .)
    MINUSEQUAL      reduce using rule 255 (constant -> INT_CONST_OCT .)
    LSHIFTEQUAL     reduce using rule 255 (constant -> INT_CONST_OCT .)
    RSHIFTEQUAL     reduce using rule 255 (constant -> INT_CONST_OCT .)
    ANDEQUAL        reduce using rule 255 (constant -> INT_CONST_OCT .)
    OREQUAL         reduce using rule 255 (constant -> INT_CONST_OCT .)
    CONDOP          reduce using rule 255 (constant -> INT_CONST_OCT .)
    TIMES           reduce using rule 255 (constant -> INT_CONST_OCT .)
    DIVIDE          reduce using rule 255 (constant -> INT_CONST_OCT .)
    MOD             reduce using rule 255 (constant -> INT_CONST_OCT .)
    PLUS            reduce using rule 255 (constant -> INT_CONST_OCT .)
    MINUS           reduce using rule 255 (constant -> INT_CONST_OCT .)
    RSHIFT          reduce using rule 255 (constant -> INT_CONST_OCT .)
    LSHIFT          reduce using rule 255 (constant -> INT_CONST_OCT .)
    LT              reduce using rule 255 (constant -> INT_CONST_OCT .)
    LE              reduce using rule 255 (constant -> INT_CONST_OCT .)
    GE              reduce using rule 255 (constant -> INT_CONST_OCT .)
    GT              reduce using rule 255 (constant -> INT_CONST_OCT .)
    EQ              reduce using rule 255 (constant -> INT_CONST_OCT .)
    NE              reduce using rule 255 (constant -> INT_CONST_OCT .)
    AND             reduce using rule 255 (constant -> INT_CONST_OCT .)
    OR              reduce using rule 255 (constant -> INT_CONST_OCT .)
    XOR             reduce using rule 255 (constant -> INT_CONST_OCT .)
    LAND            reduce using rule 255 (constant -> INT_CONST_OCT .)
    LOR             reduce using rule 255 (constant -> INT_CONST_OCT .)
    COMMA           reduce using rule 255 (constant -> INT_CONST_OCT .)
    SEMI            reduce using rule 255 (constant -> INT_CONST_OCT .)
    RPAREN          reduce using rule 255 (constant -> INT_CONST_OCT .)
    RBRACKET        reduce using rule 255 (constant -> INT_CONST_OCT .)
    COLON           reduce using rule 255 (constant -> INT_CONST_OCT .)
    RBRACE          reduce using rule 255 (constant -> INT_CONST_OCT .)


state 161

    (223) unary_expression -> MINUSMINUS . unary_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 273
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unified_wstring_literal        shift and go to state 154
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147
    unary_expression               shift and go to state 294

state 162

    (250) primary_expression -> OFFSETOF . LPAREN type_name COMMA identifier RPAREN

    LPAREN          shift and go to state 295


state 163

    (233) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 233 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 233 (postfix_expression -> primary_expression .)
    PERIOD          reduce using rule 233 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 233 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 233 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 233 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 233 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 233 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 233 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 233 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 233 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 233 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 233 (postfix_expression -> primary_expression .)
    LT              reduce using rule 233 (postfix_expression -> primary_expression .)
    LE              reduce using rule 233 (postfix_expression -> primary_expression .)
    GE              reduce using rule 233 (postfix_expression -> primary_expression .)
    GT              reduce using rule 233 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 233 (postfix_expression -> primary_expression .)
    NE              reduce using rule 233 (postfix_expression -> primary_expression .)
    AND             reduce using rule 233 (postfix_expression -> primary_expression .)
    OR              reduce using rule 233 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 233 (postfix_expression -> primary_expression .)
    LAND            reduce using rule 233 (postfix_expression -> primary_expression .)
    LOR             reduce using rule 233 (postfix_expression -> primary_expression .)
    CONDOP          reduce using rule 233 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 233 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 233 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 233 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 233 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 233 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 233 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 233 (postfix_expression -> primary_expression .)
    XOREQUAL        reduce using rule 233 (postfix_expression -> primary_expression .)
    TIMESEQUAL      reduce using rule 233 (postfix_expression -> primary_expression .)
    DIVEQUAL        reduce using rule 233 (postfix_expression -> primary_expression .)
    MODEQUAL        reduce using rule 233 (postfix_expression -> primary_expression .)
    PLUSEQUAL       reduce using rule 233 (postfix_expression -> primary_expression .)
    MINUSEQUAL      reduce using rule 233 (postfix_expression -> primary_expression .)
    LSHIFTEQUAL     reduce using rule 233 (postfix_expression -> primary_expression .)
    RSHIFTEQUAL     reduce using rule 233 (postfix_expression -> primary_expression .)
    ANDEQUAL        reduce using rule 233 (postfix_expression -> primary_expression .)
    OREQUAL         reduce using rule 233 (postfix_expression -> primary_expression .)


state 164

    (262) unified_string_literal -> STRING_LITERAL .

    STRING_LITERAL  reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    LBRACKET        reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    LPAREN          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    PERIOD          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    ARROW           reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    PLUSPLUS        reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    EQUALS          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    XOREQUAL        reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    DIVEQUAL        reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    MODEQUAL        reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    ANDEQUAL        reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    OREQUAL         reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    CONDOP          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    TIMES           reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    MOD             reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    PLUS            reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    MINUS           reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    LT              reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    LE              reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    GE              reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    GT              reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    EQ              reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    NE              reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    AND             reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    OR              reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    XOR             reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    LAND            reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    LOR             reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    RBRACKET        reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    COMMA           reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    SEMI            reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)
    COLON           reduce using rule 262 (unified_string_literal -> STRING_LITERAL .)


state 165

    (261) constant -> WCHAR_CONST .

    LBRACKET        reduce using rule 261 (constant -> WCHAR_CONST .)
    LPAREN          reduce using rule 261 (constant -> WCHAR_CONST .)
    PERIOD          reduce using rule 261 (constant -> WCHAR_CONST .)
    ARROW           reduce using rule 261 (constant -> WCHAR_CONST .)
    PLUSPLUS        reduce using rule 261 (constant -> WCHAR_CONST .)
    MINUSMINUS      reduce using rule 261 (constant -> WCHAR_CONST .)
    EQUALS          reduce using rule 261 (constant -> WCHAR_CONST .)
    XOREQUAL        reduce using rule 261 (constant -> WCHAR_CONST .)
    TIMESEQUAL      reduce using rule 261 (constant -> WCHAR_CONST .)
    DIVEQUAL        reduce using rule 261 (constant -> WCHAR_CONST .)
    MODEQUAL        reduce using rule 261 (constant -> WCHAR_CONST .)
    PLUSEQUAL       reduce using rule 261 (constant -> WCHAR_CONST .)
    MINUSEQUAL      reduce using rule 261 (constant -> WCHAR_CONST .)
    LSHIFTEQUAL     reduce using rule 261 (constant -> WCHAR_CONST .)
    RSHIFTEQUAL     reduce using rule 261 (constant -> WCHAR_CONST .)
    ANDEQUAL        reduce using rule 261 (constant -> WCHAR_CONST .)
    OREQUAL         reduce using rule 261 (constant -> WCHAR_CONST .)
    CONDOP          reduce using rule 261 (constant -> WCHAR_CONST .)
    TIMES           reduce using rule 261 (constant -> WCHAR_CONST .)
    DIVIDE          reduce using rule 261 (constant -> WCHAR_CONST .)
    MOD             reduce using rule 261 (constant -> WCHAR_CONST .)
    PLUS            reduce using rule 261 (constant -> WCHAR_CONST .)
    MINUS           reduce using rule 261 (constant -> WCHAR_CONST .)
    RSHIFT          reduce using rule 261 (constant -> WCHAR_CONST .)
    LSHIFT          reduce using rule 261 (constant -> WCHAR_CONST .)
    LT              reduce using rule 261 (constant -> WCHAR_CONST .)
    LE              reduce using rule 261 (constant -> WCHAR_CONST .)
    GE              reduce using rule 261 (constant -> WCHAR_CONST .)
    GT              reduce using rule 261 (constant -> WCHAR_CONST .)
    EQ              reduce using rule 261 (constant -> WCHAR_CONST .)
    NE              reduce using rule 261 (constant -> WCHAR_CONST .)
    AND             reduce using rule 261 (constant -> WCHAR_CONST .)
    OR              reduce using rule 261 (constant -> WCHAR_CONST .)
    XOR             reduce using rule 261 (constant -> WCHAR_CONST .)
    LAND            reduce using rule 261 (constant -> WCHAR_CONST .)
    LOR             reduce using rule 261 (constant -> WCHAR_CONST .)
    COMMA           reduce using rule 261 (constant -> WCHAR_CONST .)
    SEMI            reduce using rule 261 (constant -> WCHAR_CONST .)
    RPAREN          reduce using rule 261 (constant -> WCHAR_CONST .)
    RBRACKET        reduce using rule 261 (constant -> WCHAR_CONST .)
    COLON           reduce using rule 261 (constant -> WCHAR_CONST .)
    RBRACE          reduce using rule 261 (constant -> WCHAR_CONST .)


state 166

    (229) unary_operator -> PLUS .

    LPAREN          reduce using rule 229 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 229 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 229 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 229 (unary_operator -> PLUS .)
    AND             reduce using rule 229 (unary_operator -> PLUS .)
    TIMES           reduce using rule 229 (unary_operator -> PLUS .)
    PLUS            reduce using rule 229 (unary_operator -> PLUS .)
    MINUS           reduce using rule 229 (unary_operator -> PLUS .)
    NOT             reduce using rule 229 (unary_operator -> PLUS .)
    LNOT            reduce using rule 229 (unary_operator -> PLUS .)
    OFFSETOF        reduce using rule 229 (unary_operator -> PLUS .)
    ID              reduce using rule 229 (unary_operator -> PLUS .)
    INT_CONST_DEC   reduce using rule 229 (unary_operator -> PLUS .)
    INT_CONST_OCT   reduce using rule 229 (unary_operator -> PLUS .)
    INT_CONST_HEX   reduce using rule 229 (unary_operator -> PLUS .)
    INT_CONST_BIN   reduce using rule 229 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 229 (unary_operator -> PLUS .)
    HEX_FLOAT_CONST reduce using rule 229 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 229 (unary_operator -> PLUS .)
    WCHAR_CONST     reduce using rule 229 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 229 (unary_operator -> PLUS .)
    WSTRING_LITERAL reduce using rule 229 (unary_operator -> PLUS .)


state 167

    (184) assignment_expression -> conditional_expression .

    RBRACKET        reduce using rule 184 (assignment_expression -> conditional_expression .)
    RPAREN          reduce using rule 184 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 184 (assignment_expression -> conditional_expression .)
    SEMI            reduce using rule 184 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 184 (assignment_expression -> conditional_expression .)
    RBRACE          reduce using rule 184 (assignment_expression -> conditional_expression .)


state 168

    (256) constant -> INT_CONST_HEX .

    LBRACKET        reduce using rule 256 (constant -> INT_CONST_HEX .)
    LPAREN          reduce using rule 256 (constant -> INT_CONST_HEX .)
    PERIOD          reduce using rule 256 (constant -> INT_CONST_HEX .)
    ARROW           reduce using rule 256 (constant -> INT_CONST_HEX .)
    PLUSPLUS        reduce using rule 256 (constant -> INT_CONST_HEX .)
    MINUSMINUS      reduce using rule 256 (constant -> INT_CONST_HEX .)
    EQUALS          reduce using rule 256 (constant -> INT_CONST_HEX .)
    XOREQUAL        reduce using rule 256 (constant -> INT_CONST_HEX .)
    TIMESEQUAL      reduce using rule 256 (constant -> INT_CONST_HEX .)
    DIVEQUAL        reduce using rule 256 (constant -> INT_CONST_HEX .)
    MODEQUAL        reduce using rule 256 (constant -> INT_CONST_HEX .)
    PLUSEQUAL       reduce using rule 256 (constant -> INT_CONST_HEX .)
    MINUSEQUAL      reduce using rule 256 (constant -> INT_CONST_HEX .)
    LSHIFTEQUAL     reduce using rule 256 (constant -> INT_CONST_HEX .)
    RSHIFTEQUAL     reduce using rule 256 (constant -> INT_CONST_HEX .)
    ANDEQUAL        reduce using rule 256 (constant -> INT_CONST_HEX .)
    OREQUAL         reduce using rule 256 (constant -> INT_CONST_HEX .)
    CONDOP          reduce using rule 256 (constant -> INT_CONST_HEX .)
    TIMES           reduce using rule 256 (constant -> INT_CONST_HEX .)
    DIVIDE          reduce using rule 256 (constant -> INT_CONST_HEX .)
    MOD             reduce using rule 256 (constant -> INT_CONST_HEX .)
    PLUS            reduce using rule 256 (constant -> INT_CONST_HEX .)
    MINUS           reduce using rule 256 (constant -> INT_CONST_HEX .)
    RSHIFT          reduce using rule 256 (constant -> INT_CONST_HEX .)
    LSHIFT          reduce using rule 256 (constant -> INT_CONST_HEX .)
    LT              reduce using rule 256 (constant -> INT_CONST_HEX .)
    LE              reduce using rule 256 (constant -> INT_CONST_HEX .)
    GE              reduce using rule 256 (constant -> INT_CONST_HEX .)
    GT              reduce using rule 256 (constant -> INT_CONST_HEX .)
    EQ              reduce using rule 256 (constant -> INT_CONST_HEX .)
    NE              reduce using rule 256 (constant -> INT_CONST_HEX .)
    AND             reduce using rule 256 (constant -> INT_CONST_HEX .)
    OR              reduce using rule 256 (constant -> INT_CONST_HEX .)
    XOR             reduce using rule 256 (constant -> INT_CONST_HEX .)
    LAND            reduce using rule 256 (constant -> INT_CONST_HEX .)
    LOR             reduce using rule 256 (constant -> INT_CONST_HEX .)
    COMMA           reduce using rule 256 (constant -> INT_CONST_HEX .)
    SEMI            reduce using rule 256 (constant -> INT_CONST_HEX .)
    RPAREN          reduce using rule 256 (constant -> INT_CONST_HEX .)
    RBRACKET        reduce using rule 256 (constant -> INT_CONST_HEX .)
    COLON           reduce using rule 256 (constant -> INT_CONST_HEX .)
    RBRACE          reduce using rule 256 (constant -> INT_CONST_HEX .)


state 169

    (42) function_definition -> declaration_specifiers declarator declaration_list_opt . compound_statement
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (266) brace_open -> . LBRACE

    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 117
    compound_statement             shift and go to state 296

state 170

    (86) init_declarator -> declarator EQUALS . initializer
    (139) initializer -> . assignment_expression
    (140) initializer -> . brace_open initializer_list_opt brace_close
    (141) initializer -> . brace_open initializer_list COMMA brace_close
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (266) brace_open -> . LBRACE
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 171
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    identifier                     shift and go to state 156
    initializer                    shift and go to state 297
    brace_open                     shift and go to state 174
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 171

    (139) initializer -> assignment_expression .

    COMMA           reduce using rule 139 (initializer -> assignment_expression .)
    SEMI            reduce using rule 139 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 139 (initializer -> assignment_expression .)


state 172

    (228) unary_operator -> TIMES .

    LPAREN          reduce using rule 228 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 228 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 228 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 228 (unary_operator -> TIMES .)
    AND             reduce using rule 228 (unary_operator -> TIMES .)
    TIMES           reduce using rule 228 (unary_operator -> TIMES .)
    PLUS            reduce using rule 228 (unary_operator -> TIMES .)
    MINUS           reduce using rule 228 (unary_operator -> TIMES .)
    NOT             reduce using rule 228 (unary_operator -> TIMES .)
    LNOT            reduce using rule 228 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 228 (unary_operator -> TIMES .)
    ID              reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 228 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 228 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 228 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 228 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 228 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 228 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 228 (unary_operator -> TIMES .)


state 173

    (83) init_declarator_list -> EQUALS initializer .

    COMMA           reduce using rule 83 (init_declarator_list -> EQUALS initializer .)
    SEMI            reduce using rule 83 (init_declarator_list -> EQUALS initializer .)


state 174

    (140) initializer -> brace_open . initializer_list_opt brace_close
    (141) initializer -> brace_open . initializer_list COMMA brace_close
    (19) initializer_list_opt -> . empty
    (20) initializer_list_opt -> . initializer_list
    (142) initializer_list -> . designation_opt initializer
    (143) initializer_list -> . initializer_list COMMA designation_opt initializer
    (268) empty -> .
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (144) designation -> . designator_list EQUALS
    (145) designator_list -> . designator
    (146) designator_list -> . designator_list designator
    (147) designator -> . LBRACKET constant_expression RBRACKET
    (148) designator -> . PERIOD identifier

    RBRACE          reduce using rule 268 (empty -> .)
    LBRACE          reduce using rule 268 (empty -> .)
    PLUSPLUS        reduce using rule 268 (empty -> .)
    MINUSMINUS      reduce using rule 268 (empty -> .)
    SIZEOF          reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    AND             reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    PLUS            reduce using rule 268 (empty -> .)
    MINUS           reduce using rule 268 (empty -> .)
    NOT             reduce using rule 268 (empty -> .)
    LNOT            reduce using rule 268 (empty -> .)
    OFFSETOF        reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    INT_CONST_DEC   reduce using rule 268 (empty -> .)
    INT_CONST_OCT   reduce using rule 268 (empty -> .)
    INT_CONST_HEX   reduce using rule 268 (empty -> .)
    INT_CONST_BIN   reduce using rule 268 (empty -> .)
    FLOAT_CONST     reduce using rule 268 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 268 (empty -> .)
    CHAR_CONST      reduce using rule 268 (empty -> .)
    WCHAR_CONST     reduce using rule 268 (empty -> .)
    STRING_LITERAL  reduce using rule 268 (empty -> .)
    WSTRING_LITERAL reduce using rule 268 (empty -> .)
    LBRACKET        shift and go to state 301
    PERIOD          shift and go to state 299

    designator_list                shift and go to state 298
    designation                    shift and go to state 300
    designation_opt                shift and go to state 302
    initializer_list_opt           shift and go to state 303
    empty                          shift and go to state 305
    initializer_list               shift and go to state 304
    designator                     shift and go to state 306

state 175

    (151) abstract_declarator -> pointer direct_abstract_declarator .
    (154) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> direct_abstract_declarator . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> direct_abstract_declarator . LPAREN parameter_type_list_opt RPAREN

    COMMA           reduce using rule 151 (abstract_declarator -> pointer direct_abstract_declarator .)
    SEMI            reduce using rule 151 (abstract_declarator -> pointer direct_abstract_declarator .)
    RPAREN          reduce using rule 151 (abstract_declarator -> pointer direct_abstract_declarator .)
    LBRACKET        shift and go to state 128
    LPAREN          shift and go to state 127


state 176

    (23) specifier_qualifier_list_opt -> empty .

    TIMES           reduce using rule 23 (specifier_qualifier_list_opt -> empty .)
    LPAREN          reduce using rule 23 (specifier_qualifier_list_opt -> empty .)
    LBRACKET        reduce using rule 23 (specifier_qualifier_list_opt -> empty .)
    COLON           reduce using rule 23 (specifier_qualifier_list_opt -> empty .)
    ID              reduce using rule 23 (specifier_qualifier_list_opt -> empty .)
    SEMI            reduce using rule 23 (specifier_qualifier_list_opt -> empty .)
    RPAREN          reduce using rule 23 (specifier_qualifier_list_opt -> empty .)
    COMMA           reduce using rule 23 (specifier_qualifier_list_opt -> empty .)


state 177

    (24) specifier_qualifier_list_opt -> specifier_qualifier_list .

    TIMES           reduce using rule 24 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    LPAREN          reduce using rule 24 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    LBRACKET        reduce using rule 24 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    COLON           reduce using rule 24 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    ID              reduce using rule 24 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    SEMI            reduce using rule 24 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    RPAREN          reduce using rule 24 (specifier_qualifier_list_opt -> specifier_qualifier_list .)
    COMMA           reduce using rule 24 (specifier_qualifier_list_opt -> specifier_qualifier_list .)


state 178

    (87) specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .

    TIMES           reduce using rule 87 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    LPAREN          reduce using rule 87 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    LBRACKET        reduce using rule 87 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    RPAREN          reduce using rule 87 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    COLON           reduce using rule 87 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    ID              reduce using rule 87 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    SEMI            reduce using rule 87 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)
    COMMA           reduce using rule 87 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list_opt .)


state 179

    (88) specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .

    TIMES           reduce using rule 88 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    LPAREN          reduce using rule 88 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    LBRACKET        reduce using rule 88 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    RPAREN          reduce using rule 88 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    COLON           reduce using rule 88 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    ID              reduce using rule 88 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    SEMI            reduce using rule 88 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)
    COMMA           reduce using rule 88 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_opt .)


state 180

    (97) struct_declaration_list -> struct_declaration_list struct_declaration .

    RBRACE          reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SEMI            reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _BOOL           reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    _COMPLEX        reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPEID          reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 97 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 181

    (267) brace_close -> RBRACE .

    LBRACKET        reduce using rule 267 (brace_close -> RBRACE .)
    LPAREN          reduce using rule 267 (brace_close -> RBRACE .)
    PERIOD          reduce using rule 267 (brace_close -> RBRACE .)
    ARROW           reduce using rule 267 (brace_close -> RBRACE .)
    PLUSPLUS        reduce using rule 267 (brace_close -> RBRACE .)
    MINUSMINUS      reduce using rule 267 (brace_close -> RBRACE .)
    EQUALS          reduce using rule 267 (brace_close -> RBRACE .)
    XOREQUAL        reduce using rule 267 (brace_close -> RBRACE .)
    TIMESEQUAL      reduce using rule 267 (brace_close -> RBRACE .)
    DIVEQUAL        reduce using rule 267 (brace_close -> RBRACE .)
    MODEQUAL        reduce using rule 267 (brace_close -> RBRACE .)
    PLUSEQUAL       reduce using rule 267 (brace_close -> RBRACE .)
    MINUSEQUAL      reduce using rule 267 (brace_close -> RBRACE .)
    LSHIFTEQUAL     reduce using rule 267 (brace_close -> RBRACE .)
    RSHIFTEQUAL     reduce using rule 267 (brace_close -> RBRACE .)
    ANDEQUAL        reduce using rule 267 (brace_close -> RBRACE .)
    OREQUAL         reduce using rule 267 (brace_close -> RBRACE .)
    CONDOP          reduce using rule 267 (brace_close -> RBRACE .)
    TIMES           reduce using rule 267 (brace_close -> RBRACE .)
    DIVIDE          reduce using rule 267 (brace_close -> RBRACE .)
    MOD             reduce using rule 267 (brace_close -> RBRACE .)
    PLUS            reduce using rule 267 (brace_close -> RBRACE .)
    MINUS           reduce using rule 267 (brace_close -> RBRACE .)
    RSHIFT          reduce using rule 267 (brace_close -> RBRACE .)
    LSHIFT          reduce using rule 267 (brace_close -> RBRACE .)
    LT              reduce using rule 267 (brace_close -> RBRACE .)
    LE              reduce using rule 267 (brace_close -> RBRACE .)
    GE              reduce using rule 267 (brace_close -> RBRACE .)
    GT              reduce using rule 267 (brace_close -> RBRACE .)
    EQ              reduce using rule 267 (brace_close -> RBRACE .)
    NE              reduce using rule 267 (brace_close -> RBRACE .)
    AND             reduce using rule 267 (brace_close -> RBRACE .)
    OR              reduce using rule 267 (brace_close -> RBRACE .)
    XOR             reduce using rule 267 (brace_close -> RBRACE .)
    LAND            reduce using rule 267 (brace_close -> RBRACE .)
    LOR             reduce using rule 267 (brace_close -> RBRACE .)
    RBRACKET        reduce using rule 267 (brace_close -> RBRACE .)
    COMMA           reduce using rule 267 (brace_close -> RBRACE .)
    SEMI            reduce using rule 267 (brace_close -> RBRACE .)
    RPAREN          reduce using rule 267 (brace_close -> RBRACE .)
    COLON           reduce using rule 267 (brace_close -> RBRACE .)
    RBRACE          reduce using rule 267 (brace_close -> RBRACE .)
    CONST           reduce using rule 267 (brace_close -> RBRACE .)
    RESTRICT        reduce using rule 267 (brace_close -> RBRACE .)
    VOLATILE        reduce using rule 267 (brace_close -> RBRACE .)
    VOID            reduce using rule 267 (brace_close -> RBRACE .)
    _BOOL           reduce using rule 267 (brace_close -> RBRACE .)
    CHAR            reduce using rule 267 (brace_close -> RBRACE .)
    SHORT           reduce using rule 267 (brace_close -> RBRACE .)
    INT             reduce using rule 267 (brace_close -> RBRACE .)
    LONG            reduce using rule 267 (brace_close -> RBRACE .)
    FLOAT           reduce using rule 267 (brace_close -> RBRACE .)
    DOUBLE          reduce using rule 267 (brace_close -> RBRACE .)
    _COMPLEX        reduce using rule 267 (brace_close -> RBRACE .)
    SIGNED          reduce using rule 267 (brace_close -> RBRACE .)
    UNSIGNED        reduce using rule 267 (brace_close -> RBRACE .)
    AUTO            reduce using rule 267 (brace_close -> RBRACE .)
    REGISTER        reduce using rule 267 (brace_close -> RBRACE .)
    STATIC          reduce using rule 267 (brace_close -> RBRACE .)
    EXTERN          reduce using rule 267 (brace_close -> RBRACE .)
    TYPEDEF         reduce using rule 267 (brace_close -> RBRACE .)
    INLINE          reduce using rule 267 (brace_close -> RBRACE .)
    TYPEID          reduce using rule 267 (brace_close -> RBRACE .)
    ENUM            reduce using rule 267 (brace_close -> RBRACE .)
    STRUCT          reduce using rule 267 (brace_close -> RBRACE .)
    UNION           reduce using rule 267 (brace_close -> RBRACE .)
    ID              reduce using rule 267 (brace_close -> RBRACE .)
    PPHASH          reduce using rule 267 (brace_close -> RBRACE .)
    PPPRAGMA        reduce using rule 267 (brace_close -> RBRACE .)
    $end            reduce using rule 267 (brace_close -> RBRACE .)
    CASE            reduce using rule 267 (brace_close -> RBRACE .)
    DEFAULT         reduce using rule 267 (brace_close -> RBRACE .)
    IF              reduce using rule 267 (brace_close -> RBRACE .)
    SWITCH          reduce using rule 267 (brace_close -> RBRACE .)
    WHILE           reduce using rule 267 (brace_close -> RBRACE .)
    DO              reduce using rule 267 (brace_close -> RBRACE .)
    FOR             reduce using rule 267 (brace_close -> RBRACE .)
    GOTO            reduce using rule 267 (brace_close -> RBRACE .)
    BREAK           reduce using rule 267 (brace_close -> RBRACE .)
    CONTINUE        reduce using rule 267 (brace_close -> RBRACE .)
    RETURN          reduce using rule 267 (brace_close -> RBRACE .)
    LBRACE          reduce using rule 267 (brace_close -> RBRACE .)
    SIZEOF          reduce using rule 267 (brace_close -> RBRACE .)
    NOT             reduce using rule 267 (brace_close -> RBRACE .)
    LNOT            reduce using rule 267 (brace_close -> RBRACE .)
    OFFSETOF        reduce using rule 267 (brace_close -> RBRACE .)
    INT_CONST_DEC   reduce using rule 267 (brace_close -> RBRACE .)
    INT_CONST_OCT   reduce using rule 267 (brace_close -> RBRACE .)
    INT_CONST_HEX   reduce using rule 267 (brace_close -> RBRACE .)
    INT_CONST_BIN   reduce using rule 267 (brace_close -> RBRACE .)
    FLOAT_CONST     reduce using rule 267 (brace_close -> RBRACE .)
    HEX_FLOAT_CONST reduce using rule 267 (brace_close -> RBRACE .)
    CHAR_CONST      reduce using rule 267 (brace_close -> RBRACE .)
    WCHAR_CONST     reduce using rule 267 (brace_close -> RBRACE .)
    STRING_LITERAL  reduce using rule 267 (brace_close -> RBRACE .)
    WSTRING_LITERAL reduce using rule 267 (brace_close -> RBRACE .)
    ELSE            reduce using rule 267 (brace_close -> RBRACE .)


state 182

    (91) struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    ENUM            reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    STRUCT          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    UNION           reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    EQUALS          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 91 (struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close .)


state 183

    (25) struct_declarator_list_opt -> empty .

    SEMI            reduce using rule 25 (struct_declarator_list_opt -> empty .)


state 184

    (98) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt . SEMI

    SEMI            shift and go to state 307


state 185

    (99) struct_declaration -> specifier_qualifier_list abstract_declarator . SEMI

    SEMI            shift and go to state 308


state 186

    (26) struct_declarator_list_opt -> struct_declarator_list .
    (102) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI            reduce using rule 26 (struct_declarator_list_opt -> struct_declarator_list .)
    COMMA           shift and go to state 309


state 187

    (101) struct_declarator_list -> struct_declarator .

    COMMA           reduce using rule 101 (struct_declarator_list -> struct_declarator .)
    SEMI            reduce using rule 101 (struct_declarator_list -> struct_declarator .)


state 188

    (103) struct_declarator -> declarator .
    (104) struct_declarator -> declarator . COLON constant_expression

    COMMA           reduce using rule 103 (struct_declarator -> declarator .)
    SEMI            reduce using rule 103 (struct_declarator -> declarator .)
    COLON           shift and go to state 310


state 189

    (105) struct_declarator -> COLON . constant_expression
    (197) constant_expression -> . conditional_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    constant                       shift and go to state 146
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    constant_expression            shift and go to state 311
    conditional_expression         shift and go to state 312
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    postfix_expression             shift and go to state 147

state 190

    (93) struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list . brace_close
    (97) struct_declaration_list -> struct_declaration_list . struct_declaration
    (267) brace_close -> . RBRACE
    (98) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (99) struct_declaration -> . specifier_qualifier_list abstract_declarator SEMI
    (100) struct_declaration -> . SEMI
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    RBRACE          shift and go to state 181
    SEMI            shift and go to state 93
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    brace_close                    shift and go to state 313
    struct_declaration             shift and go to state 180
    type_qualifier                 shift and go to state 95
    type_specifier                 shift and go to state 96
    enum_specifier                 shift and go to state 33
    struct_or_union                shift and go to state 8
    typedef_name                   shift and go to state 11
    struct_or_union_specifier      shift and go to state 36
    specifier_qualifier_list       shift and go to state 98

state 191

    (92) struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list . brace_close
    (97) struct_declaration_list -> struct_declaration_list . struct_declaration
    (267) brace_close -> . RBRACE
    (98) struct_declaration -> . specifier_qualifier_list struct_declarator_list_opt SEMI
    (99) struct_declaration -> . specifier_qualifier_list abstract_declarator SEMI
    (100) struct_declaration -> . SEMI
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    RBRACE          shift and go to state 181
    SEMI            shift and go to state 93
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    brace_close                    shift and go to state 314
    struct_declaration             shift and go to state 180
    type_qualifier                 shift and go to state 95
    type_specifier                 shift and go to state 96
    enum_specifier                 shift and go to state 33
    struct_or_union                shift and go to state 8
    typedef_name                   shift and go to state 11
    struct_or_union_specifier      shift and go to state 36
    specifier_qualifier_list       shift and go to state 98

state 192

    (121) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 315


state 193

    (124) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES . RBRACKET
    (228) unary_operator -> TIMES .

    RBRACKET        shift and go to state 316
    LPAREN          reduce using rule 228 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 228 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 228 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 228 (unary_operator -> TIMES .)
    AND             reduce using rule 228 (unary_operator -> TIMES .)
    TIMES           reduce using rule 228 (unary_operator -> TIMES .)
    PLUS            reduce using rule 228 (unary_operator -> TIMES .)
    MINUS           reduce using rule 228 (unary_operator -> TIMES .)
    NOT             reduce using rule 228 (unary_operator -> TIMES .)
    LNOT            reduce using rule 228 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 228 (unary_operator -> TIMES .)
    ID              reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 228 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 228 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 228 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 228 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 228 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 228 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 228 (unary_operator -> TIMES .)


state 194

    (122) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt . assignment_expression RBRACKET
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 317
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    constant                       shift and go to state 146
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    postfix_expression             shift and go to state 147

state 195

    (123) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC . assignment_expression RBRACKET
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 318
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    constant                       shift and go to state 146
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    postfix_expression             shift and go to state 147

state 196

    (138) identifier_list -> identifier_list COMMA . identifier
    (253) identifier -> . ID

    ID              shift and go to state 112

    identifier                     shift and go to state 319

state 197

    (126) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACKET        reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EQUALS          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CONST           reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RESTRICT        reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOLATILE        reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    _BOOL           reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SHORT           reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LONG            reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    DOUBLE          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    _COMPLEX        reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SIGNED          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    UNSIGNED        reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    AUTO            reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    REGISTER        reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    STATIC          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    EXTERN          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEDEF         reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INLINE          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    TYPEID          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    ENUM            reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    STRUCT          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    UNION           reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACE          reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COLON           reduce using rule 126 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 198

    (132) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (134) parameter_list -> parameter_list COMMA . parameter_declaration
    (135) parameter_declaration -> . declaration_specifiers declarator
    (136) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 321
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    parameter_declaration          shift and go to state 320
    declaration_specifiers         shift and go to state 113
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    struct_or_union                shift and go to state 8
    storage_class_specifier        shift and go to state 47
    struct_or_union_specifier      shift and go to state 36
    typedef_name                   shift and go to state 11
    function_specifier             shift and go to state 14

state 199

    (125) direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .

    LBRACKET        reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LPAREN          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EQUALS          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CONST           reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    RESTRICT        reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOLATILE        reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    VOID            reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    _BOOL           reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    CHAR            reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SHORT           reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INT             reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LONG            reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    FLOAT           reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    DOUBLE          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    _COMPLEX        reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SIGNED          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNSIGNED        reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    AUTO            reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    REGISTER        reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STATIC          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    EXTERN          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEDEF         reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    INLINE          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    TYPEID          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    ENUM            reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    STRUCT          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    UNION           reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    LBRACE          reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    SEMI            reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)
    COLON           reduce using rule 125 (direct_declarator -> direct_declarator LPAREN parameter_type_list RPAREN .)


state 200

    (1) abstract_declarator_opt -> empty .

    RPAREN          reduce using rule 1 (abstract_declarator_opt -> empty .)
    COMMA           reduce using rule 1 (abstract_declarator_opt -> empty .)


state 201

    (2) abstract_declarator_opt -> abstract_declarator .

    RPAREN          reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)
    COMMA           reduce using rule 2 (abstract_declarator_opt -> abstract_declarator .)


state 202

    (136) parameter_declaration -> declaration_specifiers abstract_declarator_opt .

    COMMA           reduce using rule 136 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)
    RPAREN          reduce using rule 136 (parameter_declaration -> declaration_specifiers abstract_declarator_opt .)


state 203

    (135) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 135 (parameter_declaration -> declaration_specifiers declarator .)
    RPAREN          reduce using rule 135 (parameter_declaration -> declaration_specifiers declarator .)


state 204

    (160) block_item -> declaration .

    ID              reduce using rule 160 (block_item -> declaration .)
    CASE            reduce using rule 160 (block_item -> declaration .)
    DEFAULT         reduce using rule 160 (block_item -> declaration .)
    IF              reduce using rule 160 (block_item -> declaration .)
    SWITCH          reduce using rule 160 (block_item -> declaration .)
    WHILE           reduce using rule 160 (block_item -> declaration .)
    DO              reduce using rule 160 (block_item -> declaration .)
    FOR             reduce using rule 160 (block_item -> declaration .)
    GOTO            reduce using rule 160 (block_item -> declaration .)
    BREAK           reduce using rule 160 (block_item -> declaration .)
    CONTINUE        reduce using rule 160 (block_item -> declaration .)
    RETURN          reduce using rule 160 (block_item -> declaration .)
    PPPRAGMA        reduce using rule 160 (block_item -> declaration .)
    LBRACE          reduce using rule 160 (block_item -> declaration .)
    CONST           reduce using rule 160 (block_item -> declaration .)
    RESTRICT        reduce using rule 160 (block_item -> declaration .)
    VOLATILE        reduce using rule 160 (block_item -> declaration .)
    VOID            reduce using rule 160 (block_item -> declaration .)
    _BOOL           reduce using rule 160 (block_item -> declaration .)
    CHAR            reduce using rule 160 (block_item -> declaration .)
    SHORT           reduce using rule 160 (block_item -> declaration .)
    INT             reduce using rule 160 (block_item -> declaration .)
    LONG            reduce using rule 160 (block_item -> declaration .)
    FLOAT           reduce using rule 160 (block_item -> declaration .)
    DOUBLE          reduce using rule 160 (block_item -> declaration .)
    _COMPLEX        reduce using rule 160 (block_item -> declaration .)
    SIGNED          reduce using rule 160 (block_item -> declaration .)
    UNSIGNED        reduce using rule 160 (block_item -> declaration .)
    AUTO            reduce using rule 160 (block_item -> declaration .)
    REGISTER        reduce using rule 160 (block_item -> declaration .)
    STATIC          reduce using rule 160 (block_item -> declaration .)
    EXTERN          reduce using rule 160 (block_item -> declaration .)
    TYPEDEF         reduce using rule 160 (block_item -> declaration .)
    INLINE          reduce using rule 160 (block_item -> declaration .)
    TYPEID          reduce using rule 160 (block_item -> declaration .)
    ENUM            reduce using rule 160 (block_item -> declaration .)
    STRUCT          reduce using rule 160 (block_item -> declaration .)
    UNION           reduce using rule 160 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 160 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 160 (block_item -> declaration .)
    SIZEOF          reduce using rule 160 (block_item -> declaration .)
    LPAREN          reduce using rule 160 (block_item -> declaration .)
    AND             reduce using rule 160 (block_item -> declaration .)
    TIMES           reduce using rule 160 (block_item -> declaration .)
    PLUS            reduce using rule 160 (block_item -> declaration .)
    MINUS           reduce using rule 160 (block_item -> declaration .)
    NOT             reduce using rule 160 (block_item -> declaration .)
    LNOT            reduce using rule 160 (block_item -> declaration .)
    OFFSETOF        reduce using rule 160 (block_item -> declaration .)
    INT_CONST_DEC   reduce using rule 160 (block_item -> declaration .)
    INT_CONST_OCT   reduce using rule 160 (block_item -> declaration .)
    INT_CONST_HEX   reduce using rule 160 (block_item -> declaration .)
    INT_CONST_BIN   reduce using rule 160 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 160 (block_item -> declaration .)
    HEX_FLOAT_CONST reduce using rule 160 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 160 (block_item -> declaration .)
    WCHAR_CONST     reduce using rule 160 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 160 (block_item -> declaration .)
    WSTRING_LITERAL reduce using rule 160 (block_item -> declaration .)
    SEMI            reduce using rule 160 (block_item -> declaration .)
    RBRACE          reduce using rule 160 (block_item -> declaration .)


state 205

    (43) statement -> labeled_statement .

    ID              reduce using rule 43 (statement -> labeled_statement .)
    CASE            reduce using rule 43 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 43 (statement -> labeled_statement .)
    IF              reduce using rule 43 (statement -> labeled_statement .)
    SWITCH          reduce using rule 43 (statement -> labeled_statement .)
    WHILE           reduce using rule 43 (statement -> labeled_statement .)
    DO              reduce using rule 43 (statement -> labeled_statement .)
    FOR             reduce using rule 43 (statement -> labeled_statement .)
    GOTO            reduce using rule 43 (statement -> labeled_statement .)
    BREAK           reduce using rule 43 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 43 (statement -> labeled_statement .)
    RETURN          reduce using rule 43 (statement -> labeled_statement .)
    PPPRAGMA        reduce using rule 43 (statement -> labeled_statement .)
    LBRACE          reduce using rule 43 (statement -> labeled_statement .)
    CONST           reduce using rule 43 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 43 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 43 (statement -> labeled_statement .)
    VOID            reduce using rule 43 (statement -> labeled_statement .)
    _BOOL           reduce using rule 43 (statement -> labeled_statement .)
    CHAR            reduce using rule 43 (statement -> labeled_statement .)
    SHORT           reduce using rule 43 (statement -> labeled_statement .)
    INT             reduce using rule 43 (statement -> labeled_statement .)
    LONG            reduce using rule 43 (statement -> labeled_statement .)
    FLOAT           reduce using rule 43 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 43 (statement -> labeled_statement .)
    _COMPLEX        reduce using rule 43 (statement -> labeled_statement .)
    SIGNED          reduce using rule 43 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 43 (statement -> labeled_statement .)
    AUTO            reduce using rule 43 (statement -> labeled_statement .)
    REGISTER        reduce using rule 43 (statement -> labeled_statement .)
    STATIC          reduce using rule 43 (statement -> labeled_statement .)
    EXTERN          reduce using rule 43 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 43 (statement -> labeled_statement .)
    INLINE          reduce using rule 43 (statement -> labeled_statement .)
    TYPEID          reduce using rule 43 (statement -> labeled_statement .)
    ENUM            reduce using rule 43 (statement -> labeled_statement .)
    STRUCT          reduce using rule 43 (statement -> labeled_statement .)
    UNION           reduce using rule 43 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 43 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 43 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 43 (statement -> labeled_statement .)
    LPAREN          reduce using rule 43 (statement -> labeled_statement .)
    AND             reduce using rule 43 (statement -> labeled_statement .)
    TIMES           reduce using rule 43 (statement -> labeled_statement .)
    PLUS            reduce using rule 43 (statement -> labeled_statement .)
    MINUS           reduce using rule 43 (statement -> labeled_statement .)
    NOT             reduce using rule 43 (statement -> labeled_statement .)
    LNOT            reduce using rule 43 (statement -> labeled_statement .)
    OFFSETOF        reduce using rule 43 (statement -> labeled_statement .)
    INT_CONST_DEC   reduce using rule 43 (statement -> labeled_statement .)
    INT_CONST_OCT   reduce using rule 43 (statement -> labeled_statement .)
    INT_CONST_HEX   reduce using rule 43 (statement -> labeled_statement .)
    INT_CONST_BIN   reduce using rule 43 (statement -> labeled_statement .)
    FLOAT_CONST     reduce using rule 43 (statement -> labeled_statement .)
    HEX_FLOAT_CONST reduce using rule 43 (statement -> labeled_statement .)
    CHAR_CONST      reduce using rule 43 (statement -> labeled_statement .)
    WCHAR_CONST     reduce using rule 43 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 43 (statement -> labeled_statement .)
    WSTRING_LITERAL reduce using rule 43 (statement -> labeled_statement .)
    SEMI            reduce using rule 43 (statement -> labeled_statement .)
    RBRACE          reduce using rule 43 (statement -> labeled_statement .)
    ELSE            reduce using rule 43 (statement -> labeled_statement .)


state 206

    (44) statement -> expression_statement .

    ID              reduce using rule 44 (statement -> expression_statement .)
    CASE            reduce using rule 44 (statement -> expression_statement .)
    DEFAULT         reduce using rule 44 (statement -> expression_statement .)
    IF              reduce using rule 44 (statement -> expression_statement .)
    SWITCH          reduce using rule 44 (statement -> expression_statement .)
    WHILE           reduce using rule 44 (statement -> expression_statement .)
    DO              reduce using rule 44 (statement -> expression_statement .)
    FOR             reduce using rule 44 (statement -> expression_statement .)
    GOTO            reduce using rule 44 (statement -> expression_statement .)
    BREAK           reduce using rule 44 (statement -> expression_statement .)
    CONTINUE        reduce using rule 44 (statement -> expression_statement .)
    RETURN          reduce using rule 44 (statement -> expression_statement .)
    PPPRAGMA        reduce using rule 44 (statement -> expression_statement .)
    LBRACE          reduce using rule 44 (statement -> expression_statement .)
    CONST           reduce using rule 44 (statement -> expression_statement .)
    RESTRICT        reduce using rule 44 (statement -> expression_statement .)
    VOLATILE        reduce using rule 44 (statement -> expression_statement .)
    VOID            reduce using rule 44 (statement -> expression_statement .)
    _BOOL           reduce using rule 44 (statement -> expression_statement .)
    CHAR            reduce using rule 44 (statement -> expression_statement .)
    SHORT           reduce using rule 44 (statement -> expression_statement .)
    INT             reduce using rule 44 (statement -> expression_statement .)
    LONG            reduce using rule 44 (statement -> expression_statement .)
    FLOAT           reduce using rule 44 (statement -> expression_statement .)
    DOUBLE          reduce using rule 44 (statement -> expression_statement .)
    _COMPLEX        reduce using rule 44 (statement -> expression_statement .)
    SIGNED          reduce using rule 44 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 44 (statement -> expression_statement .)
    AUTO            reduce using rule 44 (statement -> expression_statement .)
    REGISTER        reduce using rule 44 (statement -> expression_statement .)
    STATIC          reduce using rule 44 (statement -> expression_statement .)
    EXTERN          reduce using rule 44 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 44 (statement -> expression_statement .)
    INLINE          reduce using rule 44 (statement -> expression_statement .)
    TYPEID          reduce using rule 44 (statement -> expression_statement .)
    ENUM            reduce using rule 44 (statement -> expression_statement .)
    STRUCT          reduce using rule 44 (statement -> expression_statement .)
    UNION           reduce using rule 44 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 44 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 44 (statement -> expression_statement .)
    SIZEOF          reduce using rule 44 (statement -> expression_statement .)
    LPAREN          reduce using rule 44 (statement -> expression_statement .)
    AND             reduce using rule 44 (statement -> expression_statement .)
    TIMES           reduce using rule 44 (statement -> expression_statement .)
    PLUS            reduce using rule 44 (statement -> expression_statement .)
    MINUS           reduce using rule 44 (statement -> expression_statement .)
    NOT             reduce using rule 44 (statement -> expression_statement .)
    LNOT            reduce using rule 44 (statement -> expression_statement .)
    OFFSETOF        reduce using rule 44 (statement -> expression_statement .)
    INT_CONST_DEC   reduce using rule 44 (statement -> expression_statement .)
    INT_CONST_OCT   reduce using rule 44 (statement -> expression_statement .)
    INT_CONST_HEX   reduce using rule 44 (statement -> expression_statement .)
    INT_CONST_BIN   reduce using rule 44 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 44 (statement -> expression_statement .)
    HEX_FLOAT_CONST reduce using rule 44 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 44 (statement -> expression_statement .)
    WCHAR_CONST     reduce using rule 44 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 44 (statement -> expression_statement .)
    WSTRING_LITERAL reduce using rule 44 (statement -> expression_statement .)
    SEMI            reduce using rule 44 (statement -> expression_statement .)
    RBRACE          reduce using rule 44 (statement -> expression_statement .)
    ELSE            reduce using rule 44 (statement -> expression_statement .)


state 207

    (161) block_item -> statement .

    ID              reduce using rule 161 (block_item -> statement .)
    CASE            reduce using rule 161 (block_item -> statement .)
    DEFAULT         reduce using rule 161 (block_item -> statement .)
    IF              reduce using rule 161 (block_item -> statement .)
    SWITCH          reduce using rule 161 (block_item -> statement .)
    WHILE           reduce using rule 161 (block_item -> statement .)
    DO              reduce using rule 161 (block_item -> statement .)
    FOR             reduce using rule 161 (block_item -> statement .)
    GOTO            reduce using rule 161 (block_item -> statement .)
    BREAK           reduce using rule 161 (block_item -> statement .)
    CONTINUE        reduce using rule 161 (block_item -> statement .)
    RETURN          reduce using rule 161 (block_item -> statement .)
    PPPRAGMA        reduce using rule 161 (block_item -> statement .)
    LBRACE          reduce using rule 161 (block_item -> statement .)
    CONST           reduce using rule 161 (block_item -> statement .)
    RESTRICT        reduce using rule 161 (block_item -> statement .)
    VOLATILE        reduce using rule 161 (block_item -> statement .)
    VOID            reduce using rule 161 (block_item -> statement .)
    _BOOL           reduce using rule 161 (block_item -> statement .)
    CHAR            reduce using rule 161 (block_item -> statement .)
    SHORT           reduce using rule 161 (block_item -> statement .)
    INT             reduce using rule 161 (block_item -> statement .)
    LONG            reduce using rule 161 (block_item -> statement .)
    FLOAT           reduce using rule 161 (block_item -> statement .)
    DOUBLE          reduce using rule 161 (block_item -> statement .)
    _COMPLEX        reduce using rule 161 (block_item -> statement .)
    SIGNED          reduce using rule 161 (block_item -> statement .)
    UNSIGNED        reduce using rule 161 (block_item -> statement .)
    AUTO            reduce using rule 161 (block_item -> statement .)
    REGISTER        reduce using rule 161 (block_item -> statement .)
    STATIC          reduce using rule 161 (block_item -> statement .)
    EXTERN          reduce using rule 161 (block_item -> statement .)
    TYPEDEF         reduce using rule 161 (block_item -> statement .)
    INLINE          reduce using rule 161 (block_item -> statement .)
    TYPEID          reduce using rule 161 (block_item -> statement .)
    ENUM            reduce using rule 161 (block_item -> statement .)
    STRUCT          reduce using rule 161 (block_item -> statement .)
    UNION           reduce using rule 161 (block_item -> statement .)
    PLUSPLUS        reduce using rule 161 (block_item -> statement .)
    MINUSMINUS      reduce using rule 161 (block_item -> statement .)
    SIZEOF          reduce using rule 161 (block_item -> statement .)
    LPAREN          reduce using rule 161 (block_item -> statement .)
    AND             reduce using rule 161 (block_item -> statement .)
    TIMES           reduce using rule 161 (block_item -> statement .)
    PLUS            reduce using rule 161 (block_item -> statement .)
    MINUS           reduce using rule 161 (block_item -> statement .)
    NOT             reduce using rule 161 (block_item -> statement .)
    LNOT            reduce using rule 161 (block_item -> statement .)
    OFFSETOF        reduce using rule 161 (block_item -> statement .)
    INT_CONST_DEC   reduce using rule 161 (block_item -> statement .)
    INT_CONST_OCT   reduce using rule 161 (block_item -> statement .)
    INT_CONST_HEX   reduce using rule 161 (block_item -> statement .)
    INT_CONST_BIN   reduce using rule 161 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 161 (block_item -> statement .)
    HEX_FLOAT_CONST reduce using rule 161 (block_item -> statement .)
    CHAR_CONST      reduce using rule 161 (block_item -> statement .)
    WCHAR_CONST     reduce using rule 161 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 161 (block_item -> statement .)
    WSTRING_LITERAL reduce using rule 161 (block_item -> statement .)
    SEMI            reduce using rule 161 (block_item -> statement .)
    RBRACE          reduce using rule 161 (block_item -> statement .)


state 208

    (6) block_item_list_opt -> block_item_list .
    (163) block_item_list -> block_item_list . block_item
    (160) block_item -> . declaration
    (161) block_item -> . statement
    (51) declaration -> . decl_body SEMI
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (50) decl_body -> . declaration_specifiers init_declarator_list_opt
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RBRACE          reduce using rule 6 (block_item_list_opt -> block_item_list .)
    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    SEMI            reduce using rule 268 (empty -> .)
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 322
    jump_statement                 shift and go to state 229
    assignment_expression          shift and go to state 217
    identifier                     shift and go to state 156
    declaration                    shift and go to state 204
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    expression_statement           shift and go to state 206
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    function_specifier             shift and go to state 14
    pppragma_directive             shift and go to state 216
    unified_wstring_literal        shift and go to state 154
    compound_statement             shift and go to state 223
    postfix_expression             shift and go to state 147
    decl_body                      shift and go to state 28
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    binary_expression              shift and go to state 153
    block_item                     shift and go to state 323
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    enum_specifier                 shift and go to state 33
    selection_statement            shift and go to state 211
    brace_open                     shift and go to state 117
    statement                      shift and go to state 207
    primary_expression             shift and go to state 163
    iteration_statement            shift and go to state 228
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 71
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    storage_class_specifier        shift and go to state 47

state 209

    (170) selection_statement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 324


state 210

    (178) jump_statement -> RETURN . expression SEMI
    (179) jump_statement -> RETURN . SEMI
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            shift and go to state 326
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 325
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 211

    (46) statement -> selection_statement .

    ID              reduce using rule 46 (statement -> selection_statement .)
    CASE            reduce using rule 46 (statement -> selection_statement .)
    DEFAULT         reduce using rule 46 (statement -> selection_statement .)
    IF              reduce using rule 46 (statement -> selection_statement .)
    SWITCH          reduce using rule 46 (statement -> selection_statement .)
    WHILE           reduce using rule 46 (statement -> selection_statement .)
    DO              reduce using rule 46 (statement -> selection_statement .)
    FOR             reduce using rule 46 (statement -> selection_statement .)
    GOTO            reduce using rule 46 (statement -> selection_statement .)
    BREAK           reduce using rule 46 (statement -> selection_statement .)
    CONTINUE        reduce using rule 46 (statement -> selection_statement .)
    RETURN          reduce using rule 46 (statement -> selection_statement .)
    PPPRAGMA        reduce using rule 46 (statement -> selection_statement .)
    LBRACE          reduce using rule 46 (statement -> selection_statement .)
    CONST           reduce using rule 46 (statement -> selection_statement .)
    RESTRICT        reduce using rule 46 (statement -> selection_statement .)
    VOLATILE        reduce using rule 46 (statement -> selection_statement .)
    VOID            reduce using rule 46 (statement -> selection_statement .)
    _BOOL           reduce using rule 46 (statement -> selection_statement .)
    CHAR            reduce using rule 46 (statement -> selection_statement .)
    SHORT           reduce using rule 46 (statement -> selection_statement .)
    INT             reduce using rule 46 (statement -> selection_statement .)
    LONG            reduce using rule 46 (statement -> selection_statement .)
    FLOAT           reduce using rule 46 (statement -> selection_statement .)
    DOUBLE          reduce using rule 46 (statement -> selection_statement .)
    _COMPLEX        reduce using rule 46 (statement -> selection_statement .)
    SIGNED          reduce using rule 46 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 46 (statement -> selection_statement .)
    AUTO            reduce using rule 46 (statement -> selection_statement .)
    REGISTER        reduce using rule 46 (statement -> selection_statement .)
    STATIC          reduce using rule 46 (statement -> selection_statement .)
    EXTERN          reduce using rule 46 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 46 (statement -> selection_statement .)
    INLINE          reduce using rule 46 (statement -> selection_statement .)
    TYPEID          reduce using rule 46 (statement -> selection_statement .)
    ENUM            reduce using rule 46 (statement -> selection_statement .)
    STRUCT          reduce using rule 46 (statement -> selection_statement .)
    UNION           reduce using rule 46 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 46 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 46 (statement -> selection_statement .)
    SIZEOF          reduce using rule 46 (statement -> selection_statement .)
    LPAREN          reduce using rule 46 (statement -> selection_statement .)
    AND             reduce using rule 46 (statement -> selection_statement .)
    TIMES           reduce using rule 46 (statement -> selection_statement .)
    PLUS            reduce using rule 46 (statement -> selection_statement .)
    MINUS           reduce using rule 46 (statement -> selection_statement .)
    NOT             reduce using rule 46 (statement -> selection_statement .)
    LNOT            reduce using rule 46 (statement -> selection_statement .)
    OFFSETOF        reduce using rule 46 (statement -> selection_statement .)
    INT_CONST_DEC   reduce using rule 46 (statement -> selection_statement .)
    INT_CONST_OCT   reduce using rule 46 (statement -> selection_statement .)
    INT_CONST_HEX   reduce using rule 46 (statement -> selection_statement .)
    INT_CONST_BIN   reduce using rule 46 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 46 (statement -> selection_statement .)
    HEX_FLOAT_CONST reduce using rule 46 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 46 (statement -> selection_statement .)
    WCHAR_CONST     reduce using rule 46 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 46 (statement -> selection_statement .)
    WSTRING_LITERAL reduce using rule 46 (statement -> selection_statement .)
    SEMI            reduce using rule 46 (statement -> selection_statement .)
    RBRACE          reduce using rule 46 (statement -> selection_statement .)
    ELSE            reduce using rule 46 (statement -> selection_statement .)


state 212

    (180) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 327


state 213

    (177) jump_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 328


state 214

    (173) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 329


state 215

    (5) block_item_list_opt -> empty .
    (13) expression_opt -> empty .

    RBRACE          reduce using rule 5 (block_item_list_opt -> empty .)
    SEMI            reduce using rule 13 (expression_opt -> empty .)


state 216

    (49) statement -> pppragma_directive .

    ID              reduce using rule 49 (statement -> pppragma_directive .)
    CASE            reduce using rule 49 (statement -> pppragma_directive .)
    DEFAULT         reduce using rule 49 (statement -> pppragma_directive .)
    IF              reduce using rule 49 (statement -> pppragma_directive .)
    SWITCH          reduce using rule 49 (statement -> pppragma_directive .)
    WHILE           reduce using rule 49 (statement -> pppragma_directive .)
    DO              reduce using rule 49 (statement -> pppragma_directive .)
    FOR             reduce using rule 49 (statement -> pppragma_directive .)
    GOTO            reduce using rule 49 (statement -> pppragma_directive .)
    BREAK           reduce using rule 49 (statement -> pppragma_directive .)
    CONTINUE        reduce using rule 49 (statement -> pppragma_directive .)
    RETURN          reduce using rule 49 (statement -> pppragma_directive .)
    PPPRAGMA        reduce using rule 49 (statement -> pppragma_directive .)
    LBRACE          reduce using rule 49 (statement -> pppragma_directive .)
    CONST           reduce using rule 49 (statement -> pppragma_directive .)
    RESTRICT        reduce using rule 49 (statement -> pppragma_directive .)
    VOLATILE        reduce using rule 49 (statement -> pppragma_directive .)
    VOID            reduce using rule 49 (statement -> pppragma_directive .)
    _BOOL           reduce using rule 49 (statement -> pppragma_directive .)
    CHAR            reduce using rule 49 (statement -> pppragma_directive .)
    SHORT           reduce using rule 49 (statement -> pppragma_directive .)
    INT             reduce using rule 49 (statement -> pppragma_directive .)
    LONG            reduce using rule 49 (statement -> pppragma_directive .)
    FLOAT           reduce using rule 49 (statement -> pppragma_directive .)
    DOUBLE          reduce using rule 49 (statement -> pppragma_directive .)
    _COMPLEX        reduce using rule 49 (statement -> pppragma_directive .)
    SIGNED          reduce using rule 49 (statement -> pppragma_directive .)
    UNSIGNED        reduce using rule 49 (statement -> pppragma_directive .)
    AUTO            reduce using rule 49 (statement -> pppragma_directive .)
    REGISTER        reduce using rule 49 (statement -> pppragma_directive .)
    STATIC          reduce using rule 49 (statement -> pppragma_directive .)
    EXTERN          reduce using rule 49 (statement -> pppragma_directive .)
    TYPEDEF         reduce using rule 49 (statement -> pppragma_directive .)
    INLINE          reduce using rule 49 (statement -> pppragma_directive .)
    TYPEID          reduce using rule 49 (statement -> pppragma_directive .)
    ENUM            reduce using rule 49 (statement -> pppragma_directive .)
    STRUCT          reduce using rule 49 (statement -> pppragma_directive .)
    UNION           reduce using rule 49 (statement -> pppragma_directive .)
    PLUSPLUS        reduce using rule 49 (statement -> pppragma_directive .)
    MINUSMINUS      reduce using rule 49 (statement -> pppragma_directive .)
    SIZEOF          reduce using rule 49 (statement -> pppragma_directive .)
    LPAREN          reduce using rule 49 (statement -> pppragma_directive .)
    AND             reduce using rule 49 (statement -> pppragma_directive .)
    TIMES           reduce using rule 49 (statement -> pppragma_directive .)
    PLUS            reduce using rule 49 (statement -> pppragma_directive .)
    MINUS           reduce using rule 49 (statement -> pppragma_directive .)
    NOT             reduce using rule 49 (statement -> pppragma_directive .)
    LNOT            reduce using rule 49 (statement -> pppragma_directive .)
    OFFSETOF        reduce using rule 49 (statement -> pppragma_directive .)
    INT_CONST_DEC   reduce using rule 49 (statement -> pppragma_directive .)
    INT_CONST_OCT   reduce using rule 49 (statement -> pppragma_directive .)
    INT_CONST_HEX   reduce using rule 49 (statement -> pppragma_directive .)
    INT_CONST_BIN   reduce using rule 49 (statement -> pppragma_directive .)
    FLOAT_CONST     reduce using rule 49 (statement -> pppragma_directive .)
    HEX_FLOAT_CONST reduce using rule 49 (statement -> pppragma_directive .)
    CHAR_CONST      reduce using rule 49 (statement -> pppragma_directive .)
    WCHAR_CONST     reduce using rule 49 (statement -> pppragma_directive .)
    STRING_LITERAL  reduce using rule 49 (statement -> pppragma_directive .)
    WSTRING_LITERAL reduce using rule 49 (statement -> pppragma_directive .)
    SEMI            reduce using rule 49 (statement -> pppragma_directive .)
    RBRACE          reduce using rule 49 (statement -> pppragma_directive .)
    ELSE            reduce using rule 49 (statement -> pppragma_directive .)


state 217

    (181) expression -> assignment_expression .

    COMMA           reduce using rule 181 (expression -> assignment_expression .)
    SEMI            reduce using rule 181 (expression -> assignment_expression .)
    RPAREN          reduce using rule 181 (expression -> assignment_expression .)
    COLON           reduce using rule 181 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 181 (expression -> assignment_expression .)


state 218

    (176) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 330


state 219

    (164) compound_statement -> brace_open block_item_list_opt . brace_close
    (267) brace_close -> . RBRACE

    RBRACE          shift and go to state 181

    brace_close                    shift and go to state 331

state 220

    (14) expression_opt -> expression .
    (182) expression -> expression . COMMA assignment_expression

    RPAREN          reduce using rule 14 (expression_opt -> expression .)
    SEMI            reduce using rule 14 (expression_opt -> expression .)
    COMMA           shift and go to state 332


state 221

    (171) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 333


state 222

    (175) jump_statement -> GOTO . ID SEMI

    ID              shift and go to state 334


state 223

    (45) statement -> compound_statement .

    ID              reduce using rule 45 (statement -> compound_statement .)
    CASE            reduce using rule 45 (statement -> compound_statement .)
    DEFAULT         reduce using rule 45 (statement -> compound_statement .)
    IF              reduce using rule 45 (statement -> compound_statement .)
    SWITCH          reduce using rule 45 (statement -> compound_statement .)
    WHILE           reduce using rule 45 (statement -> compound_statement .)
    DO              reduce using rule 45 (statement -> compound_statement .)
    FOR             reduce using rule 45 (statement -> compound_statement .)
    GOTO            reduce using rule 45 (statement -> compound_statement .)
    BREAK           reduce using rule 45 (statement -> compound_statement .)
    CONTINUE        reduce using rule 45 (statement -> compound_statement .)
    RETURN          reduce using rule 45 (statement -> compound_statement .)
    PPPRAGMA        reduce using rule 45 (statement -> compound_statement .)
    LBRACE          reduce using rule 45 (statement -> compound_statement .)
    CONST           reduce using rule 45 (statement -> compound_statement .)
    RESTRICT        reduce using rule 45 (statement -> compound_statement .)
    VOLATILE        reduce using rule 45 (statement -> compound_statement .)
    VOID            reduce using rule 45 (statement -> compound_statement .)
    _BOOL           reduce using rule 45 (statement -> compound_statement .)
    CHAR            reduce using rule 45 (statement -> compound_statement .)
    SHORT           reduce using rule 45 (statement -> compound_statement .)
    INT             reduce using rule 45 (statement -> compound_statement .)
    LONG            reduce using rule 45 (statement -> compound_statement .)
    FLOAT           reduce using rule 45 (statement -> compound_statement .)
    DOUBLE          reduce using rule 45 (statement -> compound_statement .)
    _COMPLEX        reduce using rule 45 (statement -> compound_statement .)
    SIGNED          reduce using rule 45 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 45 (statement -> compound_statement .)
    AUTO            reduce using rule 45 (statement -> compound_statement .)
    REGISTER        reduce using rule 45 (statement -> compound_statement .)
    STATIC          reduce using rule 45 (statement -> compound_statement .)
    EXTERN          reduce using rule 45 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 45 (statement -> compound_statement .)
    INLINE          reduce using rule 45 (statement -> compound_statement .)
    TYPEID          reduce using rule 45 (statement -> compound_statement .)
    ENUM            reduce using rule 45 (statement -> compound_statement .)
    STRUCT          reduce using rule 45 (statement -> compound_statement .)
    UNION           reduce using rule 45 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 45 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 45 (statement -> compound_statement .)
    SIZEOF          reduce using rule 45 (statement -> compound_statement .)
    LPAREN          reduce using rule 45 (statement -> compound_statement .)
    AND             reduce using rule 45 (statement -> compound_statement .)
    TIMES           reduce using rule 45 (statement -> compound_statement .)
    PLUS            reduce using rule 45 (statement -> compound_statement .)
    MINUS           reduce using rule 45 (statement -> compound_statement .)
    NOT             reduce using rule 45 (statement -> compound_statement .)
    LNOT            reduce using rule 45 (statement -> compound_statement .)
    OFFSETOF        reduce using rule 45 (statement -> compound_statement .)
    INT_CONST_DEC   reduce using rule 45 (statement -> compound_statement .)
    INT_CONST_OCT   reduce using rule 45 (statement -> compound_statement .)
    INT_CONST_HEX   reduce using rule 45 (statement -> compound_statement .)
    INT_CONST_BIN   reduce using rule 45 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 45 (statement -> compound_statement .)
    HEX_FLOAT_CONST reduce using rule 45 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 45 (statement -> compound_statement .)
    WCHAR_CONST     reduce using rule 45 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 45 (statement -> compound_statement .)
    WSTRING_LITERAL reduce using rule 45 (statement -> compound_statement .)
    SEMI            reduce using rule 45 (statement -> compound_statement .)
    RBRACE          reduce using rule 45 (statement -> compound_statement .)
    ELSE            reduce using rule 45 (statement -> compound_statement .)


state 224

    (168) selection_statement -> IF . LPAREN expression RPAREN statement
    (169) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 335


state 225

    (167) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 336


state 226

    (162) block_item_list -> block_item .

    ID              reduce using rule 162 (block_item_list -> block_item .)
    CASE            reduce using rule 162 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 162 (block_item_list -> block_item .)
    IF              reduce using rule 162 (block_item_list -> block_item .)
    SWITCH          reduce using rule 162 (block_item_list -> block_item .)
    WHILE           reduce using rule 162 (block_item_list -> block_item .)
    DO              reduce using rule 162 (block_item_list -> block_item .)
    FOR             reduce using rule 162 (block_item_list -> block_item .)
    GOTO            reduce using rule 162 (block_item_list -> block_item .)
    BREAK           reduce using rule 162 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 162 (block_item_list -> block_item .)
    RETURN          reduce using rule 162 (block_item_list -> block_item .)
    PPPRAGMA        reduce using rule 162 (block_item_list -> block_item .)
    LBRACE          reduce using rule 162 (block_item_list -> block_item .)
    CONST           reduce using rule 162 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 162 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 162 (block_item_list -> block_item .)
    VOID            reduce using rule 162 (block_item_list -> block_item .)
    _BOOL           reduce using rule 162 (block_item_list -> block_item .)
    CHAR            reduce using rule 162 (block_item_list -> block_item .)
    SHORT           reduce using rule 162 (block_item_list -> block_item .)
    INT             reduce using rule 162 (block_item_list -> block_item .)
    LONG            reduce using rule 162 (block_item_list -> block_item .)
    FLOAT           reduce using rule 162 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 162 (block_item_list -> block_item .)
    _COMPLEX        reduce using rule 162 (block_item_list -> block_item .)
    SIGNED          reduce using rule 162 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 162 (block_item_list -> block_item .)
    AUTO            reduce using rule 162 (block_item_list -> block_item .)
    REGISTER        reduce using rule 162 (block_item_list -> block_item .)
    STATIC          reduce using rule 162 (block_item_list -> block_item .)
    EXTERN          reduce using rule 162 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 162 (block_item_list -> block_item .)
    INLINE          reduce using rule 162 (block_item_list -> block_item .)
    TYPEID          reduce using rule 162 (block_item_list -> block_item .)
    ENUM            reduce using rule 162 (block_item_list -> block_item .)
    STRUCT          reduce using rule 162 (block_item_list -> block_item .)
    UNION           reduce using rule 162 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 162 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 162 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 162 (block_item_list -> block_item .)
    LPAREN          reduce using rule 162 (block_item_list -> block_item .)
    AND             reduce using rule 162 (block_item_list -> block_item .)
    TIMES           reduce using rule 162 (block_item_list -> block_item .)
    PLUS            reduce using rule 162 (block_item_list -> block_item .)
    MINUS           reduce using rule 162 (block_item_list -> block_item .)
    NOT             reduce using rule 162 (block_item_list -> block_item .)
    LNOT            reduce using rule 162 (block_item_list -> block_item .)
    OFFSETOF        reduce using rule 162 (block_item_list -> block_item .)
    INT_CONST_DEC   reduce using rule 162 (block_item_list -> block_item .)
    INT_CONST_OCT   reduce using rule 162 (block_item_list -> block_item .)
    INT_CONST_HEX   reduce using rule 162 (block_item_list -> block_item .)
    INT_CONST_BIN   reduce using rule 162 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 162 (block_item_list -> block_item .)
    HEX_FLOAT_CONST reduce using rule 162 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 162 (block_item_list -> block_item .)
    WCHAR_CONST     reduce using rule 162 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 162 (block_item_list -> block_item .)
    WSTRING_LITERAL reduce using rule 162 (block_item_list -> block_item .)
    SEMI            reduce using rule 162 (block_item_list -> block_item .)
    RBRACE          reduce using rule 162 (block_item_list -> block_item .)


state 227

    (165) labeled_statement -> ID . COLON statement
    (253) identifier -> ID .

    COLON           shift and go to state 337
    LBRACKET        reduce using rule 253 (identifier -> ID .)
    LPAREN          reduce using rule 253 (identifier -> ID .)
    PERIOD          reduce using rule 253 (identifier -> ID .)
    ARROW           reduce using rule 253 (identifier -> ID .)
    PLUSPLUS        reduce using rule 253 (identifier -> ID .)
    MINUSMINUS      reduce using rule 253 (identifier -> ID .)
    EQUALS          reduce using rule 253 (identifier -> ID .)
    XOREQUAL        reduce using rule 253 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 253 (identifier -> ID .)
    DIVEQUAL        reduce using rule 253 (identifier -> ID .)
    MODEQUAL        reduce using rule 253 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 253 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 253 (identifier -> ID .)
    LSHIFTEQUAL     reduce using rule 253 (identifier -> ID .)
    RSHIFTEQUAL     reduce using rule 253 (identifier -> ID .)
    ANDEQUAL        reduce using rule 253 (identifier -> ID .)
    OREQUAL         reduce using rule 253 (identifier -> ID .)
    CONDOP          reduce using rule 253 (identifier -> ID .)
    TIMES           reduce using rule 253 (identifier -> ID .)
    DIVIDE          reduce using rule 253 (identifier -> ID .)
    MOD             reduce using rule 253 (identifier -> ID .)
    PLUS            reduce using rule 253 (identifier -> ID .)
    MINUS           reduce using rule 253 (identifier -> ID .)
    RSHIFT          reduce using rule 253 (identifier -> ID .)
    LSHIFT          reduce using rule 253 (identifier -> ID .)
    LT              reduce using rule 253 (identifier -> ID .)
    LE              reduce using rule 253 (identifier -> ID .)
    GE              reduce using rule 253 (identifier -> ID .)
    GT              reduce using rule 253 (identifier -> ID .)
    EQ              reduce using rule 253 (identifier -> ID .)
    NE              reduce using rule 253 (identifier -> ID .)
    AND             reduce using rule 253 (identifier -> ID .)
    OR              reduce using rule 253 (identifier -> ID .)
    XOR             reduce using rule 253 (identifier -> ID .)
    LAND            reduce using rule 253 (identifier -> ID .)
    LOR             reduce using rule 253 (identifier -> ID .)
    COMMA           reduce using rule 253 (identifier -> ID .)
    SEMI            reduce using rule 253 (identifier -> ID .)


state 228

    (47) statement -> iteration_statement .

    ID              reduce using rule 47 (statement -> iteration_statement .)
    CASE            reduce using rule 47 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 47 (statement -> iteration_statement .)
    IF              reduce using rule 47 (statement -> iteration_statement .)
    SWITCH          reduce using rule 47 (statement -> iteration_statement .)
    WHILE           reduce using rule 47 (statement -> iteration_statement .)
    DO              reduce using rule 47 (statement -> iteration_statement .)
    FOR             reduce using rule 47 (statement -> iteration_statement .)
    GOTO            reduce using rule 47 (statement -> iteration_statement .)
    BREAK           reduce using rule 47 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 47 (statement -> iteration_statement .)
    RETURN          reduce using rule 47 (statement -> iteration_statement .)
    PPPRAGMA        reduce using rule 47 (statement -> iteration_statement .)
    LBRACE          reduce using rule 47 (statement -> iteration_statement .)
    CONST           reduce using rule 47 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 47 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 47 (statement -> iteration_statement .)
    VOID            reduce using rule 47 (statement -> iteration_statement .)
    _BOOL           reduce using rule 47 (statement -> iteration_statement .)
    CHAR            reduce using rule 47 (statement -> iteration_statement .)
    SHORT           reduce using rule 47 (statement -> iteration_statement .)
    INT             reduce using rule 47 (statement -> iteration_statement .)
    LONG            reduce using rule 47 (statement -> iteration_statement .)
    FLOAT           reduce using rule 47 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 47 (statement -> iteration_statement .)
    _COMPLEX        reduce using rule 47 (statement -> iteration_statement .)
    SIGNED          reduce using rule 47 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 47 (statement -> iteration_statement .)
    AUTO            reduce using rule 47 (statement -> iteration_statement .)
    REGISTER        reduce using rule 47 (statement -> iteration_statement .)
    STATIC          reduce using rule 47 (statement -> iteration_statement .)
    EXTERN          reduce using rule 47 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 47 (statement -> iteration_statement .)
    INLINE          reduce using rule 47 (statement -> iteration_statement .)
    TYPEID          reduce using rule 47 (statement -> iteration_statement .)
    ENUM            reduce using rule 47 (statement -> iteration_statement .)
    STRUCT          reduce using rule 47 (statement -> iteration_statement .)
    UNION           reduce using rule 47 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 47 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 47 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 47 (statement -> iteration_statement .)
    LPAREN          reduce using rule 47 (statement -> iteration_statement .)
    AND             reduce using rule 47 (statement -> iteration_statement .)
    TIMES           reduce using rule 47 (statement -> iteration_statement .)
    PLUS            reduce using rule 47 (statement -> iteration_statement .)
    MINUS           reduce using rule 47 (statement -> iteration_statement .)
    NOT             reduce using rule 47 (statement -> iteration_statement .)
    LNOT            reduce using rule 47 (statement -> iteration_statement .)
    OFFSETOF        reduce using rule 47 (statement -> iteration_statement .)
    INT_CONST_DEC   reduce using rule 47 (statement -> iteration_statement .)
    INT_CONST_OCT   reduce using rule 47 (statement -> iteration_statement .)
    INT_CONST_HEX   reduce using rule 47 (statement -> iteration_statement .)
    INT_CONST_BIN   reduce using rule 47 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 47 (statement -> iteration_statement .)
    HEX_FLOAT_CONST reduce using rule 47 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 47 (statement -> iteration_statement .)
    WCHAR_CONST     reduce using rule 47 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 47 (statement -> iteration_statement .)
    WSTRING_LITERAL reduce using rule 47 (statement -> iteration_statement .)
    SEMI            reduce using rule 47 (statement -> iteration_statement .)
    RBRACE          reduce using rule 47 (statement -> iteration_statement .)
    ELSE            reduce using rule 47 (statement -> iteration_statement .)


state 229

    (48) statement -> jump_statement .

    ID              reduce using rule 48 (statement -> jump_statement .)
    CASE            reduce using rule 48 (statement -> jump_statement .)
    DEFAULT         reduce using rule 48 (statement -> jump_statement .)
    IF              reduce using rule 48 (statement -> jump_statement .)
    SWITCH          reduce using rule 48 (statement -> jump_statement .)
    WHILE           reduce using rule 48 (statement -> jump_statement .)
    DO              reduce using rule 48 (statement -> jump_statement .)
    FOR             reduce using rule 48 (statement -> jump_statement .)
    GOTO            reduce using rule 48 (statement -> jump_statement .)
    BREAK           reduce using rule 48 (statement -> jump_statement .)
    CONTINUE        reduce using rule 48 (statement -> jump_statement .)
    RETURN          reduce using rule 48 (statement -> jump_statement .)
    PPPRAGMA        reduce using rule 48 (statement -> jump_statement .)
    LBRACE          reduce using rule 48 (statement -> jump_statement .)
    CONST           reduce using rule 48 (statement -> jump_statement .)
    RESTRICT        reduce using rule 48 (statement -> jump_statement .)
    VOLATILE        reduce using rule 48 (statement -> jump_statement .)
    VOID            reduce using rule 48 (statement -> jump_statement .)
    _BOOL           reduce using rule 48 (statement -> jump_statement .)
    CHAR            reduce using rule 48 (statement -> jump_statement .)
    SHORT           reduce using rule 48 (statement -> jump_statement .)
    INT             reduce using rule 48 (statement -> jump_statement .)
    LONG            reduce using rule 48 (statement -> jump_statement .)
    FLOAT           reduce using rule 48 (statement -> jump_statement .)
    DOUBLE          reduce using rule 48 (statement -> jump_statement .)
    _COMPLEX        reduce using rule 48 (statement -> jump_statement .)
    SIGNED          reduce using rule 48 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 48 (statement -> jump_statement .)
    AUTO            reduce using rule 48 (statement -> jump_statement .)
    REGISTER        reduce using rule 48 (statement -> jump_statement .)
    STATIC          reduce using rule 48 (statement -> jump_statement .)
    EXTERN          reduce using rule 48 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 48 (statement -> jump_statement .)
    INLINE          reduce using rule 48 (statement -> jump_statement .)
    TYPEID          reduce using rule 48 (statement -> jump_statement .)
    ENUM            reduce using rule 48 (statement -> jump_statement .)
    STRUCT          reduce using rule 48 (statement -> jump_statement .)
    UNION           reduce using rule 48 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 48 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 48 (statement -> jump_statement .)
    SIZEOF          reduce using rule 48 (statement -> jump_statement .)
    LPAREN          reduce using rule 48 (statement -> jump_statement .)
    AND             reduce using rule 48 (statement -> jump_statement .)
    TIMES           reduce using rule 48 (statement -> jump_statement .)
    PLUS            reduce using rule 48 (statement -> jump_statement .)
    MINUS           reduce using rule 48 (statement -> jump_statement .)
    NOT             reduce using rule 48 (statement -> jump_statement .)
    LNOT            reduce using rule 48 (statement -> jump_statement .)
    OFFSETOF        reduce using rule 48 (statement -> jump_statement .)
    INT_CONST_DEC   reduce using rule 48 (statement -> jump_statement .)
    INT_CONST_OCT   reduce using rule 48 (statement -> jump_statement .)
    INT_CONST_HEX   reduce using rule 48 (statement -> jump_statement .)
    INT_CONST_BIN   reduce using rule 48 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 48 (statement -> jump_statement .)
    HEX_FLOAT_CONST reduce using rule 48 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 48 (statement -> jump_statement .)
    WCHAR_CONST     reduce using rule 48 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 48 (statement -> jump_statement .)
    WSTRING_LITERAL reduce using rule 48 (statement -> jump_statement .)
    SEMI            reduce using rule 48 (statement -> jump_statement .)
    RBRACE          reduce using rule 48 (statement -> jump_statement .)
    ELSE            reduce using rule 48 (statement -> jump_statement .)


state 230

    (172) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMI
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 338
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 231

    (166) labeled_statement -> CASE . constant_expression COLON statement
    (197) constant_expression -> . conditional_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    conditional_expression         shift and go to state 312
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    constant                       shift and go to state 146
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    constant_expression            shift and go to state 339
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    postfix_expression             shift and go to state 147

state 232

    (115) enumerator -> ID EQUALS . constant_expression
    (197) constant_expression -> . conditional_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    constant                       shift and go to state 146
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    constant_expression            shift and go to state 340
    conditional_expression         shift and go to state 312
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    postfix_expression             shift and go to state 147

state 233

    (112) enumerator_list -> enumerator_list COMMA .
    (113) enumerator_list -> enumerator_list COMMA . enumerator
    (114) enumerator -> . ID
    (115) enumerator -> . ID EQUALS constant_expression

    COMMA           reduce using rule 112 (enumerator_list -> enumerator_list COMMA .)
    RBRACE          reduce using rule 112 (enumerator_list -> enumerator_list COMMA .)
    ID              shift and go to state 122

    enumerator                     shift and go to state 341

state 234

    (108) enum_specifier -> ENUM brace_open enumerator_list brace_close .

    CONST           reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    VOID            reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INT             reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LONG            reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ENUM            reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    STRUCT          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    UNION           reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    ID              reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    EQUALS          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)
    COLON           reduce using rule 108 (enum_specifier -> ENUM brace_open enumerator_list brace_close .)


state 235

    (109) enum_specifier -> ENUM ID brace_open enumerator_list . brace_close
    (112) enumerator_list -> enumerator_list . COMMA
    (113) enumerator_list -> enumerator_list . COMMA enumerator
    (267) brace_close -> . RBRACE

    COMMA           shift and go to state 233
    RBRACE          shift and go to state 181

    brace_close                    shift and go to state 342

state 236

    (110) enum_specifier -> ENUM TYPEID brace_open enumerator_list . brace_close
    (112) enumerator_list -> enumerator_list . COMMA
    (113) enumerator_list -> enumerator_list . COMMA enumerator
    (267) brace_close -> . RBRACE

    COMMA           shift and go to state 233
    RBRACE          shift and go to state 181

    brace_close                    shift and go to state 343

state 237

    (158) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt . RPAREN

    RPAREN          shift and go to state 344


state 238

    (154) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt . RBRACKET

    RBRACKET        shift and go to state 345


state 239

    (156) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES . RBRACKET
    (228) unary_operator -> TIMES .

    RBRACKET        shift and go to state 346
    LPAREN          reduce using rule 228 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 228 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 228 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 228 (unary_operator -> TIMES .)
    AND             reduce using rule 228 (unary_operator -> TIMES .)
    TIMES           reduce using rule 228 (unary_operator -> TIMES .)
    PLUS            reduce using rule 228 (unary_operator -> TIMES .)
    MINUS           reduce using rule 228 (unary_operator -> TIMES .)
    NOT             reduce using rule 228 (unary_operator -> TIMES .)
    LNOT            reduce using rule 228 (unary_operator -> TIMES .)
    OFFSETOF        reduce using rule 228 (unary_operator -> TIMES .)
    ID              reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_DEC   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_OCT   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_HEX   reduce using rule 228 (unary_operator -> TIMES .)
    INT_CONST_BIN   reduce using rule 228 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 228 (unary_operator -> TIMES .)
    HEX_FLOAT_CONST reduce using rule 228 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 228 (unary_operator -> TIMES .)
    WCHAR_CONST     reduce using rule 228 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 228 (unary_operator -> TIMES .)
    WSTRING_LITERAL reduce using rule 228 (unary_operator -> TIMES .)


state 240

    (153) direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .

    LBRACKET        reduce using rule 153 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    LPAREN          reduce using rule 153 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    COMMA           reduce using rule 153 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    SEMI            reduce using rule 153 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)
    RPAREN          reduce using rule 153 (direct_abstract_declarator -> LPAREN abstract_declarator RPAREN .)


state 241

    (159) direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 159 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 159 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 159 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    SEMI            reduce using rule 159 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 159 (direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN .)


state 242

    (82) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 82 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 82 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 243

    (190) assignment_operator -> MODEQUAL .

    PLUSPLUS        reduce using rule 190 (assignment_operator -> MODEQUAL .)
    MINUSMINUS      reduce using rule 190 (assignment_operator -> MODEQUAL .)
    SIZEOF          reduce using rule 190 (assignment_operator -> MODEQUAL .)
    LPAREN          reduce using rule 190 (assignment_operator -> MODEQUAL .)
    AND             reduce using rule 190 (assignment_operator -> MODEQUAL .)
    TIMES           reduce using rule 190 (assignment_operator -> MODEQUAL .)
    PLUS            reduce using rule 190 (assignment_operator -> MODEQUAL .)
    MINUS           reduce using rule 190 (assignment_operator -> MODEQUAL .)
    NOT             reduce using rule 190 (assignment_operator -> MODEQUAL .)
    LNOT            reduce using rule 190 (assignment_operator -> MODEQUAL .)
    OFFSETOF        reduce using rule 190 (assignment_operator -> MODEQUAL .)
    ID              reduce using rule 190 (assignment_operator -> MODEQUAL .)
    INT_CONST_DEC   reduce using rule 190 (assignment_operator -> MODEQUAL .)
    INT_CONST_OCT   reduce using rule 190 (assignment_operator -> MODEQUAL .)
    INT_CONST_HEX   reduce using rule 190 (assignment_operator -> MODEQUAL .)
    INT_CONST_BIN   reduce using rule 190 (assignment_operator -> MODEQUAL .)
    FLOAT_CONST     reduce using rule 190 (assignment_operator -> MODEQUAL .)
    HEX_FLOAT_CONST reduce using rule 190 (assignment_operator -> MODEQUAL .)
    CHAR_CONST      reduce using rule 190 (assignment_operator -> MODEQUAL .)
    WCHAR_CONST     reduce using rule 190 (assignment_operator -> MODEQUAL .)
    STRING_LITERAL  reduce using rule 190 (assignment_operator -> MODEQUAL .)
    WSTRING_LITERAL reduce using rule 190 (assignment_operator -> MODEQUAL .)


state 244

    (196) assignment_operator -> OREQUAL .

    PLUSPLUS        reduce using rule 196 (assignment_operator -> OREQUAL .)
    MINUSMINUS      reduce using rule 196 (assignment_operator -> OREQUAL .)
    SIZEOF          reduce using rule 196 (assignment_operator -> OREQUAL .)
    LPAREN          reduce using rule 196 (assignment_operator -> OREQUAL .)
    AND             reduce using rule 196 (assignment_operator -> OREQUAL .)
    TIMES           reduce using rule 196 (assignment_operator -> OREQUAL .)
    PLUS            reduce using rule 196 (assignment_operator -> OREQUAL .)
    MINUS           reduce using rule 196 (assignment_operator -> OREQUAL .)
    NOT             reduce using rule 196 (assignment_operator -> OREQUAL .)
    LNOT            reduce using rule 196 (assignment_operator -> OREQUAL .)
    OFFSETOF        reduce using rule 196 (assignment_operator -> OREQUAL .)
    ID              reduce using rule 196 (assignment_operator -> OREQUAL .)
    INT_CONST_DEC   reduce using rule 196 (assignment_operator -> OREQUAL .)
    INT_CONST_OCT   reduce using rule 196 (assignment_operator -> OREQUAL .)
    INT_CONST_HEX   reduce using rule 196 (assignment_operator -> OREQUAL .)
    INT_CONST_BIN   reduce using rule 196 (assignment_operator -> OREQUAL .)
    FLOAT_CONST     reduce using rule 196 (assignment_operator -> OREQUAL .)
    HEX_FLOAT_CONST reduce using rule 196 (assignment_operator -> OREQUAL .)
    CHAR_CONST      reduce using rule 196 (assignment_operator -> OREQUAL .)
    WCHAR_CONST     reduce using rule 196 (assignment_operator -> OREQUAL .)
    STRING_LITERAL  reduce using rule 196 (assignment_operator -> OREQUAL .)
    WSTRING_LITERAL reduce using rule 196 (assignment_operator -> OREQUAL .)


state 245

    (194) assignment_operator -> RSHIFTEQUAL .

    PLUSPLUS        reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    SIZEOF          reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    LPAREN          reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    AND             reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    TIMES           reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    PLUS            reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    MINUS           reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    NOT             reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    LNOT            reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    OFFSETOF        reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    ID              reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    INT_CONST_BIN   reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 194 (assignment_operator -> RSHIFTEQUAL .)


state 246

    (187) assignment_operator -> XOREQUAL .

    PLUSPLUS        reduce using rule 187 (assignment_operator -> XOREQUAL .)
    MINUSMINUS      reduce using rule 187 (assignment_operator -> XOREQUAL .)
    SIZEOF          reduce using rule 187 (assignment_operator -> XOREQUAL .)
    LPAREN          reduce using rule 187 (assignment_operator -> XOREQUAL .)
    AND             reduce using rule 187 (assignment_operator -> XOREQUAL .)
    TIMES           reduce using rule 187 (assignment_operator -> XOREQUAL .)
    PLUS            reduce using rule 187 (assignment_operator -> XOREQUAL .)
    MINUS           reduce using rule 187 (assignment_operator -> XOREQUAL .)
    NOT             reduce using rule 187 (assignment_operator -> XOREQUAL .)
    LNOT            reduce using rule 187 (assignment_operator -> XOREQUAL .)
    OFFSETOF        reduce using rule 187 (assignment_operator -> XOREQUAL .)
    ID              reduce using rule 187 (assignment_operator -> XOREQUAL .)
    INT_CONST_DEC   reduce using rule 187 (assignment_operator -> XOREQUAL .)
    INT_CONST_OCT   reduce using rule 187 (assignment_operator -> XOREQUAL .)
    INT_CONST_HEX   reduce using rule 187 (assignment_operator -> XOREQUAL .)
    INT_CONST_BIN   reduce using rule 187 (assignment_operator -> XOREQUAL .)
    FLOAT_CONST     reduce using rule 187 (assignment_operator -> XOREQUAL .)
    HEX_FLOAT_CONST reduce using rule 187 (assignment_operator -> XOREQUAL .)
    CHAR_CONST      reduce using rule 187 (assignment_operator -> XOREQUAL .)
    WCHAR_CONST     reduce using rule 187 (assignment_operator -> XOREQUAL .)
    STRING_LITERAL  reduce using rule 187 (assignment_operator -> XOREQUAL .)
    WSTRING_LITERAL reduce using rule 187 (assignment_operator -> XOREQUAL .)


state 247

    (195) assignment_operator -> ANDEQUAL .

    PLUSPLUS        reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    MINUSMINUS      reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    SIZEOF          reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    LPAREN          reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    AND             reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    TIMES           reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    PLUS            reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    MINUS           reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    NOT             reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    LNOT            reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    OFFSETOF        reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    ID              reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    INT_CONST_DEC   reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    INT_CONST_OCT   reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    INT_CONST_HEX   reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    INT_CONST_BIN   reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    FLOAT_CONST     reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    HEX_FLOAT_CONST reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    CHAR_CONST      reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    WCHAR_CONST     reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    STRING_LITERAL  reduce using rule 195 (assignment_operator -> ANDEQUAL .)
    WSTRING_LITERAL reduce using rule 195 (assignment_operator -> ANDEQUAL .)


state 248

    (192) assignment_operator -> MINUSEQUAL .

    PLUSPLUS        reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    SIZEOF          reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    LPAREN          reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    AND             reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    TIMES           reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    PLUS            reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    MINUS           reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    NOT             reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    LNOT            reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    OFFSETOF        reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    ID              reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_DEC   reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_OCT   reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_HEX   reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    INT_CONST_BIN   reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    FLOAT_CONST     reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    CHAR_CONST      reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    WCHAR_CONST     reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    STRING_LITERAL  reduce using rule 192 (assignment_operator -> MINUSEQUAL .)
    WSTRING_LITERAL reduce using rule 192 (assignment_operator -> MINUSEQUAL .)


state 249

    (191) assignment_operator -> PLUSEQUAL .

    PLUSPLUS        reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    SIZEOF          reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    LPAREN          reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    AND             reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    TIMES           reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    PLUS            reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    MINUS           reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    NOT             reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    LNOT            reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    OFFSETOF        reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    ID              reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_DEC   reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_OCT   reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_HEX   reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    INT_CONST_BIN   reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    FLOAT_CONST     reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    HEX_FLOAT_CONST reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    CHAR_CONST      reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    WCHAR_CONST     reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    STRING_LITERAL  reduce using rule 191 (assignment_operator -> PLUSEQUAL .)
    WSTRING_LITERAL reduce using rule 191 (assignment_operator -> PLUSEQUAL .)


state 250

    (193) assignment_operator -> LSHIFTEQUAL .

    PLUSPLUS        reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    MINUSMINUS      reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    SIZEOF          reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    LPAREN          reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    AND             reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    TIMES           reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    PLUS            reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    MINUS           reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    NOT             reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    LNOT            reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    OFFSETOF        reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    ID              reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_DEC   reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_OCT   reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_HEX   reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    INT_CONST_BIN   reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    FLOAT_CONST     reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    HEX_FLOAT_CONST reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    CHAR_CONST      reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    WCHAR_CONST     reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    STRING_LITERAL  reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)
    WSTRING_LITERAL reduce using rule 193 (assignment_operator -> LSHIFTEQUAL .)


state 251

    (186) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 186 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 186 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 186 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 186 (assignment_operator -> EQUALS .)
    AND             reduce using rule 186 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 186 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 186 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 186 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 186 (assignment_operator -> EQUALS .)
    LNOT            reduce using rule 186 (assignment_operator -> EQUALS .)
    OFFSETOF        reduce using rule 186 (assignment_operator -> EQUALS .)
    ID              reduce using rule 186 (assignment_operator -> EQUALS .)
    INT_CONST_DEC   reduce using rule 186 (assignment_operator -> EQUALS .)
    INT_CONST_OCT   reduce using rule 186 (assignment_operator -> EQUALS .)
    INT_CONST_HEX   reduce using rule 186 (assignment_operator -> EQUALS .)
    INT_CONST_BIN   reduce using rule 186 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 186 (assignment_operator -> EQUALS .)
    HEX_FLOAT_CONST reduce using rule 186 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 186 (assignment_operator -> EQUALS .)
    WCHAR_CONST     reduce using rule 186 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 186 (assignment_operator -> EQUALS .)
    WSTRING_LITERAL reduce using rule 186 (assignment_operator -> EQUALS .)


state 252

    (185) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 347
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 253

    (189) assignment_operator -> DIVEQUAL .

    PLUSPLUS        reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    SIZEOF          reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    LPAREN          reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    AND             reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    TIMES           reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    PLUS            reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    MINUS           reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    NOT             reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    LNOT            reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    OFFSETOF        reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    ID              reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    INT_CONST_DEC   reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    INT_CONST_OCT   reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    INT_CONST_HEX   reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    INT_CONST_BIN   reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    FLOAT_CONST     reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    HEX_FLOAT_CONST reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    CHAR_CONST      reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    WCHAR_CONST     reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    STRING_LITERAL  reduce using rule 189 (assignment_operator -> DIVEQUAL .)
    WSTRING_LITERAL reduce using rule 189 (assignment_operator -> DIVEQUAL .)


state 254

    (188) assignment_operator -> TIMESEQUAL .

    PLUSPLUS        reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    MINUSMINUS      reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    SIZEOF          reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    LPAREN          reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    AND             reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    TIMES           reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    PLUS            reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    MINUS           reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    NOT             reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    LNOT            reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    OFFSETOF        reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    ID              reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_DEC   reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_OCT   reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_HEX   reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    INT_CONST_BIN   reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    FLOAT_CONST     reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    HEX_FLOAT_CONST reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    CHAR_CONST      reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    WCHAR_CONST     reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    STRING_LITERAL  reduce using rule 188 (assignment_operator -> TIMESEQUAL .)
    WSTRING_LITERAL reduce using rule 188 (assignment_operator -> TIMESEQUAL .)


state 255

    (249) primary_expression -> LPAREN expression . RPAREN
    (182) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 348
    COMMA           shift and go to state 332


state 256

    (243) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close
    (220) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 349


state 257

    (149) type_name -> specifier_qualifier_list . abstract_declarator_opt
    (1) abstract_declarator_opt -> . empty
    (2) abstract_declarator_opt -> . abstract_declarator
    (268) empty -> .
    (150) abstract_declarator -> . pointer
    (151) abstract_declarator -> . pointer direct_abstract_declarator
    (152) abstract_declarator -> . direct_abstract_declarator
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 268 (empty -> .)
    COMMA           reduce using rule 268 (empty -> .)
    TIMES           shift and go to state 17
    LPAREN          shift and go to state 351
    LBRACKET        shift and go to state 85

    empty                          shift and go to state 200
    direct_abstract_declarator     shift and go to state 79
    abstract_declarator            shift and go to state 201
    abstract_declarator_opt        shift and go to state 350
    pointer                        shift and go to state 352

state 258

    (155) direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 155 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 155 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 155 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 155 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 155 (direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET .)


state 259

    (157) direct_abstract_declarator -> LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 157 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 157 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 157 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    SEMI            reduce using rule 157 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 157 (direct_abstract_declarator -> LBRACKET TIMES RBRACKET .)


state 260

    (234) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 353
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 261

    (241) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    PERIOD          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    ARROW           reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    GE              reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOR             reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    LAND            reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    LOR             reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    CONDOP          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    COLON           reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    XOREQUAL        reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQUAL      reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQUAL        reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQUAL        reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQUAL       reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQUAL      reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    LSHIFTEQUAL     reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    RSHIFTEQUAL     reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    ANDEQUAL        reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)
    OREQUAL         reduce using rule 241 (postfix_expression -> postfix_expression PLUSPLUS .)


state 262

    (237) postfix_expression -> postfix_expression PERIOD . ID
    (238) postfix_expression -> postfix_expression PERIOD . TYPEID

    ID              shift and go to state 355
    TYPEID          shift and go to state 354


state 263

    (235) postfix_expression -> postfix_expression LPAREN . argument_expression_list RPAREN
    (236) postfix_expression -> postfix_expression LPAREN . RPAREN
    (251) argument_expression_list -> . assignment_expression
    (252) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          shift and go to state 357
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 356
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147
    argument_expression_list       shift and go to state 358

state 264

    (242) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    PERIOD          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    ARROW           reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    GE              reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOR             reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    LAND            reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    LOR             reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    CONDOP          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    COLON           reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    XOREQUAL        reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQUAL      reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQUAL        reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQUAL        reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQUAL       reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQUAL      reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    LSHIFTEQUAL     reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    RSHIFTEQUAL     reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    ANDEQUAL        reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)
    OREQUAL         reduce using rule 242 (postfix_expression -> postfix_expression MINUSMINUS .)


state 265

    (239) postfix_expression -> postfix_expression ARROW . ID
    (240) postfix_expression -> postfix_expression ARROW . TYPEID

    ID              shift and go to state 360
    TYPEID          shift and go to state 359


state 266

    (219) cast_expression -> unary_expression .

    TIMES           reduce using rule 219 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 219 (cast_expression -> unary_expression .)
    MOD             reduce using rule 219 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 219 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 219 (cast_expression -> unary_expression .)
    RSHIFT          reduce using rule 219 (cast_expression -> unary_expression .)
    LSHIFT          reduce using rule 219 (cast_expression -> unary_expression .)
    LT              reduce using rule 219 (cast_expression -> unary_expression .)
    LE              reduce using rule 219 (cast_expression -> unary_expression .)
    GE              reduce using rule 219 (cast_expression -> unary_expression .)
    GT              reduce using rule 219 (cast_expression -> unary_expression .)
    EQ              reduce using rule 219 (cast_expression -> unary_expression .)
    NE              reduce using rule 219 (cast_expression -> unary_expression .)
    AND             reduce using rule 219 (cast_expression -> unary_expression .)
    OR              reduce using rule 219 (cast_expression -> unary_expression .)
    XOR             reduce using rule 219 (cast_expression -> unary_expression .)
    LAND            reduce using rule 219 (cast_expression -> unary_expression .)
    LOR             reduce using rule 219 (cast_expression -> unary_expression .)
    CONDOP          reduce using rule 219 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 219 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 219 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 219 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 219 (cast_expression -> unary_expression .)
    COLON           reduce using rule 219 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 219 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 219 (cast_expression -> unary_expression .)
    XOREQUAL        reduce using rule 219 (cast_expression -> unary_expression .)
    TIMESEQUAL      reduce using rule 219 (cast_expression -> unary_expression .)
    DIVEQUAL        reduce using rule 219 (cast_expression -> unary_expression .)
    MODEQUAL        reduce using rule 219 (cast_expression -> unary_expression .)
    PLUSEQUAL       reduce using rule 219 (cast_expression -> unary_expression .)
    MINUSEQUAL      reduce using rule 219 (cast_expression -> unary_expression .)
    LSHIFTEQUAL     reduce using rule 219 (cast_expression -> unary_expression .)
    RSHIFTEQUAL     reduce using rule 219 (cast_expression -> unary_expression .)
    ANDEQUAL        reduce using rule 219 (cast_expression -> unary_expression .)
    OREQUAL         reduce using rule 219 (cast_expression -> unary_expression .)


state 267

    (224) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    XOREQUAL        reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    TIMESEQUAL      reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    DIVEQUAL        reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    MODEQUAL        reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    PLUSEQUAL       reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    MINUSEQUAL      reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    LSHIFTEQUAL     reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    RSHIFTEQUAL     reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    ANDEQUAL        reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    OREQUAL         reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    CONDOP          reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    RSHIFT          reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    LSHIFT          reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    LAND            reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    LOR             reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 224 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 224 (unary_expression -> unary_operator cast_expression .)


state 268

    (220) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (243) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (249) primary_expression -> LPAREN . expression RPAREN
    (149) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    identifier                     shift and go to state 156
    type_name                      shift and go to state 361
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 255
    type_qualifier                 shift and go to state 95
    typedef_name                   shift and go to state 11
    enum_specifier                 shift and go to state 33
    struct_or_union_specifier      shift and go to state 36
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    type_specifier                 shift and go to state 96
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    specifier_qualifier_list       shift and go to state 257
    struct_or_union                shift and go to state 8

state 269

    (263) unified_string_literal -> unified_string_literal STRING_LITERAL .

    STRING_LITERAL  reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LBRACKET        reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LPAREN          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PERIOD          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ARROW           reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSPLUS        reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSMINUS      reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQUALS          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOREQUAL        reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMESEQUAL      reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVEQUAL        reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MODEQUAL        reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUSEQUAL       reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUSEQUAL      reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    ANDEQUAL        reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OREQUAL         reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    CONDOP          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    TIMES           reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    DIVIDE          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MOD             reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    PLUS            reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    MINUS           reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RSHIFT          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LSHIFT          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LT              reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LE              reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GE              reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    GT              reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    EQ              reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    NE              reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    AND             reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    OR              reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    XOR             reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LAND            reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    LOR             reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACKET        reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COMMA           reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    SEMI            reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RBRACE          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    RPAREN          reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)
    COLON           reduce using rule 263 (unified_string_literal -> unified_string_literal STRING_LITERAL .)


state 270

    (225) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    XOREQUAL        reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    TIMESEQUAL      reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    DIVEQUAL        reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    MODEQUAL        reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    PLUSEQUAL       reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    MINUSEQUAL      reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    LSHIFTEQUAL     reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    RSHIFTEQUAL     reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    ANDEQUAL        reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    OREQUAL         reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    CONDOP          reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    TIMES           reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    RSHIFT          reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    LSHIFT          reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    LT              reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    GT              reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    EQ              reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    LAND            reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    LOR             reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    SEMI            reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    RBRACKET        reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    RPAREN          reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)
    RBRACE          reduce using rule 225 (unary_expression -> SIZEOF unary_expression .)


state 271

    (226) unary_expression -> SIZEOF LPAREN . type_name RPAREN
    (243) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (249) primary_expression -> LPAREN . expression RPAREN
    (149) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    identifier                     shift and go to state 156
    type_name                      shift and go to state 362
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    enum_specifier                 shift and go to state 33
    expression                     shift and go to state 255
    type_qualifier                 shift and go to state 95
    typedef_name                   shift and go to state 11
    cast_expression                shift and go to state 139
    struct_or_union_specifier      shift and go to state 36
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    type_specifier                 shift and go to state 96
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    specifier_qualifier_list       shift and go to state 257
    struct_or_union                shift and go to state 8

state 272

    (222) unary_expression -> PLUSPLUS unary_expression .

    EQUALS          reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    XOREQUAL        reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQUAL      reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQUAL        reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQUAL        reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQUAL       reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQUAL      reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    ANDEQUAL        reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    OREQUAL         reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    CONDOP          reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    TIMES           reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    GE              reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    XOR             reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    LAND            reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    LOR             reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    COLON           reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 222 (unary_expression -> PLUSPLUS unary_expression .)


state 273

    (243) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN . type_name RPAREN brace_open initializer_list COMMA brace_close
    (249) primary_expression -> LPAREN . expression RPAREN
    (149) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    identifier                     shift and go to state 156
    type_name                      shift and go to state 363
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    enum_specifier                 shift and go to state 33
    expression                     shift and go to state 255
    type_qualifier                 shift and go to state 95
    typedef_name                   shift and go to state 11
    cast_expression                shift and go to state 139
    struct_or_union_specifier      shift and go to state 36
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    type_specifier                 shift and go to state 96
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    specifier_qualifier_list       shift and go to state 257
    struct_or_union                shift and go to state 8

state 274

    (210) binary_expression -> binary_expression GE . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 364
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 275

    (206) binary_expression -> binary_expression RSHIFT . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 365
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 276

    (203) binary_expression -> binary_expression MOD . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 366
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 277

    (212) binary_expression -> binary_expression EQ . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 367
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 278

    (205) binary_expression -> binary_expression MINUS . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 368
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 279

    (217) binary_expression -> binary_expression LAND . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 369
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 280

    (216) binary_expression -> binary_expression XOR . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 370
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 281

    (214) binary_expression -> binary_expression AND . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 371
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 282

    (218) binary_expression -> binary_expression LOR . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 372
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 283

    (201) binary_expression -> binary_expression TIMES . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 373
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 284

    (211) binary_expression -> binary_expression GT . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 374
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 285

    (204) binary_expression -> binary_expression PLUS . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 375
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 286

    (202) binary_expression -> binary_expression DIVIDE . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 376
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 287

    (207) binary_expression -> binary_expression LSHIFT . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 377
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 288

    (213) binary_expression -> binary_expression NE . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 378
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 289

    (199) conditional_expression -> binary_expression CONDOP . expression COLON conditional_expression
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 379
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 290

    (208) binary_expression -> binary_expression LT . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 380
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 291

    (209) binary_expression -> binary_expression LE . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 381
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 292

    (215) binary_expression -> binary_expression OR . binary_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 382
    cast_expression                shift and go to state 139
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 293

    (265) unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .

    WSTRING_LITERAL reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LBRACKET        reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LPAREN          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PERIOD          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ARROW           reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSPLUS        reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSMINUS      reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQUALS          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOREQUAL        reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMESEQUAL      reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVEQUAL        reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MODEQUAL        reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUSEQUAL       reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUSEQUAL      reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFTEQUAL     reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFTEQUAL     reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    ANDEQUAL        reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OREQUAL         reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    CONDOP          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    TIMES           reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    DIVIDE          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MOD             reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    PLUS            reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    MINUS           reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RSHIFT          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LSHIFT          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LT              reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LE              reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GE              reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    GT              reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    EQ              reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    NE              reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    AND             reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    OR              reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    XOR             reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LAND            reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    LOR             reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COMMA           reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    SEMI            reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACE          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RBRACKET        reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    RPAREN          reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)
    COLON           reduce using rule 265 (unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL .)


state 294

    (223) unary_expression -> MINUSMINUS unary_expression .

    EQUALS          reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    XOREQUAL        reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQUAL      reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQUAL        reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQUAL        reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQUAL       reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQUAL      reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFTEQUAL     reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFTEQUAL     reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    ANDEQUAL        reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    OREQUAL         reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    CONDOP          reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    TIMES           reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    GE              reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    XOR             reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    LAND            reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    LOR             reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    COLON           reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 223 (unary_expression -> MINUSMINUS unary_expression .)


state 295

    (250) primary_expression -> OFFSETOF LPAREN . type_name COMMA identifier RPAREN
    (149) type_name -> . specifier_qualifier_list abstract_declarator_opt
    (87) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list_opt
    (88) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    type_name                      shift and go to state 383
    typedef_name                   shift and go to state 11
    specifier_qualifier_list       shift and go to state 257
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 95
    type_specifier                 shift and go to state 96
    struct_or_union_specifier      shift and go to state 36
    struct_or_union                shift and go to state 8

state 296

    (42) function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .

    SEMI            reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    PPHASH          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    PPPRAGMA        reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    CONST           reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    RESTRICT        reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    VOLATILE        reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    VOID            reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    _BOOL           reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    SHORT           reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    LONG            reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    DOUBLE          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    _COMPLEX        reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    SIGNED          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    UNSIGNED        reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    AUTO            reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    REGISTER        reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    STATIC          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    EXTERN          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TYPEDEF         reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    INLINE          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    TYPEID          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    ENUM            reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    STRUCT          reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    UNION           reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 42 (function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement .)


state 297

    (86) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 86 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 86 (init_declarator -> declarator EQUALS initializer .)


state 298

    (144) designation -> designator_list . EQUALS
    (146) designator_list -> designator_list . designator
    (147) designator -> . LBRACKET constant_expression RBRACKET
    (148) designator -> . PERIOD identifier

    EQUALS          shift and go to state 384
    LBRACKET        shift and go to state 301
    PERIOD          shift and go to state 299

    designator                     shift and go to state 385

state 299

    (148) designator -> PERIOD . identifier
    (253) identifier -> . ID

    ID              shift and go to state 112

    identifier                     shift and go to state 386

state 300

    (12) designation_opt -> designation .

    LBRACE          reduce using rule 12 (designation_opt -> designation .)
    PLUSPLUS        reduce using rule 12 (designation_opt -> designation .)
    MINUSMINUS      reduce using rule 12 (designation_opt -> designation .)
    SIZEOF          reduce using rule 12 (designation_opt -> designation .)
    LPAREN          reduce using rule 12 (designation_opt -> designation .)
    AND             reduce using rule 12 (designation_opt -> designation .)
    TIMES           reduce using rule 12 (designation_opt -> designation .)
    PLUS            reduce using rule 12 (designation_opt -> designation .)
    MINUS           reduce using rule 12 (designation_opt -> designation .)
    NOT             reduce using rule 12 (designation_opt -> designation .)
    LNOT            reduce using rule 12 (designation_opt -> designation .)
    OFFSETOF        reduce using rule 12 (designation_opt -> designation .)
    ID              reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_DEC   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_OCT   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_HEX   reduce using rule 12 (designation_opt -> designation .)
    INT_CONST_BIN   reduce using rule 12 (designation_opt -> designation .)
    FLOAT_CONST     reduce using rule 12 (designation_opt -> designation .)
    HEX_FLOAT_CONST reduce using rule 12 (designation_opt -> designation .)
    CHAR_CONST      reduce using rule 12 (designation_opt -> designation .)
    WCHAR_CONST     reduce using rule 12 (designation_opt -> designation .)
    STRING_LITERAL  reduce using rule 12 (designation_opt -> designation .)
    WSTRING_LITERAL reduce using rule 12 (designation_opt -> designation .)


state 301

    (147) designator -> LBRACKET . constant_expression RBRACKET
    (197) constant_expression -> . conditional_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    constant                       shift and go to state 146
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    constant_expression            shift and go to state 387
    conditional_expression         shift and go to state 312
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    postfix_expression             shift and go to state 147

state 302

    (142) initializer_list -> designation_opt . initializer
    (139) initializer -> . assignment_expression
    (140) initializer -> . brace_open initializer_list_opt brace_close
    (141) initializer -> . brace_open initializer_list COMMA brace_close
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (266) brace_open -> . LBRACE
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 171
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    identifier                     shift and go to state 156
    initializer                    shift and go to state 388
    brace_open                     shift and go to state 174
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 303

    (140) initializer -> brace_open initializer_list_opt . brace_close
    (267) brace_close -> . RBRACE

    RBRACE          shift and go to state 181

    brace_close                    shift and go to state 389

state 304

    (141) initializer -> brace_open initializer_list . COMMA brace_close
    (20) initializer_list_opt -> initializer_list .
    (143) initializer_list -> initializer_list . COMMA designation_opt initializer

    COMMA           shift and go to state 390
    RBRACE          reduce using rule 20 (initializer_list_opt -> initializer_list .)


state 305

    (19) initializer_list_opt -> empty .
    (11) designation_opt -> empty .

    RBRACE          reduce using rule 19 (initializer_list_opt -> empty .)
    LBRACE          reduce using rule 11 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (designation_opt -> empty .)
    SIZEOF          reduce using rule 11 (designation_opt -> empty .)
    LPAREN          reduce using rule 11 (designation_opt -> empty .)
    AND             reduce using rule 11 (designation_opt -> empty .)
    TIMES           reduce using rule 11 (designation_opt -> empty .)
    PLUS            reduce using rule 11 (designation_opt -> empty .)
    MINUS           reduce using rule 11 (designation_opt -> empty .)
    NOT             reduce using rule 11 (designation_opt -> empty .)
    LNOT            reduce using rule 11 (designation_opt -> empty .)
    OFFSETOF        reduce using rule 11 (designation_opt -> empty .)
    ID              reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_BIN   reduce using rule 11 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 11 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 11 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 11 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 11 (designation_opt -> empty .)


state 306

    (145) designator_list -> designator .

    EQUALS          reduce using rule 145 (designator_list -> designator .)
    LBRACKET        reduce using rule 145 (designator_list -> designator .)
    PERIOD          reduce using rule 145 (designator_list -> designator .)


state 307

    (98) struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .

    RBRACE          reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SEMI            reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    CONST           reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    RESTRICT        reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    VOLATILE        reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    VOID            reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _BOOL           reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    CHAR            reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SHORT           reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    INT             reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    LONG            reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    FLOAT           reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    DOUBLE          reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    _COMPLEX        reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    SIGNED          reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    UNSIGNED        reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    TYPEID          reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    ENUM            reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    STRUCT          reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)
    UNION           reduce using rule 98 (struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI .)


state 308

    (99) struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .

    RBRACE          reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    SEMI            reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    CONST           reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    RESTRICT        reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    VOLATILE        reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    VOID            reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    _BOOL           reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    CHAR            reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    SHORT           reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    INT             reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    LONG            reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    FLOAT           reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    DOUBLE          reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    _COMPLEX        reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    SIGNED          reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    UNSIGNED        reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    TYPEID          reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    ENUM            reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    STRUCT          reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)
    UNION           reduce using rule 99 (struct_declaration -> specifier_qualifier_list abstract_declarator SEMI .)


state 309

    (102) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (103) struct_declarator -> . declarator
    (104) struct_declarator -> . declarator COLON constant_expression
    (105) struct_declarator -> . COLON constant_expression
    (116) declarator -> . direct_declarator
    (117) declarator -> . pointer direct_declarator
    (118) declarator -> . pointer TYPEID
    (119) direct_declarator -> . ID
    (120) direct_declarator -> . LPAREN declarator RPAREN
    (121) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
    (122) direct_declarator -> . direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
    (123) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
    (124) direct_declarator -> . direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
    (125) direct_declarator -> . direct_declarator LPAREN parameter_type_list RPAREN
    (126) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer

    COLON           shift and go to state 189
    ID              shift and go to state 40
    LPAREN          shift and go to state 10
    TIMES           shift and go to state 17

    declarator                     shift and go to state 188
    pointer                        shift and go to state 51
    direct_declarator              shift and go to state 12
    struct_declarator              shift and go to state 391

state 310

    (104) struct_declarator -> declarator COLON . constant_expression
    (197) constant_expression -> . conditional_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    constant                       shift and go to state 146
    unified_wstring_literal        shift and go to state 154
    unary_expression               shift and go to state 266
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    constant_expression            shift and go to state 392
    conditional_expression         shift and go to state 312
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    postfix_expression             shift and go to state 147

state 311

    (105) struct_declarator -> COLON constant_expression .

    COMMA           reduce using rule 105 (struct_declarator -> COLON constant_expression .)
    SEMI            reduce using rule 105 (struct_declarator -> COLON constant_expression .)


state 312

    (197) constant_expression -> conditional_expression .

    COMMA           reduce using rule 197 (constant_expression -> conditional_expression .)
    SEMI            reduce using rule 197 (constant_expression -> conditional_expression .)
    RBRACE          reduce using rule 197 (constant_expression -> conditional_expression .)
    RBRACKET        reduce using rule 197 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 197 (constant_expression -> conditional_expression .)


state 313

    (93) struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    ENUM            reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    STRUCT          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    UNION           reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    EQUALS          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 93 (struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close .)


state 314

    (92) struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .

    CONST           reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    RESTRICT        reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    VOLATILE        reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    VOID            reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _BOOL           reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    CHAR            reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SHORT           reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    INT             reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LONG            reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    FLOAT           reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    DOUBLE          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    _COMPLEX        reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SIGNED          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    UNSIGNED        reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    AUTO            reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    REGISTER        reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    STATIC          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    EXTERN          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TYPEDEF         reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    INLINE          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TYPEID          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    ENUM            reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    STRUCT          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    UNION           reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    EQUALS          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    TIMES           reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LPAREN          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    LBRACKET        reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    ID              reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    SEMI            reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    RPAREN          reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    COLON           reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)
    COMMA           reduce using rule 92 (struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close .)


state 315

    (121) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EQUALS          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CONST           reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    RESTRICT        reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOLATILE        reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    VOID            reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _BOOL           reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    CHAR            reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SHORT           reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INT             reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LONG            reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    FLOAT           reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    DOUBLE          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    _COMPLEX        reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SIGNED          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNSIGNED        reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    AUTO            reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    REGISTER        reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STATIC          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    EXTERN          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEDEF         reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    INLINE          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    TYPEID          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    ENUM            reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    STRUCT          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    UNION           reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    LBRACE          reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)
    COLON           reduce using rule 121 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET .)


state 316

    (124) direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .

    LBRACKET        reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LPAREN          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RPAREN          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EQUALS          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    CONST           reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    RESTRICT        reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    VOLATILE        reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    VOID            reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _BOOL           reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    CHAR            reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SHORT           reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INT             reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LONG            reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    FLOAT           reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    DOUBLE          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    _COMPLEX        reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SIGNED          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    UNSIGNED        reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    AUTO            reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    REGISTER        reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    STATIC          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    EXTERN          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    TYPEDEF         reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    INLINE          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    TYPEID          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    ENUM            reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    STRUCT          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    UNION           reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    LBRACE          reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COMMA           reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    SEMI            reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)
    COLON           reduce using rule 124 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET .)


state 317

    (122) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression . RBRACKET

    RBRACKET        shift and go to state 393


state 318

    (123) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression . RBRACKET

    RBRACKET        shift and go to state 394


state 319

    (138) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 138 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 138 (identifier_list -> identifier_list COMMA identifier .)


state 320

    (134) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 134 (parameter_list -> parameter_list COMMA parameter_declaration .)
    RPAREN          reduce using rule 134 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 321

    (132) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    RPAREN          reduce using rule 132 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 322

    (13) expression_opt -> empty .

    RPAREN          reduce using rule 13 (expression_opt -> empty .)
    SEMI            reduce using rule 13 (expression_opt -> empty .)


state 323

    (163) block_item_list -> block_item_list block_item .

    ID              reduce using rule 163 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 163 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 163 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 163 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 163 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    PPPRAGMA        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    _BOOL           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 163 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    _COMPLEX        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 163 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    TYPEID          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 163 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 163 (block_item_list -> block_item_list block_item .)
    AND             reduce using rule 163 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 163 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 163 (block_item_list -> block_item_list block_item .)
    LNOT            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    OFFSETOF        reduce using rule 163 (block_item_list -> block_item_list block_item .)
    INT_CONST_DEC   reduce using rule 163 (block_item_list -> block_item_list block_item .)
    INT_CONST_OCT   reduce using rule 163 (block_item_list -> block_item_list block_item .)
    INT_CONST_HEX   reduce using rule 163 (block_item_list -> block_item_list block_item .)
    INT_CONST_BIN   reduce using rule 163 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 163 (block_item_list -> block_item_list block_item .)
    HEX_FLOAT_CONST reduce using rule 163 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 163 (block_item_list -> block_item_list block_item .)
    WCHAR_CONST     reduce using rule 163 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 163 (block_item_list -> block_item_list block_item .)
    WSTRING_LITERAL reduce using rule 163 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 163 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 163 (block_item_list -> block_item_list block_item .)


state 324

    (170) selection_statement -> SWITCH LPAREN . expression RPAREN statement
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    conditional_expression         shift and go to state 167
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 395
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 325

    (178) jump_statement -> RETURN expression . SEMI
    (182) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 396
    COMMA           shift and go to state 332


state 326

    (179) jump_statement -> RETURN SEMI .

    ID              reduce using rule 179 (jump_statement -> RETURN SEMI .)
    CASE            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    DEFAULT         reduce using rule 179 (jump_statement -> RETURN SEMI .)
    IF              reduce using rule 179 (jump_statement -> RETURN SEMI .)
    SWITCH          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    DO              reduce using rule 179 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 179 (jump_statement -> RETURN SEMI .)
    GOTO            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    PPPRAGMA        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    CONST           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    RESTRICT        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    VOLATILE        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    _BOOL           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    SHORT           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 179 (jump_statement -> RETURN SEMI .)
    LONG            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    _COMPLEX        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    SIGNED          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    UNSIGNED        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    AUTO            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    REGISTER        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    STATIC          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    EXTERN          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    TYPEDEF         reduce using rule 179 (jump_statement -> RETURN SEMI .)
    INLINE          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    TYPEID          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    ENUM            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    STRUCT          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    UNION           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 179 (jump_statement -> RETURN SEMI .)
    SIZEOF          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    AND             reduce using rule 179 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 179 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 179 (jump_statement -> RETURN SEMI .)
    LNOT            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    OFFSETOF        reduce using rule 179 (jump_statement -> RETURN SEMI .)
    INT_CONST_DEC   reduce using rule 179 (jump_statement -> RETURN SEMI .)
    INT_CONST_OCT   reduce using rule 179 (jump_statement -> RETURN SEMI .)
    INT_CONST_HEX   reduce using rule 179 (jump_statement -> RETURN SEMI .)
    INT_CONST_BIN   reduce using rule 179 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 179 (jump_statement -> RETURN SEMI .)
    HEX_FLOAT_CONST reduce using rule 179 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 179 (jump_statement -> RETURN SEMI .)
    WCHAR_CONST     reduce using rule 179 (jump_statement -> RETURN SEMI .)
    STRING_LITERAL  reduce using rule 179 (jump_statement -> RETURN SEMI .)
    WSTRING_LITERAL reduce using rule 179 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 179 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 179 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 179 (jump_statement -> RETURN SEMI .)


state 327

    (180) expression_statement -> expression_opt SEMI .

    ID              reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    CASE            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    DEFAULT         reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    SWITCH          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    DO              reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    GOTO            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    CONTINUE        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    PPPRAGMA        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    CONST           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    RESTRICT        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    VOLATILE        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    _BOOL           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    SHORT           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    LONG            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    DOUBLE          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    _COMPLEX        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    SIGNED          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    UNSIGNED        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    AUTO            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    REGISTER        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    STATIC          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    EXTERN          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    TYPEDEF         reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    INLINE          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    TYPEID          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    ENUM            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    STRUCT          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    UNION           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    SIZEOF          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    AND             reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    LNOT            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    OFFSETOF        reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    INT_CONST_DEC   reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    INT_CONST_OCT   reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    INT_CONST_HEX   reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    INT_CONST_BIN   reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    HEX_FLOAT_CONST reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    WCHAR_CONST     reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    WSTRING_LITERAL reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 180 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 180 (expression_statement -> expression_opt SEMI .)


state 328

    (177) jump_statement -> CONTINUE SEMI .

    ID              reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    CASE            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    DEFAULT         reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    IF              reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    SWITCH          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    WHILE           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    DO              reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    FOR             reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    GOTO            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    PPPRAGMA        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    CONST           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    RESTRICT        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    VOLATILE        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    VOID            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    _BOOL           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    SHORT           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    INT             reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    LONG            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    FLOAT           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    _COMPLEX        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    SIGNED          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    UNSIGNED        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    AUTO            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    REGISTER        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    STATIC          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    EXTERN          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    TYPEDEF         reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    INLINE          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    TYPEID          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    ENUM            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    STRUCT          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    UNION           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    PLUSPLUS        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    MINUSMINUS      reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    SIZEOF          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    AND             reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    NOT             reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    OFFSETOF        reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_DEC   reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_OCT   reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_HEX   reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    INT_CONST_BIN   reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    FLOAT_CONST     reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    HEX_FLOAT_CONST reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    CHAR_CONST      reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    WCHAR_CONST     reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    STRING_LITERAL  reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    WSTRING_LITERAL reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    RBRACE          reduce using rule 177 (jump_statement -> CONTINUE SEMI .)
    ELSE            reduce using rule 177 (jump_statement -> CONTINUE SEMI .)


state 329

    (173) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (51) declaration -> . decl_body SEMI
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (50) decl_body -> . declaration_specifiers init_declarator_list_opt
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    OFFSETOF        shift and go to state 162
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 322
    decl_body                      shift and go to state 28
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    identifier                     shift and go to state 156
    declaration                    shift and go to state 397
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    enum_specifier                 shift and go to state 33
    struct_or_union_specifier      shift and go to state 36
    function_specifier             shift and go to state 14
    primary_expression             shift and go to state 163
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 71
    expression_opt                 shift and go to state 398
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    storage_class_specifier        shift and go to state 47
    postfix_expression             shift and go to state 147
    struct_or_union                shift and go to state 8

state 330

    (176) jump_statement -> BREAK SEMI .

    ID              reduce using rule 176 (jump_statement -> BREAK SEMI .)
    CASE            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    DEFAULT         reduce using rule 176 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 176 (jump_statement -> BREAK SEMI .)
    SWITCH          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    DO              reduce using rule 176 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 176 (jump_statement -> BREAK SEMI .)
    GOTO            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    PPPRAGMA        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    CONST           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    RESTRICT        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    VOLATILE        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    _BOOL           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    SHORT           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 176 (jump_statement -> BREAK SEMI .)
    LONG            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    _COMPLEX        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    SIGNED          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    UNSIGNED        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    AUTO            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    REGISTER        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    STATIC          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    EXTERN          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    TYPEDEF         reduce using rule 176 (jump_statement -> BREAK SEMI .)
    INLINE          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    TYPEID          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    ENUM            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    STRUCT          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    UNION           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 176 (jump_statement -> BREAK SEMI .)
    SIZEOF          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    AND             reduce using rule 176 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 176 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 176 (jump_statement -> BREAK SEMI .)
    LNOT            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    OFFSETOF        reduce using rule 176 (jump_statement -> BREAK SEMI .)
    INT_CONST_DEC   reduce using rule 176 (jump_statement -> BREAK SEMI .)
    INT_CONST_OCT   reduce using rule 176 (jump_statement -> BREAK SEMI .)
    INT_CONST_HEX   reduce using rule 176 (jump_statement -> BREAK SEMI .)
    INT_CONST_BIN   reduce using rule 176 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 176 (jump_statement -> BREAK SEMI .)
    HEX_FLOAT_CONST reduce using rule 176 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 176 (jump_statement -> BREAK SEMI .)
    WCHAR_CONST     reduce using rule 176 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 176 (jump_statement -> BREAK SEMI .)
    WSTRING_LITERAL reduce using rule 176 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 176 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 176 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 176 (jump_statement -> BREAK SEMI .)


state 331

    (164) compound_statement -> brace_open block_item_list_opt brace_close .

    SEMI            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPHASH          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PPPRAGMA        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ID              reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LPAREN          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TIMES           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONST           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RESTRICT        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOLATILE        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    VOID            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _BOOL           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SHORT           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT             reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LONG            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DOUBLE          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    _COMPLEX        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIGNED          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNSIGNED        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AUTO            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    REGISTER        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STATIC          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    EXTERN          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEDEF         reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INLINE          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    TYPEID          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ENUM            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRUCT          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    UNION           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    $end            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CASE            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DEFAULT         reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    IF              reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SWITCH          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WHILE           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    DO              reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FOR             reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    GOTO            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    BREAK           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CONTINUE        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RETURN          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LBRACE          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUSPLUS        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUSMINUS      reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    SIZEOF          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    AND             reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    PLUS            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    MINUS           reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    NOT             reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    LNOT            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    OFFSETOF        reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_DEC   reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_OCT   reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_HEX   reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    INT_CONST_BIN   reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    FLOAT_CONST     reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    HEX_FLOAT_CONST reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    CHAR_CONST      reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WCHAR_CONST     reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    STRING_LITERAL  reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    WSTRING_LITERAL reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    RBRACE          reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)
    ELSE            reduce using rule 164 (compound_statement -> brace_open block_item_list_opt brace_close .)


state 332

    (182) expression -> expression COMMA . assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 399
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 333

    (171) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    conditional_expression         shift and go to state 167
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 400
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 334

    (175) jump_statement -> GOTO ID . SEMI

    SEMI            shift and go to state 401


state 335

    (168) selection_statement -> IF LPAREN . expression RPAREN statement
    (169) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    conditional_expression         shift and go to state 167
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 402
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 336

    (167) labeled_statement -> DEFAULT COLON . statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 403
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 337

    (165) labeled_statement -> ID COLON . statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 404
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 338

    (172) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMI

    WHILE           shift and go to state 405


state 339

    (166) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 406


state 340

    (115) enumerator -> ID EQUALS constant_expression .

    COMMA           reduce using rule 115 (enumerator -> ID EQUALS constant_expression .)
    RBRACE          reduce using rule 115 (enumerator -> ID EQUALS constant_expression .)


state 341

    (113) enumerator_list -> enumerator_list COMMA enumerator .

    COMMA           reduce using rule 113 (enumerator_list -> enumerator_list COMMA enumerator .)
    RBRACE          reduce using rule 113 (enumerator_list -> enumerator_list COMMA enumerator .)


state 342

    (109) enum_specifier -> ENUM ID brace_open enumerator_list brace_close .

    CONST           reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INT             reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ENUM            reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    STRUCT          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    UNION           reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    ID              reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    EQUALS          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)
    COLON           reduce using rule 109 (enum_specifier -> ENUM ID brace_open enumerator_list brace_close .)


state 343

    (110) enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .

    CONST           reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RESTRICT        reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOLATILE        reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    VOID            reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _BOOL           reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    CHAR            reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SHORT           reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INT             reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LONG            reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    FLOAT           reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    DOUBLE          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    _COMPLEX        reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SIGNED          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    UNSIGNED        reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    AUTO            reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    REGISTER        reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    STATIC          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    EXTERN          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEDEF         reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    INLINE          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TYPEID          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ENUM            reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    STRUCT          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    UNION           reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    ID              reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LPAREN          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    TIMES           reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    EQUALS          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    LBRACKET        reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    SEMI            reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COMMA           reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    RPAREN          reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)
    COLON           reduce using rule 110 (enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close .)


state 344

    (158) direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .

    LBRACKET        reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    LPAREN          reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    COMMA           reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    SEMI            reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)
    RPAREN          reduce using rule 158 (direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN .)


state 345

    (154) direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .

    LBRACKET        reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    LPAREN          reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    COMMA           reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    SEMI            reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)
    RPAREN          reduce using rule 154 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET .)


state 346

    (156) direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .

    LBRACKET        reduce using rule 156 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    LPAREN          reduce using rule 156 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    COMMA           reduce using rule 156 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    SEMI            reduce using rule 156 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)
    RPAREN          reduce using rule 156 (direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET .)


state 347

    (185) assignment_expression -> unary_expression assignment_operator assignment_expression .

    RBRACKET        reduce using rule 185 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 185 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 185 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 185 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 185 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 185 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 348

    (249) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    PERIOD          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    XOREQUAL        reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFTEQUAL     reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFTEQUAL     reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    ANDEQUAL        reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    OREQUAL         reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    CONDOP          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 249 (primary_expression -> LPAREN expression RPAREN .)


state 349

    (243) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (220) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (266) brace_open -> . LBRACE
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    brace_open                     shift and go to state 408
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unified_wstring_literal        shift and go to state 154
    cast_expression                shift and go to state 407
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147
    unary_expression               shift and go to state 266

state 350

    (149) type_name -> specifier_qualifier_list abstract_declarator_opt .

    RPAREN          reduce using rule 149 (type_name -> specifier_qualifier_list abstract_declarator_opt .)
    COMMA           reduce using rule 149 (type_name -> specifier_qualifier_list abstract_declarator_opt .)


state 351

    (153) direct_abstract_declarator -> LPAREN . abstract_declarator RPAREN
    (159) direct_abstract_declarator -> LPAREN . parameter_type_list_opt RPAREN
    (150) abstract_declarator -> . pointer
    (151) abstract_declarator -> . pointer direct_abstract_declarator
    (152) abstract_declarator -> . direct_abstract_declarator
    (21) parameter_type_list_opt -> . empty
    (22) parameter_type_list_opt -> . parameter_type_list
    (127) pointer -> . TIMES type_qualifier_list_opt
    (128) pointer -> . TIMES type_qualifier_list_opt pointer
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN
    (268) empty -> .
    (131) parameter_type_list -> . parameter_list
    (132) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (133) parameter_list -> . parameter_declaration
    (134) parameter_list -> . parameter_list COMMA parameter_declaration
    (135) parameter_declaration -> . declaration_specifiers declarator
    (136) parameter_declaration -> . declaration_specifiers abstract_declarator_opt
    (54) declaration_specifiers -> . type_qualifier declaration_specifiers_opt
    (55) declaration_specifiers -> . type_specifier declaration_specifiers_opt
    (56) declaration_specifiers -> . storage_class_specifier declaration_specifiers_opt
    (57) declaration_specifiers -> . function_specifier declaration_specifiers_opt
    (78) type_qualifier -> . CONST
    (79) type_qualifier -> . RESTRICT
    (80) type_qualifier -> . VOLATILE
    (64) type_specifier -> . VOID
    (65) type_specifier -> . _BOOL
    (66) type_specifier -> . CHAR
    (67) type_specifier -> . SHORT
    (68) type_specifier -> . INT
    (69) type_specifier -> . LONG
    (70) type_specifier -> . FLOAT
    (71) type_specifier -> . DOUBLE
    (72) type_specifier -> . _COMPLEX
    (73) type_specifier -> . SIGNED
    (74) type_specifier -> . UNSIGNED
    (75) type_specifier -> . typedef_name
    (76) type_specifier -> . enum_specifier
    (77) type_specifier -> . struct_or_union_specifier
    (58) storage_class_specifier -> . AUTO
    (59) storage_class_specifier -> . REGISTER
    (60) storage_class_specifier -> . STATIC
    (61) storage_class_specifier -> . EXTERN
    (62) storage_class_specifier -> . TYPEDEF
    (63) function_specifier -> . INLINE
    (183) typedef_name -> . TYPEID
    (106) enum_specifier -> . ENUM ID
    (107) enum_specifier -> . ENUM TYPEID
    (108) enum_specifier -> . ENUM brace_open enumerator_list brace_close
    (109) enum_specifier -> . ENUM ID brace_open enumerator_list brace_close
    (110) enum_specifier -> . ENUM TYPEID brace_open enumerator_list brace_close
    (89) struct_or_union_specifier -> . struct_or_union ID
    (90) struct_or_union_specifier -> . struct_or_union TYPEID
    (91) struct_or_union_specifier -> . struct_or_union brace_open struct_declaration_list brace_close
    (92) struct_or_union_specifier -> . struct_or_union ID brace_open struct_declaration_list brace_close
    (93) struct_or_union_specifier -> . struct_or_union TYPEID brace_open struct_declaration_list brace_close
    (94) struct_or_union -> . STRUCT
    (95) struct_or_union -> . UNION

    TIMES           shift and go to state 17
    LPAREN          shift and go to state 351
    LBRACKET        shift and go to state 85
    RPAREN          reduce using rule 268 (empty -> .)
    CONST           shift and go to state 39
    RESTRICT        shift and go to state 25
    VOLATILE        shift and go to state 29
    VOID            shift and go to state 30
    _BOOL           shift and go to state 6
    CHAR            shift and go to state 35
    SHORT           shift and go to state 9
    INT             shift and go to state 49
    LONG            shift and go to state 26
    FLOAT           shift and go to state 4
    DOUBLE          shift and go to state 5
    _COMPLEX        shift and go to state 34
    SIGNED          shift and go to state 43
    UNSIGNED        shift and go to state 37
    AUTO            shift and go to state 45
    REGISTER        shift and go to state 23
    STATIC          shift and go to state 50
    EXTERN          shift and go to state 48
    TYPEDEF         shift and go to state 24
    INLINE          shift and go to state 3
    TYPEID          shift and go to state 7
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 13
    UNION           shift and go to state 46

    empty                          shift and go to state 129
    parameter_list                 shift and go to state 109
    direct_abstract_declarator     shift and go to state 79
    enum_specifier                 shift and go to state 33
    type_qualifier                 shift and go to state 31
    type_specifier                 shift and go to state 41
    struct_or_union                shift and go to state 8
    struct_or_union_specifier      shift and go to state 36
    function_specifier             shift and go to state 14
    parameter_declaration          shift and go to state 106
    parameter_type_list            shift and go to state 132
    typedef_name                   shift and go to state 11
    declaration_specifiers         shift and go to state 113
    abstract_declarator            shift and go to state 130
    storage_class_specifier        shift and go to state 47
    parameter_type_list_opt        shift and go to state 131
    pointer                        shift and go to state 352

state 352

    (150) abstract_declarator -> pointer .
    (151) abstract_declarator -> pointer . direct_abstract_declarator
    (153) direct_abstract_declarator -> . LPAREN abstract_declarator RPAREN
    (154) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
    (155) direct_abstract_declarator -> . LBRACKET assignment_expression_opt RBRACKET
    (156) direct_abstract_declarator -> . direct_abstract_declarator LBRACKET TIMES RBRACKET
    (157) direct_abstract_declarator -> . LBRACKET TIMES RBRACKET
    (158) direct_abstract_declarator -> . direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
    (159) direct_abstract_declarator -> . LPAREN parameter_type_list_opt RPAREN

    RPAREN          reduce using rule 150 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 150 (abstract_declarator -> pointer .)
    LPAREN          shift and go to state 351
    LBRACKET        shift and go to state 85

    direct_abstract_declarator     shift and go to state 175

state 353

    (234) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (182) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 409
    COMMA           shift and go to state 332


state 354

    (238) postfix_expression -> postfix_expression PERIOD TYPEID .

    LBRACKET        reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LPAREN          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PERIOD          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    ARROW           reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUSPLUS        reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUSMINUS      reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    TIMES           reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    DIVIDE          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MOD             reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUS            reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUS           reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RSHIFT          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LSHIFT          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LT              reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LE              reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    GE              reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    GT              reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    EQ              reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    NE              reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    AND             reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    OR              reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    XOR             reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LAND            reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LOR             reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    CONDOP          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RBRACKET        reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    COMMA           reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    SEMI            reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RPAREN          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    COLON           reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RBRACE          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    EQUALS          reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    XOREQUAL        reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    TIMESEQUAL      reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    DIVEQUAL        reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MODEQUAL        reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    PLUSEQUAL       reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    MINUSEQUAL      reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    LSHIFTEQUAL     reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    RSHIFTEQUAL     reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    ANDEQUAL        reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)
    OREQUAL         reduce using rule 238 (postfix_expression -> postfix_expression PERIOD TYPEID .)


state 355

    (237) postfix_expression -> postfix_expression PERIOD ID .

    LBRACKET        reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    LPAREN          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    PERIOD          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    ARROW           reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSPLUS        reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSMINUS      reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMES           reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVIDE          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    MOD             reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUS            reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUS           reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFT          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFT          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    LT              reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    LE              reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    GE              reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    GT              reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    EQ              reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    NE              reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    AND             reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    OR              reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    XOR             reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    LAND            reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    LOR             reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    CONDOP          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACKET        reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    COMMA           reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    SEMI            reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    RPAREN          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    COLON           reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    RBRACE          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    EQUALS          reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    XOREQUAL        reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    TIMESEQUAL      reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    DIVEQUAL        reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    MODEQUAL        reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    PLUSEQUAL       reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    MINUSEQUAL      reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    LSHIFTEQUAL     reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    RSHIFTEQUAL     reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    ANDEQUAL        reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)
    OREQUAL         reduce using rule 237 (postfix_expression -> postfix_expression PERIOD ID .)


state 356

    (251) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 251 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 251 (argument_expression_list -> assignment_expression .)


state 357

    (236) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PERIOD          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ARROW           reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFT          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFT          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LE              reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GE              reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOR             reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LAND            reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LOR             reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    CONDOP          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COLON           reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    XOREQUAL        reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQUAL      reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQUAL        reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQUAL        reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQUAL       reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQUAL      reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LSHIFTEQUAL     reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RSHIFTEQUAL     reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ANDEQUAL        reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OREQUAL         reduce using rule 236 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 358

    (235) postfix_expression -> postfix_expression LPAREN argument_expression_list . RPAREN
    (252) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 410
    COMMA           shift and go to state 411


state 359

    (240) postfix_expression -> postfix_expression ARROW TYPEID .

    LBRACKET        reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LPAREN          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PERIOD          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ARROW           reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUSPLUS        reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUSMINUS      reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    TIMES           reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    DIVIDE          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MOD             reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUS            reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUS           reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RSHIFT          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LSHIFT          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LT              reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LE              reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    GE              reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    GT              reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    EQ              reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    NE              reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    AND             reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    OR              reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    XOR             reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LAND            reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LOR             reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    CONDOP          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RBRACKET        reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    COMMA           reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    SEMI            reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RPAREN          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    COLON           reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RBRACE          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    EQUALS          reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    XOREQUAL        reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    TIMESEQUAL      reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    DIVEQUAL        reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MODEQUAL        reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    PLUSEQUAL       reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    MINUSEQUAL      reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    LSHIFTEQUAL     reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    RSHIFTEQUAL     reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    ANDEQUAL        reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)
    OREQUAL         reduce using rule 240 (postfix_expression -> postfix_expression ARROW TYPEID .)


state 360

    (239) postfix_expression -> postfix_expression ARROW ID .

    LBRACKET        reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    LPAREN          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    PERIOD          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    ARROW           reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSPLUS        reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSMINUS      reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    TIMES           reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    DIVIDE          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    MOD             reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    PLUS            reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    MINUS           reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFT          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFT          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    LT              reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    LE              reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    GE              reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    GT              reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    EQ              reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    NE              reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    AND             reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    OR              reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    XOR             reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    LAND            reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    LOR             reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    CONDOP          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACKET        reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    COMMA           reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    SEMI            reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    RPAREN          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    COLON           reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    RBRACE          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    EQUALS          reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    XOREQUAL        reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    TIMESEQUAL      reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    DIVEQUAL        reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    MODEQUAL        reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    PLUSEQUAL       reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    MINUSEQUAL      reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    LSHIFTEQUAL     reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    RSHIFTEQUAL     reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    ANDEQUAL        reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)
    OREQUAL         reduce using rule 239 (postfix_expression -> postfix_expression ARROW ID .)


state 361

    (220) cast_expression -> LPAREN type_name . RPAREN cast_expression
    (243) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 412


state 362

    (226) unary_expression -> SIZEOF LPAREN type_name . RPAREN
    (243) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 413


state 363

    (243) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name . RPAREN brace_open initializer_list COMMA brace_close

    RPAREN          shift and go to state 414


state 364

    (210) binary_expression -> binary_expression GE binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    LT              reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    LE              reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    GE              reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    GT              reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    EQ              reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    NE              reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    AND             reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    OR              reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    XOR             reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    LAND            reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    LOR             reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    CONDOP          reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    RBRACKET        reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    COMMA           reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    SEMI            reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    RPAREN          reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    COLON           reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    RBRACE          reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287

  ! TIMES           [ reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MOD             [ reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .) ]
  ! PLUS            [ reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .) ]
  ! MINUS           [ reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 210 (binary_expression -> binary_expression GE binary_expression .) ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 365

    (206) binary_expression -> binary_expression RSHIFT binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    RSHIFT          reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LSHIFT          reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LT              reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LE              reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GE              reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    GT              reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    EQ              reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    NE              reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    AND             reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    OR              reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    XOR             reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LAND            reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    LOR             reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    CONDOP          reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACKET        reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COMMA           reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    SEMI            reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RPAREN          reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    COLON           reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    RBRACE          reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278

  ! TIMES           [ reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 206 (binary_expression -> binary_expression RSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 275 ]
  ! LSHIFT          [ shift and go to state 287 ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 366

    (203) binary_expression -> binary_expression MOD binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    TIMES           reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    RSHIFT          reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    LSHIFT          reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    GE              reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    XOR             reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    LAND            reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    LOR             reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    CONDOP          reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    COLON           reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 203 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 283 ]
  ! DIVIDE          [ shift and go to state 286 ]
  ! MOD             [ shift and go to state 276 ]
  ! PLUS            [ shift and go to state 285 ]
  ! MINUS           [ shift and go to state 278 ]
  ! RSHIFT          [ shift and go to state 275 ]
  ! LSHIFT          [ shift and go to state 287 ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 367

    (212) binary_expression -> binary_expression EQ binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    EQ              reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    NE              reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    XOR             reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    LAND            reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    LOR             reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    CONDOP          reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    COLON           reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287
    LT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 274
    GT              shift and go to state 284

  ! TIMES           [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIVIDE          [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! RSHIFT          [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LSHIFT          [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LE              [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GE              [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 212 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 368

    (205) binary_expression -> binary_expression MINUS binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    PLUS            reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    RSHIFT          reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    LSHIFT          reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    GE              reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    XOR             reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    LAND            reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    LOR             reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    CONDOP          reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    COLON           reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276

  ! TIMES           [ reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 205 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 285 ]
  ! MINUS           [ shift and go to state 278 ]
  ! RSHIFT          [ shift and go to state 275 ]
  ! LSHIFT          [ shift and go to state 287 ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 369

    (217) binary_expression -> binary_expression LAND binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    LAND            reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    LOR             reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    CONDOP          reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACKET        reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    COMMA           reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    SEMI            reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    RPAREN          reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    COLON           reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    RBRACE          reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287
    LT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 274
    GT              shift and go to state 284
    EQ              shift and go to state 277
    NE              shift and go to state 288
    AND             shift and go to state 281
    OR              shift and go to state 292
    XOR             shift and go to state 280

  ! TIMES           [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MOD             [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! PLUS            [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! MINUS           [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LT              [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LE              [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GE              [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! GT              [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! EQ              [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! NE              [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! AND             [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! OR              [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! XOR             [ reduce using rule 217 (binary_expression -> binary_expression LAND binary_expression .) ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 370

    (216) binary_expression -> binary_expression XOR binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    OR              reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    XOR             reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    LAND            reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    LOR             reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    CONDOP          reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACKET        reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    COMMA           reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    SEMI            reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    RPAREN          reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    COLON           reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    RBRACE          reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287
    LT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 274
    GT              shift and go to state 284
    EQ              shift and go to state 277
    NE              shift and go to state 288
    AND             shift and go to state 281

  ! TIMES           [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MOD             [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! PLUS            [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! MINUS           [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LT              [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! LE              [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GE              [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! GT              [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! EQ              [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! NE              [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! AND             [ reduce using rule 216 (binary_expression -> binary_expression XOR binary_expression .) ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 371

    (214) binary_expression -> binary_expression AND binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    AND             reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    XOR             reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    LAND            reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    LOR             reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    CONDOP          reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    COLON           reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287
    LT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 274
    GT              shift and go to state 284
    EQ              shift and go to state 277
    NE              shift and go to state 288

  ! TIMES           [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! RSHIFT          [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LSHIFT          [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GE              [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 214 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 372

    (218) binary_expression -> binary_expression LOR binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    LOR             reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .)
    CONDOP          reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACKET        reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .)
    COMMA           reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .)
    SEMI            reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .)
    RPAREN          reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .)
    COLON           reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .)
    RBRACE          reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287
    LT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 274
    GT              shift and go to state 284
    EQ              shift and go to state 277
    NE              shift and go to state 288
    AND             shift and go to state 281
    OR              shift and go to state 292
    XOR             shift and go to state 280
    LAND            shift and go to state 279

  ! TIMES           [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MOD             [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! PLUS            [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! MINUS           [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LT              [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LE              [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GE              [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! GT              [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! EQ              [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! NE              [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! AND             [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! OR              [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! XOR             [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LAND            [ reduce using rule 218 (binary_expression -> binary_expression LOR binary_expression .) ]
  ! LOR             [ shift and go to state 282 ]


state 373

    (201) binary_expression -> binary_expression TIMES binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    TIMES           reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    RSHIFT          reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    LSHIFT          reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    GE              reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    XOR             reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    LAND            reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    LOR             reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    CONDOP          reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    COLON           reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 201 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 283 ]
  ! DIVIDE          [ shift and go to state 286 ]
  ! MOD             [ shift and go to state 276 ]
  ! PLUS            [ shift and go to state 285 ]
  ! MINUS           [ shift and go to state 278 ]
  ! RSHIFT          [ shift and go to state 275 ]
  ! LSHIFT          [ shift and go to state 287 ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 374

    (211) binary_expression -> binary_expression GT binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    LT              reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    LE              reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    GE              reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    XOR             reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    LAND            reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    LOR             reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    CONDOP          reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    COLON           reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287

  ! TIMES           [ reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 211 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 375

    (204) binary_expression -> binary_expression PLUS binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    PLUS            reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    RSHIFT          reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    LSHIFT          reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    GE              reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    XOR             reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    LAND            reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    LOR             reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    CONDOP          reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    COLON           reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276

  ! TIMES           [ reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 204 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 285 ]
  ! MINUS           [ shift and go to state 278 ]
  ! RSHIFT          [ shift and go to state 275 ]
  ! LSHIFT          [ shift and go to state 287 ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 376

    (202) binary_expression -> binary_expression DIVIDE binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    TIMES           reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RSHIFT          reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LSHIFT          reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GE              reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQ              reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    XOR             reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LAND            reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LOR             reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    CONDOP          reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COLON           reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 202 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 283 ]
  ! DIVIDE          [ shift and go to state 286 ]
  ! MOD             [ shift and go to state 276 ]
  ! PLUS            [ shift and go to state 285 ]
  ! MINUS           [ shift and go to state 278 ]
  ! RSHIFT          [ shift and go to state 275 ]
  ! LSHIFT          [ shift and go to state 287 ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 377

    (207) binary_expression -> binary_expression LSHIFT binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    RSHIFT          reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LSHIFT          reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LT              reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LE              reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GE              reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    GT              reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    EQ              reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    NE              reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    AND             reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    OR              reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    XOR             reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LAND            reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    LOR             reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    CONDOP          reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACKET        reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COMMA           reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    SEMI            reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RPAREN          reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    COLON           reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    RBRACE          reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278

  ! TIMES           [ reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MOD             [ reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! PLUS            [ reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! MINUS           [ reduce using rule 207 (binary_expression -> binary_expression LSHIFT binary_expression .) ]
  ! RSHIFT          [ shift and go to state 275 ]
  ! LSHIFT          [ shift and go to state 287 ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 378

    (213) binary_expression -> binary_expression NE binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    EQ              reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    XOR             reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    LAND            reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    LOR             reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    CONDOP          reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    COLON           reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287
    LT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 274
    GT              shift and go to state 284

  ! TIMES           [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LE              [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GE              [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 213 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 379

    (199) conditional_expression -> binary_expression CONDOP expression . COLON conditional_expression
    (182) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 415
    COMMA           shift and go to state 332


state 380

    (208) binary_expression -> binary_expression LT binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    LT              reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    GE              reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    XOR             reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    LAND            reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    LOR             reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    CONDOP          reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    COLON           reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287

  ! TIMES           [ reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .) ]
  ! RSHIFT          [ reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LSHIFT          [ reduce using rule 208 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 381

    (209) binary_expression -> binary_expression LE binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    LT              reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    GE              reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    GT              reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    EQ              reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    NE              reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    XOR             reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    LAND            reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    LOR             reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    CONDOP          reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    COLON           reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287

  ! TIMES           [ reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .) ]
  ! RSHIFT          [ reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LSHIFT          [ reduce using rule 209 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 290 ]
  ! LE              [ shift and go to state 291 ]
  ! GE              [ shift and go to state 274 ]
  ! GT              [ shift and go to state 284 ]
  ! EQ              [ shift and go to state 277 ]
  ! NE              [ shift and go to state 288 ]
  ! AND             [ shift and go to state 281 ]
  ! OR              [ shift and go to state 292 ]
  ! XOR             [ shift and go to state 280 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 382

    (215) binary_expression -> binary_expression OR binary_expression .
    (201) binary_expression -> binary_expression . TIMES binary_expression
    (202) binary_expression -> binary_expression . DIVIDE binary_expression
    (203) binary_expression -> binary_expression . MOD binary_expression
    (204) binary_expression -> binary_expression . PLUS binary_expression
    (205) binary_expression -> binary_expression . MINUS binary_expression
    (206) binary_expression -> binary_expression . RSHIFT binary_expression
    (207) binary_expression -> binary_expression . LSHIFT binary_expression
    (208) binary_expression -> binary_expression . LT binary_expression
    (209) binary_expression -> binary_expression . LE binary_expression
    (210) binary_expression -> binary_expression . GE binary_expression
    (211) binary_expression -> binary_expression . GT binary_expression
    (212) binary_expression -> binary_expression . EQ binary_expression
    (213) binary_expression -> binary_expression . NE binary_expression
    (214) binary_expression -> binary_expression . AND binary_expression
    (215) binary_expression -> binary_expression . OR binary_expression
    (216) binary_expression -> binary_expression . XOR binary_expression
    (217) binary_expression -> binary_expression . LAND binary_expression
    (218) binary_expression -> binary_expression . LOR binary_expression

    OR              reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    LAND            reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    LOR             reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    CONDOP          reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    COLON           reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 283
    DIVIDE          shift and go to state 286
    MOD             shift and go to state 276
    PLUS            shift and go to state 285
    MINUS           shift and go to state 278
    RSHIFT          shift and go to state 275
    LSHIFT          shift and go to state 287
    LT              shift and go to state 290
    LE              shift and go to state 291
    GE              shift and go to state 274
    GT              shift and go to state 284
    EQ              shift and go to state 277
    NE              shift and go to state 288
    AND             shift and go to state 281
    XOR             shift and go to state 280

  ! TIMES           [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! RSHIFT          [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LSHIFT          [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GE              [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! XOR             [ reduce using rule 215 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 292 ]
  ! LAND            [ shift and go to state 279 ]
  ! LOR             [ shift and go to state 282 ]


state 383

    (250) primary_expression -> OFFSETOF LPAREN type_name . COMMA identifier RPAREN

    COMMA           shift and go to state 416


state 384

    (144) designation -> designator_list EQUALS .

    LBRACE          reduce using rule 144 (designation -> designator_list EQUALS .)
    PLUSPLUS        reduce using rule 144 (designation -> designator_list EQUALS .)
    MINUSMINUS      reduce using rule 144 (designation -> designator_list EQUALS .)
    SIZEOF          reduce using rule 144 (designation -> designator_list EQUALS .)
    LPAREN          reduce using rule 144 (designation -> designator_list EQUALS .)
    AND             reduce using rule 144 (designation -> designator_list EQUALS .)
    TIMES           reduce using rule 144 (designation -> designator_list EQUALS .)
    PLUS            reduce using rule 144 (designation -> designator_list EQUALS .)
    MINUS           reduce using rule 144 (designation -> designator_list EQUALS .)
    NOT             reduce using rule 144 (designation -> designator_list EQUALS .)
    LNOT            reduce using rule 144 (designation -> designator_list EQUALS .)
    OFFSETOF        reduce using rule 144 (designation -> designator_list EQUALS .)
    ID              reduce using rule 144 (designation -> designator_list EQUALS .)
    INT_CONST_DEC   reduce using rule 144 (designation -> designator_list EQUALS .)
    INT_CONST_OCT   reduce using rule 144 (designation -> designator_list EQUALS .)
    INT_CONST_HEX   reduce using rule 144 (designation -> designator_list EQUALS .)
    INT_CONST_BIN   reduce using rule 144 (designation -> designator_list EQUALS .)
    FLOAT_CONST     reduce using rule 144 (designation -> designator_list EQUALS .)
    HEX_FLOAT_CONST reduce using rule 144 (designation -> designator_list EQUALS .)
    CHAR_CONST      reduce using rule 144 (designation -> designator_list EQUALS .)
    WCHAR_CONST     reduce using rule 144 (designation -> designator_list EQUALS .)
    STRING_LITERAL  reduce using rule 144 (designation -> designator_list EQUALS .)
    WSTRING_LITERAL reduce using rule 144 (designation -> designator_list EQUALS .)


state 385

    (146) designator_list -> designator_list designator .

    EQUALS          reduce using rule 146 (designator_list -> designator_list designator .)
    LBRACKET        reduce using rule 146 (designator_list -> designator_list designator .)
    PERIOD          reduce using rule 146 (designator_list -> designator_list designator .)


state 386

    (148) designator -> PERIOD identifier .

    EQUALS          reduce using rule 148 (designator -> PERIOD identifier .)
    LBRACKET        reduce using rule 148 (designator -> PERIOD identifier .)
    PERIOD          reduce using rule 148 (designator -> PERIOD identifier .)


state 387

    (147) designator -> LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 417


state 388

    (142) initializer_list -> designation_opt initializer .

    COMMA           reduce using rule 142 (initializer_list -> designation_opt initializer .)
    RBRACE          reduce using rule 142 (initializer_list -> designation_opt initializer .)


state 389

    (140) initializer -> brace_open initializer_list_opt brace_close .

    COMMA           reduce using rule 140 (initializer -> brace_open initializer_list_opt brace_close .)
    SEMI            reduce using rule 140 (initializer -> brace_open initializer_list_opt brace_close .)
    RBRACE          reduce using rule 140 (initializer -> brace_open initializer_list_opt brace_close .)


state 390

    (141) initializer -> brace_open initializer_list COMMA . brace_close
    (143) initializer_list -> initializer_list COMMA . designation_opt initializer
    (267) brace_close -> . RBRACE
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (268) empty -> .
    (144) designation -> . designator_list EQUALS
    (145) designator_list -> . designator
    (146) designator_list -> . designator_list designator
    (147) designator -> . LBRACKET constant_expression RBRACKET
    (148) designator -> . PERIOD identifier

    RBRACE          shift and go to state 181
    LBRACE          reduce using rule 268 (empty -> .)
    PLUSPLUS        reduce using rule 268 (empty -> .)
    MINUSMINUS      reduce using rule 268 (empty -> .)
    SIZEOF          reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    AND             reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    PLUS            reduce using rule 268 (empty -> .)
    MINUS           reduce using rule 268 (empty -> .)
    NOT             reduce using rule 268 (empty -> .)
    LNOT            reduce using rule 268 (empty -> .)
    OFFSETOF        reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    INT_CONST_DEC   reduce using rule 268 (empty -> .)
    INT_CONST_OCT   reduce using rule 268 (empty -> .)
    INT_CONST_HEX   reduce using rule 268 (empty -> .)
    INT_CONST_BIN   reduce using rule 268 (empty -> .)
    FLOAT_CONST     reduce using rule 268 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 268 (empty -> .)
    CHAR_CONST      reduce using rule 268 (empty -> .)
    WCHAR_CONST     reduce using rule 268 (empty -> .)
    STRING_LITERAL  reduce using rule 268 (empty -> .)
    WSTRING_LITERAL reduce using rule 268 (empty -> .)
    LBRACKET        shift and go to state 301
    PERIOD          shift and go to state 299

    empty                          shift and go to state 418
    designator_list                shift and go to state 298
    designation                    shift and go to state 300
    brace_close                    shift and go to state 419
    designator                     shift and go to state 306
    designation_opt                shift and go to state 420

state 391

    (102) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    COMMA           reduce using rule 102 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    SEMI            reduce using rule 102 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 392

    (104) struct_declarator -> declarator COLON constant_expression .

    COMMA           reduce using rule 104 (struct_declarator -> declarator COLON constant_expression .)
    SEMI            reduce using rule 104 (struct_declarator -> declarator COLON constant_expression .)


state 393

    (122) direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .

    LBRACKET        reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LPAREN          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RPAREN          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EQUALS          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    CONST           reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    VOID            reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _BOOL           reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    CHAR            reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SHORT           reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INT             reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LONG            reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    FLOAT           reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    _COMPLEX        reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SIGNED          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    AUTO            reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    REGISTER        reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    STATIC          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    EXTERN          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    INLINE          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    TYPEID          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    ENUM            reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    STRUCT          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    UNION           reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    LBRACE          reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COMMA           reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    SEMI            reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)
    COLON           reduce using rule 122 (direct_declarator -> direct_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET .)


state 394

    (123) direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .

    LBRACKET        reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LPAREN          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RPAREN          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EQUALS          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CONST           reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    RESTRICT        reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOLATILE        reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    VOID            reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _BOOL           reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    CHAR            reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SHORT           reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INT             reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LONG            reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    FLOAT           reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    DOUBLE          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    _COMPLEX        reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SIGNED          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNSIGNED        reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    AUTO            reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    REGISTER        reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STATIC          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    EXTERN          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEDEF         reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    INLINE          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    TYPEID          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    ENUM            reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    STRUCT          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    UNION           reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    LBRACE          reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COMMA           reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    SEMI            reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)
    COLON           reduce using rule 123 (direct_declarator -> direct_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET .)


state 395

    (170) selection_statement -> SWITCH LPAREN expression . RPAREN statement
    (182) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 421
    COMMA           shift and go to state 332


state 396

    (178) jump_statement -> RETURN expression SEMI .

    ID              reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    CASE            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    IF              reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    DO              reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    GOTO            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    PPPRAGMA        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    CONST           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    RESTRICT        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    VOLATILE        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    _BOOL           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    LONG            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    _COMPLEX        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    SIGNED          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    UNSIGNED        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    AUTO            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    REGISTER        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    EXTERN          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    TYPEDEF         reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    INLINE          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    TYPEID          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    STRUCT          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    UNION           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    SIZEOF          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    AND             reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    OFFSETOF        reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_DEC   reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_OCT   reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_HEX   reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    INT_CONST_BIN   reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    HEX_FLOAT_CONST reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    WCHAR_CONST     reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    STRING_LITERAL  reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    WSTRING_LITERAL reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 178 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 178 (jump_statement -> RETURN expression SEMI .)


state 397

    (174) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 322
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    identifier                     shift and go to state 156
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    expression_opt                 shift and go to state 422

state 398

    (173) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 423


state 399

    (182) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 182 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 182 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 182 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 182 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 182 (expression -> expression COMMA assignment_expression .)


state 400

    (171) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (182) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 424
    COMMA           shift and go to state 332


state 401

    (175) jump_statement -> GOTO ID SEMI .

    ID              reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    CASE            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    DEFAULT         reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    IF              reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    SWITCH          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    WHILE           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    DO              reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    FOR             reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    GOTO            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    BREAK           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    CONTINUE        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    RETURN          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    PPPRAGMA        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    LBRACE          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    CONST           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    RESTRICT        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    VOLATILE        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    VOID            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    _BOOL           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    CHAR            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    SHORT           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    INT             reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    LONG            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    FLOAT           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    DOUBLE          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    _COMPLEX        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    SIGNED          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    UNSIGNED        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    AUTO            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    REGISTER        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    STATIC          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    EXTERN          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    TYPEDEF         reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    INLINE          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    TYPEID          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    ENUM            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    STRUCT          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    UNION           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    PLUSPLUS        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    MINUSMINUS      reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    SIZEOF          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    LPAREN          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    AND             reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    TIMES           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    PLUS            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    MINUS           reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    NOT             reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    LNOT            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    OFFSETOF        reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_DEC   reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_OCT   reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_HEX   reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    INT_CONST_BIN   reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    FLOAT_CONST     reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    HEX_FLOAT_CONST reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    CHAR_CONST      reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    WCHAR_CONST     reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    STRING_LITERAL  reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    WSTRING_LITERAL reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    SEMI            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    RBRACE          reduce using rule 175 (jump_statement -> GOTO ID SEMI .)
    ELSE            reduce using rule 175 (jump_statement -> GOTO ID SEMI .)


state 402

    (168) selection_statement -> IF LPAREN expression . RPAREN statement
    (169) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (182) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 425
    COMMA           shift and go to state 332


state 403

    (167) labeled_statement -> DEFAULT COLON statement .

    ID              reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    PPPRAGMA        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    LBRACE          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    CONST           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    RESTRICT        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    VOLATILE        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    VOID            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    _BOOL           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    CHAR            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    SHORT           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    INT             reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    LONG            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    DOUBLE          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    _COMPLEX        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    SIGNED          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    UNSIGNED        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    AUTO            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    REGISTER        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    STATIC          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    EXTERN          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    TYPEDEF         reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    INLINE          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    TYPEID          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    ENUM            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    STRUCT          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    UNION           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    PLUSPLUS        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    MINUSMINUS      reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    LPAREN          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    LNOT            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    OFFSETOF        reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_DEC   reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_OCT   reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_HEX   reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONST_BIN   reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    FLOAT_CONST     reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    HEX_FLOAT_CONST reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_CONST      reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    WCHAR_CONST     reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    WSTRING_LITERAL reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    SEMI            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    RBRACE          reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 167 (labeled_statement -> DEFAULT COLON statement .)


state 404

    (165) labeled_statement -> ID COLON statement .

    ID              reduce using rule 165 (labeled_statement -> ID COLON statement .)
    CASE            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    DEFAULT         reduce using rule 165 (labeled_statement -> ID COLON statement .)
    IF              reduce using rule 165 (labeled_statement -> ID COLON statement .)
    SWITCH          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    WHILE           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    DO              reduce using rule 165 (labeled_statement -> ID COLON statement .)
    FOR             reduce using rule 165 (labeled_statement -> ID COLON statement .)
    GOTO            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    BREAK           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    CONTINUE        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    RETURN          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    PPPRAGMA        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    LBRACE          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    CONST           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    RESTRICT        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    VOLATILE        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    VOID            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    _BOOL           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    CHAR            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    SHORT           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    INT             reduce using rule 165 (labeled_statement -> ID COLON statement .)
    LONG            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    FLOAT           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    DOUBLE          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    _COMPLEX        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    SIGNED          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    UNSIGNED        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    AUTO            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    REGISTER        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    STATIC          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    EXTERN          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    TYPEDEF         reduce using rule 165 (labeled_statement -> ID COLON statement .)
    INLINE          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    TYPEID          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    ENUM            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    STRUCT          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    UNION           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    PLUSPLUS        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    MINUSMINUS      reduce using rule 165 (labeled_statement -> ID COLON statement .)
    SIZEOF          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    LPAREN          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    AND             reduce using rule 165 (labeled_statement -> ID COLON statement .)
    TIMES           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    PLUS            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    MINUS           reduce using rule 165 (labeled_statement -> ID COLON statement .)
    NOT             reduce using rule 165 (labeled_statement -> ID COLON statement .)
    LNOT            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    OFFSETOF        reduce using rule 165 (labeled_statement -> ID COLON statement .)
    INT_CONST_DEC   reduce using rule 165 (labeled_statement -> ID COLON statement .)
    INT_CONST_OCT   reduce using rule 165 (labeled_statement -> ID COLON statement .)
    INT_CONST_HEX   reduce using rule 165 (labeled_statement -> ID COLON statement .)
    INT_CONST_BIN   reduce using rule 165 (labeled_statement -> ID COLON statement .)
    FLOAT_CONST     reduce using rule 165 (labeled_statement -> ID COLON statement .)
    HEX_FLOAT_CONST reduce using rule 165 (labeled_statement -> ID COLON statement .)
    CHAR_CONST      reduce using rule 165 (labeled_statement -> ID COLON statement .)
    WCHAR_CONST     reduce using rule 165 (labeled_statement -> ID COLON statement .)
    STRING_LITERAL  reduce using rule 165 (labeled_statement -> ID COLON statement .)
    WSTRING_LITERAL reduce using rule 165 (labeled_statement -> ID COLON statement .)
    SEMI            reduce using rule 165 (labeled_statement -> ID COLON statement .)
    RBRACE          reduce using rule 165 (labeled_statement -> ID COLON statement .)
    ELSE            reduce using rule 165 (labeled_statement -> ID COLON statement .)


state 405

    (172) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMI

    LPAREN          shift and go to state 426


state 406

    (166) labeled_statement -> CASE constant_expression COLON . statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 427
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 407

    (220) cast_expression -> LPAREN type_name RPAREN cast_expression .

    CONDOP          reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMES           reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MOD             reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFT          reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFT          reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NE              reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    AND             reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OR              reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOR             reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LAND            reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LOR             reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMI            reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACKET        reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COLON           reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQUALS          reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    XOREQUAL        reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    TIMESEQUAL      reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVEQUAL        reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MODEQUAL        reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSEQUAL       reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUSEQUAL      reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LSHIFTEQUAL     reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RSHIFTEQUAL     reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ANDEQUAL        reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    OREQUAL         reduce using rule 220 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 408

    (243) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name RPAREN brace_open . initializer_list COMMA brace_close
    (142) initializer_list -> . designation_opt initializer
    (143) initializer_list -> . initializer_list COMMA designation_opt initializer
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (268) empty -> .
    (144) designation -> . designator_list EQUALS
    (145) designator_list -> . designator
    (146) designator_list -> . designator_list designator
    (147) designator -> . LBRACKET constant_expression RBRACKET
    (148) designator -> . PERIOD identifier

    LBRACE          reduce using rule 268 (empty -> .)
    PLUSPLUS        reduce using rule 268 (empty -> .)
    MINUSMINUS      reduce using rule 268 (empty -> .)
    SIZEOF          reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    AND             reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    PLUS            reduce using rule 268 (empty -> .)
    MINUS           reduce using rule 268 (empty -> .)
    NOT             reduce using rule 268 (empty -> .)
    LNOT            reduce using rule 268 (empty -> .)
    OFFSETOF        reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    INT_CONST_DEC   reduce using rule 268 (empty -> .)
    INT_CONST_OCT   reduce using rule 268 (empty -> .)
    INT_CONST_HEX   reduce using rule 268 (empty -> .)
    INT_CONST_BIN   reduce using rule 268 (empty -> .)
    FLOAT_CONST     reduce using rule 268 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 268 (empty -> .)
    CHAR_CONST      reduce using rule 268 (empty -> .)
    WCHAR_CONST     reduce using rule 268 (empty -> .)
    STRING_LITERAL  reduce using rule 268 (empty -> .)
    WSTRING_LITERAL reduce using rule 268 (empty -> .)
    LBRACKET        shift and go to state 301
    PERIOD          shift and go to state 299

    empty                          shift and go to state 418
    designation                    shift and go to state 300
    designation_opt                shift and go to state 302
    designator_list                shift and go to state 298
    initializer_list               shift and go to state 428
    designator                     shift and go to state 306

state 409

    (234) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PERIOD          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOR             reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LAND            reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOR             reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONDOP          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    XOREQUAL        reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LSHIFTEQUAL     reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RSHIFTEQUAL     reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ANDEQUAL        reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OREQUAL         reduce using rule 234 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 410

    (235) postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .

    LBRACKET        reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LPAREN          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PERIOD          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ARROW           reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSPLUS        reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSMINUS      reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MOD             reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFT          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFT          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    NE              reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    AND             reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OR              reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOR             reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LAND            reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LOR             reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    CONDOP          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACKET        reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    SEMI            reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    COLON           reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    EQUALS          reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    XOREQUAL        reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    TIMESEQUAL      reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    DIVEQUAL        reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MODEQUAL        reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    PLUSEQUAL       reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    MINUSEQUAL      reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    LSHIFTEQUAL     reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    RSHIFTEQUAL     reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    ANDEQUAL        reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)
    OREQUAL         reduce using rule 235 (postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN .)


state 411

    (252) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 429
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    conditional_expression         shift and go to state 167
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 412

    (220) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (243) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (266) brace_open -> . LBRACE
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    brace_open                     shift and go to state 408
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unified_wstring_literal        shift and go to state 154
    cast_expression                shift and go to state 407
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147
    unary_expression               shift and go to state 266

state 413

    (226) unary_expression -> SIZEOF LPAREN type_name RPAREN .
    (243) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (266) brace_open -> . LBRACE

    EQUALS          reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOREQUAL        reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMESEQUAL      reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVEQUAL        reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MODEQUAL        reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUSEQUAL       reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUSEQUAL      reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFTEQUAL     reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFTEQUAL     reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    ANDEQUAL        reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OREQUAL         reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    CONDOP          reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    TIMES           reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    DIVIDE          reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MOD             reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    PLUS            reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    MINUS           reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RSHIFT          reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LSHIFT          reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LT              reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LE              reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GE              reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    GT              reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    EQ              reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    NE              reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    AND             reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    OR              reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    XOR             reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LAND            reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LOR             reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COMMA           reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    SEMI            reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACKET        reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RPAREN          reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    COLON           reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    RBRACE          reduce using rule 226 (unary_expression -> SIZEOF LPAREN type_name RPAREN .)
    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 408

state 414

    (243) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list brace_close
    (244) postfix_expression -> LPAREN type_name RPAREN . brace_open initializer_list COMMA brace_close
    (266) brace_open -> . LBRACE

    LBRACE          shift and go to state 54

    brace_open                     shift and go to state 408

state 415

    (199) conditional_expression -> binary_expression CONDOP expression COLON . conditional_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LPAREN          shift and go to state 268
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 266
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    conditional_expression         shift and go to state 430
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 416

    (250) primary_expression -> OFFSETOF LPAREN type_name COMMA . identifier RPAREN
    (253) identifier -> . ID

    ID              shift and go to state 112

    identifier                     shift and go to state 431

state 417

    (147) designator -> LBRACKET constant_expression RBRACKET .

    EQUALS          reduce using rule 147 (designator -> LBRACKET constant_expression RBRACKET .)
    LBRACKET        reduce using rule 147 (designator -> LBRACKET constant_expression RBRACKET .)
    PERIOD          reduce using rule 147 (designator -> LBRACKET constant_expression RBRACKET .)


state 418

    (11) designation_opt -> empty .

    LBRACE          reduce using rule 11 (designation_opt -> empty .)
    PLUSPLUS        reduce using rule 11 (designation_opt -> empty .)
    MINUSMINUS      reduce using rule 11 (designation_opt -> empty .)
    SIZEOF          reduce using rule 11 (designation_opt -> empty .)
    LPAREN          reduce using rule 11 (designation_opt -> empty .)
    AND             reduce using rule 11 (designation_opt -> empty .)
    TIMES           reduce using rule 11 (designation_opt -> empty .)
    PLUS            reduce using rule 11 (designation_opt -> empty .)
    MINUS           reduce using rule 11 (designation_opt -> empty .)
    NOT             reduce using rule 11 (designation_opt -> empty .)
    LNOT            reduce using rule 11 (designation_opt -> empty .)
    OFFSETOF        reduce using rule 11 (designation_opt -> empty .)
    ID              reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_DEC   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_OCT   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_HEX   reduce using rule 11 (designation_opt -> empty .)
    INT_CONST_BIN   reduce using rule 11 (designation_opt -> empty .)
    FLOAT_CONST     reduce using rule 11 (designation_opt -> empty .)
    HEX_FLOAT_CONST reduce using rule 11 (designation_opt -> empty .)
    CHAR_CONST      reduce using rule 11 (designation_opt -> empty .)
    WCHAR_CONST     reduce using rule 11 (designation_opt -> empty .)
    STRING_LITERAL  reduce using rule 11 (designation_opt -> empty .)
    WSTRING_LITERAL reduce using rule 11 (designation_opt -> empty .)


state 419

    (141) initializer -> brace_open initializer_list COMMA brace_close .

    COMMA           reduce using rule 141 (initializer -> brace_open initializer_list COMMA brace_close .)
    SEMI            reduce using rule 141 (initializer -> brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 141 (initializer -> brace_open initializer_list COMMA brace_close .)


state 420

    (143) initializer_list -> initializer_list COMMA designation_opt . initializer
    (139) initializer -> . assignment_expression
    (140) initializer -> . brace_open initializer_list_opt brace_close
    (141) initializer -> . brace_open initializer_list COMMA brace_close
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (266) brace_open -> . LBRACE
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    LBRACE          shift and go to state 54
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    assignment_expression          shift and go to state 171
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    identifier                     shift and go to state 156
    initializer                    shift and go to state 432
    brace_open                     shift and go to state 174
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 421

    (170) selection_statement -> SWITCH LPAREN expression RPAREN . statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 433
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 422

    (174) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 434


state 423

    (173) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 322
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    identifier                     shift and go to state 156
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    expression_opt                 shift and go to state 435

state 424

    (171) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 436
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 425

    (168) selection_statement -> IF LPAREN expression RPAREN . statement
    (169) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 437
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 426

    (172) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMI
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    conditional_expression         shift and go to state 167
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    unified_wstring_literal        shift and go to state 154
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 438
    primary_expression             shift and go to state 163
    identifier                     shift and go to state 156
    constant                       shift and go to state 146
    postfix_expression             shift and go to state 147

state 427

    (166) labeled_statement -> CASE constant_expression COLON statement .

    ID              reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    PPPRAGMA        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    LBRACE          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    CONST           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    RESTRICT        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    VOLATILE        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    VOID            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    _BOOL           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    SHORT           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    INT             reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    LONG            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    DOUBLE          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    _COMPLEX        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    SIGNED          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    UNSIGNED        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    AUTO            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    REGISTER        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    STATIC          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    EXTERN          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEDEF         reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    INLINE          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    TYPEID          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    ENUM            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    STRUCT          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    UNION           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUSPLUS        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUSMINUS      reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    LPAREN          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    LNOT            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    OFFSETOF        reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_DEC   reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_OCT   reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_HEX   reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONST_BIN   reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    FLOAT_CONST     reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    HEX_FLOAT_CONST reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_CONST      reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    WCHAR_CONST     reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    WSTRING_LITERAL reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    RBRACE          reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 166 (labeled_statement -> CASE constant_expression COLON statement .)


state 428

    (243) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . brace_close
    (244) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list . COMMA brace_close
    (143) initializer_list -> initializer_list . COMMA designation_opt initializer
    (267) brace_close -> . RBRACE

    COMMA           shift and go to state 439
    RBRACE          shift and go to state 181

    brace_close                    shift and go to state 440

state 429

    (252) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 252 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 252 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 430

    (199) conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .

    COLON           reduce using rule 199 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    COMMA           reduce using rule 199 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACKET        reduce using rule 199 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    SEMI            reduce using rule 199 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RPAREN          reduce using rule 199 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)
    RBRACE          reduce using rule 199 (conditional_expression -> binary_expression CONDOP expression COLON conditional_expression .)


state 431

    (250) primary_expression -> OFFSETOF LPAREN type_name COMMA identifier . RPAREN

    RPAREN          shift and go to state 441


state 432

    (143) initializer_list -> initializer_list COMMA designation_opt initializer .

    COMMA           reduce using rule 143 (initializer_list -> initializer_list COMMA designation_opt initializer .)
    RBRACE          reduce using rule 143 (initializer_list -> initializer_list COMMA designation_opt initializer .)


state 433

    (170) selection_statement -> SWITCH LPAREN expression RPAREN statement .

    WHILE           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ID              reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PPPRAGMA        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    VOID            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    _BOOL           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    _COMPLEX        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    AND             reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    NOT             reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    OFFSETOF        reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    INT_CONST_BIN   reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 170 (selection_statement -> SWITCH LPAREN expression RPAREN statement .)


state 434

    (174) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 322
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    identifier                     shift and go to state 156
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    expression_opt                 shift and go to state 442

state 435

    (173) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 443


state 436

    (171) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    ID              reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PPPRAGMA        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    _BOOL           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LONG            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    _COMPLEX        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    UNION           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    AND             reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    OFFSETOF        reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST_BIN   reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 171 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 437

    (168) selection_statement -> IF LPAREN expression RPAREN statement .
    (169) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    WHILE           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PPPRAGMA        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CONST           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RESTRICT        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOLATILE        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    _BOOL           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LONG            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    _COMPLEX        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIGNED          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNSIGNED        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    REGISTER        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEDEF         reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INLINE          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TYPEID          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRUCT          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    UNION           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SIZEOF          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    AND             reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LNOT            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    OFFSETOF        reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_DEC   reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_OCT   reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_HEX   reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST_BIN   reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WCHAR_CONST     reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WSTRING_LITERAL reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 444

  ! ELSE            [ reduce using rule 168 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 438

    (172) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMI
    (182) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 445
    COMMA           shift and go to state 332


state 439

    (244) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA . brace_close
    (143) initializer_list -> initializer_list COMMA . designation_opt initializer
    (267) brace_close -> . RBRACE
    (11) designation_opt -> . empty
    (12) designation_opt -> . designation
    (268) empty -> .
    (144) designation -> . designator_list EQUALS
    (145) designator_list -> . designator
    (146) designator_list -> . designator_list designator
    (147) designator -> . LBRACKET constant_expression RBRACKET
    (148) designator -> . PERIOD identifier

    RBRACE          shift and go to state 181
    LBRACE          reduce using rule 268 (empty -> .)
    PLUSPLUS        reduce using rule 268 (empty -> .)
    MINUSMINUS      reduce using rule 268 (empty -> .)
    SIZEOF          reduce using rule 268 (empty -> .)
    LPAREN          reduce using rule 268 (empty -> .)
    AND             reduce using rule 268 (empty -> .)
    TIMES           reduce using rule 268 (empty -> .)
    PLUS            reduce using rule 268 (empty -> .)
    MINUS           reduce using rule 268 (empty -> .)
    NOT             reduce using rule 268 (empty -> .)
    LNOT            reduce using rule 268 (empty -> .)
    OFFSETOF        reduce using rule 268 (empty -> .)
    ID              reduce using rule 268 (empty -> .)
    INT_CONST_DEC   reduce using rule 268 (empty -> .)
    INT_CONST_OCT   reduce using rule 268 (empty -> .)
    INT_CONST_HEX   reduce using rule 268 (empty -> .)
    INT_CONST_BIN   reduce using rule 268 (empty -> .)
    FLOAT_CONST     reduce using rule 268 (empty -> .)
    HEX_FLOAT_CONST reduce using rule 268 (empty -> .)
    CHAR_CONST      reduce using rule 268 (empty -> .)
    WCHAR_CONST     reduce using rule 268 (empty -> .)
    STRING_LITERAL  reduce using rule 268 (empty -> .)
    WSTRING_LITERAL reduce using rule 268 (empty -> .)
    LBRACKET        shift and go to state 301
    PERIOD          shift and go to state 299

    empty                          shift and go to state 418
    designation                    shift and go to state 300
    brace_close                    shift and go to state 446
    designation_opt                shift and go to state 420
    designator_list                shift and go to state 298
    designator                     shift and go to state 306

state 440

    (243) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .

    LBRACKET        reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LPAREN          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PERIOD          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    ARROW           reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUSPLUS        reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUSMINUS      reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    TIMES           reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    DIVIDE          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MOD             reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUS            reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUS           reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RSHIFT          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LSHIFT          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LT              reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LE              reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    GE              reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    GT              reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    EQ              reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    NE              reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    AND             reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    OR              reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    XOR             reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LAND            reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LOR             reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    CONDOP          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RBRACKET        reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    COMMA           reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    SEMI            reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RPAREN          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    COLON           reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RBRACE          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    EQUALS          reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    XOREQUAL        reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    TIMESEQUAL      reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    DIVEQUAL        reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MODEQUAL        reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    PLUSEQUAL       reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    MINUSEQUAL      reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    LSHIFTEQUAL     reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    RSHIFTEQUAL     reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    ANDEQUAL        reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)
    OREQUAL         reduce using rule 243 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close .)


state 441

    (250) primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .

    LBRACKET        reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    LPAREN          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    PERIOD          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    ARROW           reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    PLUSPLUS        reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    MINUSMINUS      reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    EQUALS          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    XOREQUAL        reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    TIMESEQUAL      reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    DIVEQUAL        reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    MODEQUAL        reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    PLUSEQUAL       reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    MINUSEQUAL      reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    LSHIFTEQUAL     reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    RSHIFTEQUAL     reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    ANDEQUAL        reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    OREQUAL         reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    CONDOP          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    TIMES           reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    DIVIDE          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    MOD             reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    PLUS            reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    MINUS           reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    RSHIFT          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    LSHIFT          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    LT              reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    LE              reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    GE              reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    GT              reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    EQ              reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    NE              reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    AND             reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    OR              reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    XOR             reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    LAND            reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    LOR             reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    RPAREN          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    COMMA           reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    RBRACKET        reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    SEMI            reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    COLON           reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)
    RBRACE          reduce using rule 250 (primary_expression -> OFFSETOF LPAREN type_name COMMA identifier RPAREN .)


state 442

    (174) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 447


state 443

    (173) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    RPAREN          reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    ID              shift and go to state 112
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    empty                          shift and go to state 322
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    identifier                     shift and go to state 156
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147
    expression_opt                 shift and go to state 448

state 444

    (169) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 449
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 445

    (172) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 450


state 446

    (244) postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .

    LBRACKET        reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LPAREN          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PERIOD          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    ARROW           reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUSPLUS        reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUSMINUS      reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    TIMES           reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    DIVIDE          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MOD             reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUS            reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUS           reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RSHIFT          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LSHIFT          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LT              reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LE              reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    GE              reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    GT              reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    EQ              reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    NE              reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    AND             reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    OR              reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    XOR             reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LAND            reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LOR             reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    CONDOP          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RBRACKET        reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    COMMA           reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    SEMI            reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RPAREN          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    COLON           reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RBRACE          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    EQUALS          reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    XOREQUAL        reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    TIMESEQUAL      reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    DIVEQUAL        reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MODEQUAL        reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    PLUSEQUAL       reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    MINUSEQUAL      reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    LSHIFTEQUAL     reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    RSHIFTEQUAL     reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    ANDEQUAL        reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)
    OREQUAL         reduce using rule 244 (postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close .)


state 447

    (174) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 451
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 448

    (173) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 452


state 449

    (169) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    WHILE           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    GOTO            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONTINUE        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PPPRAGMA        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CONST           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RESTRICT        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOLATILE        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    _BOOL           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SHORT           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LONG            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DOUBLE          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    _COMPLEX        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIGNED          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNSIGNED        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AUTO            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    REGISTER        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STATIC          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    EXTERN          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEDEF         reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INLINE          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TYPEID          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ENUM            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRUCT          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    UNION           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SIZEOF          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    AND             reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LNOT            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    OFFSETOF        reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_DEC   reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_OCT   reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_HEX   reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST_BIN   reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    HEX_FLOAT_CONST reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WCHAR_CONST     reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WSTRING_LITERAL reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 169 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 450

    (172) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .

    ID              reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CASE            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DEFAULT         reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SWITCH          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DO              reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    GOTO            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONTINUE        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PPPRAGMA        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CONST           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RESTRICT        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOLATILE        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    _BOOL           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SHORT           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LONG            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    DOUBLE          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    _COMPLEX        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIGNED          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNSIGNED        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AUTO            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    REGISTER        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STATIC          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    EXTERN          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEDEF         reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INLINE          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TYPEID          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ENUM            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRUCT          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    UNION           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SIZEOF          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    AND             reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    LNOT            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    OFFSETOF        reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_DEC   reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_OCT   reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_HEX   reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    INT_CONST_BIN   reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    HEX_FLOAT_CONST reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WCHAR_CONST     reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    WSTRING_LITERAL reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    RBRACE          reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 172 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMI .)


state 451

    (174) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CASE            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DEFAULT         reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SWITCH          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    GOTO            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PPPRAGMA        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CONST           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RESTRICT        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOLATILE        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    _BOOL           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SHORT           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LONG            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    DOUBLE          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    _COMPLEX        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SIGNED          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UNSIGNED        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AUTO            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    REGISTER        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STATIC          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    EXTERN          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TYPEDEF         reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INLINE          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TYPEID          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ENUM            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRUCT          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    UNION           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SIZEOF          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    OFFSETOF        reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_DEC   reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_OCT   reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_HEX   reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_BIN   reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WCHAR_CONST     reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WSTRING_LITERAL reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 174 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 452

    (173) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (43) statement -> . labeled_statement
    (44) statement -> . expression_statement
    (45) statement -> . compound_statement
    (46) statement -> . selection_statement
    (47) statement -> . iteration_statement
    (48) statement -> . jump_statement
    (49) statement -> . pppragma_directive
    (165) labeled_statement -> . ID COLON statement
    (166) labeled_statement -> . CASE constant_expression COLON statement
    (167) labeled_statement -> . DEFAULT COLON statement
    (180) expression_statement -> . expression_opt SEMI
    (164) compound_statement -> . brace_open block_item_list_opt brace_close
    (168) selection_statement -> . IF LPAREN expression RPAREN statement
    (169) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (170) selection_statement -> . SWITCH LPAREN expression RPAREN statement
    (171) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (172) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMI
    (173) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (174) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (175) jump_statement -> . GOTO ID SEMI
    (176) jump_statement -> . BREAK SEMI
    (177) jump_statement -> . CONTINUE SEMI
    (178) jump_statement -> . RETURN expression SEMI
    (179) jump_statement -> . RETURN SEMI
    (39) pppragma_directive -> . PPPRAGMA
    (40) pppragma_directive -> . PPPRAGMA PPPRAGMASTR
    (13) expression_opt -> . empty
    (14) expression_opt -> . expression
    (266) brace_open -> . LBRACE
    (268) empty -> .
    (181) expression -> . assignment_expression
    (182) expression -> . expression COMMA assignment_expression
    (184) assignment_expression -> . conditional_expression
    (185) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (198) conditional_expression -> . binary_expression
    (199) conditional_expression -> . binary_expression CONDOP expression COLON conditional_expression
    (221) unary_expression -> . postfix_expression
    (222) unary_expression -> . PLUSPLUS unary_expression
    (223) unary_expression -> . MINUSMINUS unary_expression
    (224) unary_expression -> . unary_operator cast_expression
    (225) unary_expression -> . SIZEOF unary_expression
    (226) unary_expression -> . SIZEOF LPAREN type_name RPAREN
    (200) binary_expression -> . cast_expression
    (201) binary_expression -> . binary_expression TIMES binary_expression
    (202) binary_expression -> . binary_expression DIVIDE binary_expression
    (203) binary_expression -> . binary_expression MOD binary_expression
    (204) binary_expression -> . binary_expression PLUS binary_expression
    (205) binary_expression -> . binary_expression MINUS binary_expression
    (206) binary_expression -> . binary_expression RSHIFT binary_expression
    (207) binary_expression -> . binary_expression LSHIFT binary_expression
    (208) binary_expression -> . binary_expression LT binary_expression
    (209) binary_expression -> . binary_expression LE binary_expression
    (210) binary_expression -> . binary_expression GE binary_expression
    (211) binary_expression -> . binary_expression GT binary_expression
    (212) binary_expression -> . binary_expression EQ binary_expression
    (213) binary_expression -> . binary_expression NE binary_expression
    (214) binary_expression -> . binary_expression AND binary_expression
    (215) binary_expression -> . binary_expression OR binary_expression
    (216) binary_expression -> . binary_expression XOR binary_expression
    (217) binary_expression -> . binary_expression LAND binary_expression
    (218) binary_expression -> . binary_expression LOR binary_expression
    (233) postfix_expression -> . primary_expression
    (234) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (235) postfix_expression -> . postfix_expression LPAREN argument_expression_list RPAREN
    (236) postfix_expression -> . postfix_expression LPAREN RPAREN
    (237) postfix_expression -> . postfix_expression PERIOD ID
    (238) postfix_expression -> . postfix_expression PERIOD TYPEID
    (239) postfix_expression -> . postfix_expression ARROW ID
    (240) postfix_expression -> . postfix_expression ARROW TYPEID
    (241) postfix_expression -> . postfix_expression PLUSPLUS
    (242) postfix_expression -> . postfix_expression MINUSMINUS
    (243) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list brace_close
    (244) postfix_expression -> . LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
    (227) unary_operator -> . AND
    (228) unary_operator -> . TIMES
    (229) unary_operator -> . PLUS
    (230) unary_operator -> . MINUS
    (231) unary_operator -> . NOT
    (232) unary_operator -> . LNOT
    (219) cast_expression -> . unary_expression
    (220) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (245) primary_expression -> . identifier
    (246) primary_expression -> . constant
    (247) primary_expression -> . unified_string_literal
    (248) primary_expression -> . unified_wstring_literal
    (249) primary_expression -> . LPAREN expression RPAREN
    (250) primary_expression -> . OFFSETOF LPAREN type_name COMMA identifier RPAREN
    (253) identifier -> . ID
    (254) constant -> . INT_CONST_DEC
    (255) constant -> . INT_CONST_OCT
    (256) constant -> . INT_CONST_HEX
    (257) constant -> . INT_CONST_BIN
    (258) constant -> . FLOAT_CONST
    (259) constant -> . HEX_FLOAT_CONST
    (260) constant -> . CHAR_CONST
    (261) constant -> . WCHAR_CONST
    (262) unified_string_literal -> . STRING_LITERAL
    (263) unified_string_literal -> . unified_string_literal STRING_LITERAL
    (264) unified_wstring_literal -> . WSTRING_LITERAL
    (265) unified_wstring_literal -> . unified_wstring_literal WSTRING_LITERAL

    ID              shift and go to state 227
    CASE            shift and go to state 231
    DEFAULT         shift and go to state 225
    IF              shift and go to state 224
    SWITCH          shift and go to state 209
    WHILE           shift and go to state 221
    DO              shift and go to state 230
    FOR             shift and go to state 214
    GOTO            shift and go to state 222
    BREAK           shift and go to state 218
    CONTINUE        shift and go to state 213
    RETURN          shift and go to state 210
    PPPRAGMA        shift and go to state 19
    LBRACE          shift and go to state 54
    SEMI            reduce using rule 268 (empty -> .)
    PLUSPLUS        shift and go to state 152
    MINUSMINUS      shift and go to state 161
    SIZEOF          shift and go to state 151
    LPAREN          shift and go to state 140
    AND             shift and go to state 157
    TIMES           shift and go to state 172
    PLUS            shift and go to state 166
    MINUS           shift and go to state 137
    NOT             shift and go to state 141
    LNOT            shift and go to state 158
    OFFSETOF        shift and go to state 162
    INT_CONST_DEC   shift and go to state 148
    INT_CONST_OCT   shift and go to state 160
    INT_CONST_HEX   shift and go to state 168
    INT_CONST_BIN   shift and go to state 159
    FLOAT_CONST     shift and go to state 138
    HEX_FLOAT_CONST shift and go to state 155
    CHAR_CONST      shift and go to state 145
    WCHAR_CONST     shift and go to state 165
    STRING_LITERAL  shift and go to state 164
    WSTRING_LITERAL shift and go to state 144

    jump_statement                 shift and go to state 229
    pppragma_directive             shift and go to state 216
    assignment_expression          shift and go to state 217
    unary_operator                 shift and go to state 149
    unified_string_literal         shift and go to state 150
    labeled_statement              shift and go to state 205
    unary_expression               shift and go to state 136
    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 139
    expression                     shift and go to state 220
    statement                      shift and go to state 453
    expression_statement           shift and go to state 206
    identifier                     shift and go to state 156
    empty                          shift and go to state 322
    selection_statement            shift and go to state 211
    compound_statement             shift and go to state 223
    brace_open                     shift and go to state 117
    primary_expression             shift and go to state 163
    unified_wstring_literal        shift and go to state 154
    iteration_statement            shift and go to state 228
    expression_opt                 shift and go to state 212
    constant                       shift and go to state 146
    conditional_expression         shift and go to state 167
    postfix_expression             shift and go to state 147

state 453

    (173) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CASE            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DEFAULT         reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SWITCH          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DO              reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    GOTO            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONTINUE        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PPPRAGMA        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CONST           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RESTRICT        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOLATILE        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    _BOOL           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SHORT           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LONG            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    DOUBLE          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    _COMPLEX        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SIGNED          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNSIGNED        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AUTO            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    REGISTER        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STATIC          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    EXTERN          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TYPEDEF         reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INLINE          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TYPEID          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ENUM            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRUCT          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    UNION           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SIZEOF          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    AND             reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LNOT            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    OFFSETOF        reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_DEC   reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_OCT   reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_HEX   reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST_BIN   reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    HEX_FLOAT_CONST reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WCHAR_CONST     reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WSTRING_LITERAL reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 173 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 437 resolved as shift
